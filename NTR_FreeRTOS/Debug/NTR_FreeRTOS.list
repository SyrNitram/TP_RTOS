
NTR_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006454  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d0  080067d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d8  080067d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040b8  20000074  08006854  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000412c  08006854  0002412c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e4c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003416  00000000  00000000  00036ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003b678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d42  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173b0  00000000  00000000  000655c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9d85  00000000  00000000  0007c972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001766f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  00176748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800660c 	.word	0x0800660c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800660c 	.word	0x0800660c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ffdf 	bl	80035c8 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08006630 	.word	0x08006630
 800061c:	20000090 	.word	0x20000090

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 f819 	bl	8003660 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0xa8>)
 80006ac:	f000 fe7e 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_GPIO_Init+0xa8>)
 80006c8:	f000 fcc4 	bl	8001054 <HAL_GPIO_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40022000 	.word	0x40022000

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fba8 	bl	8000e36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f859 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f7ff ffa1 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006ee:	f000 fac7 	bl	8000c80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <main+0x90>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	4a1d      	ldr	r2, [pc, #116]	; (800076c <main+0x90>)
 80006f8:	f043 0310 	orr.w	r3, r3, #16
 80006fc:	6093      	str	r3, [r2, #8]

  BaseType_t xReturned;

  q_timer = xQueueCreate(Q_TIMER_LENGTH, Q_TIMER_SIZE);
 80006fe:	2200      	movs	r2, #0
 8000700:	2104      	movs	r1, #4
 8000702:	200a      	movs	r0, #10
 8000704:	f003 f8de 	bl	80038c4 <xQueueGenericCreate>
 8000708:	4603      	mov	r3, r0
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <main+0x94>)
 800070c:	6013      	str	r3, [r2, #0]

  xReturned = xTaskCreate(LedToggle , "Led1", STACK_SIZE, (void * ) DELAY_1, tskIDLE_PRIORITY, &xLedHandle);
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <main+0x98>)
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	2300      	movs	r3, #0
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071c:	4916      	ldr	r1, [pc, #88]	; (8000778 <main+0x9c>)
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <main+0xa0>)
 8000720:	f003 fc91 	bl	8004046 <xTaskCreate>
 8000724:	6078      	str	r0, [r7, #4]
  xReturned = xTaskCreate(GiveSem 	, "GIVE", STACK_SIZE, (void * ) DELAY_2, 1, &xGiveHandle);
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <main+0xa4>)
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	2301      	movs	r3, #1
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	23c8      	movs	r3, #200	; 0xc8
 8000730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <main+0xa8>)
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <main+0xac>)
 8000738:	f003 fc85 	bl	8004046 <xTaskCreate>
 800073c:	6078      	str	r0, [r7, #4]
  xReturned = xTaskCreate(TakeSem 	, "TAKE", STACK_SIZE, (void * ) DELAY_1, 2, &xTakeHandle);
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0xb0>)
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2302      	movs	r3, #2
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074c:	4910      	ldr	r1, [pc, #64]	; (8000790 <main+0xb4>)
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <main+0xb8>)
 8000750:	f003 fc79 	bl	8004046 <xTaskCreate>
 8000754:	6078      	str	r0, [r7, #4]

  printf("==========START===========\r\n");
 8000756:	4810      	ldr	r0, [pc, #64]	; (8000798 <main+0xbc>)
 8000758:	f004 ffda 	bl	8005710 <puts>

  vTaskStartScheduler();
 800075c:	f003 fde2 	bl	8004324 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000760:	f7ff ff42 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000764:	f002 ff29 	bl	80035ba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x8c>
 800076a:	bf00      	nop
 800076c:	e0042000 	.word	0xe0042000
 8000770:	200002f4 	.word	0x200002f4
 8000774:	200002e8 	.word	0x200002e8
 8000778:	0800664c 	.word	0x0800664c
 800077c:	08000879 	.word	0x08000879
 8000780:	200002ec 	.word	0x200002ec
 8000784:	08006654 	.word	0x08006654
 8000788:	080008b9 	.word	0x080008b9
 800078c:	200002f0 	.word	0x200002f0
 8000790:	0800665c 	.word	0x0800665c
 8000794:	08000919 	.word	0x08000919
 8000798:	08006664 	.word	0x08006664

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 ff22 	bl	80055f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <SystemClock_Config+0xd4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <SystemClock_Config+0xd4>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <SystemClock_Config+0xd4>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemClock_Config+0xd8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a25      	ldr	r2, [pc, #148]	; (8000874 <SystemClock_Config+0xd8>)
 80007de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <SystemClock_Config+0xd8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000804:	2319      	movs	r3, #25
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000808:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fe4a 	bl	80014b4 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000826:	f000 f8cf 	bl	80009c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800082a:	f000 fdf3 	bl	8001414 <HAL_PWREx_EnableOverDrive>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000834:	f000 f8c8 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000844:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2107      	movs	r1, #7
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f8d0 	bl	80019fc <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000862:	f000 f8b1 	bl	80009c8 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	; 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <LedToggle>:

/* USER CODE BEGIN 4 */


void LedToggle(void * pvParameters){
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	60fb      	str	r3, [r7, #12]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 8000884:	f004 f986 	bl	8004b94 <xTaskGetCurrentTaskHandle>
 8000888:	4603      	mov	r3, r0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fe5a 	bl	8004544 <pcTaskGetName>
 8000890:	60b8      	str	r0, [r7, #8]

	while(1) {
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n",s ,duree);
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <LedToggle+0x38>)
 8000898:	f004 feb4 	bl	8005604 <iprintf>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800089c:	2102      	movs	r1, #2
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <LedToggle+0x3c>)
 80008a0:	f000 fd9d 	bl	80013de <HAL_GPIO_TogglePin>
		vTaskDelay(duree);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fd06 	bl	80042b8 <vTaskDelay>
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n",s ,duree);
 80008ac:	e7f1      	b.n	8000892 <LedToggle+0x1a>
 80008ae:	bf00      	nop
 80008b0:	08006680 	.word	0x08006680
 80008b4:	40022000 	.word	0x40022000

080008b8 <GiveSem>:
	}
}


void GiveSem (void * pvParameters){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	613b      	str	r3, [r7, #16]
	int cmpt = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
	while(1) {

		cmpt += 100;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3364      	adds	r3, #100	; 0x64
 80008cc:	617b      	str	r3, [r7, #20]
		printf("Sem GIVE\r\n");
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <GiveSem+0x54>)
 80008d0:	f004 ff1e 	bl	8005710 <puts>
		uint32_t timer_value = HAL_GetTick();
 80008d4:	f000 fad0 	bl	8000e78 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	60bb      	str	r3, [r7, #8]
		BaseType_t ret = xQueueSend(q_timer, (void*) &timer_value, 1000);
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <GiveSem+0x58>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	f107 0108 	add.w	r1, r7, #8
 80008e4:	2300      	movs	r3, #0
 80008e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ea:	f003 f84d 	bl	8003988 <xQueueGenericSend>
 80008ee:	60f8      	str	r0, [r7, #12]
		if (ret == errQUEUE_FULL) printf("QUEUE PLEIENENEEN.");
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <GiveSem+0x44>
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <GiveSem+0x5c>)
 80008f8:	f004 fe84 	bl	8005604 <iprintf>
		//xTaskNotifyGive(xTakeHandle);
		vTaskDelay(duree +cmpt);
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fcd8 	bl	80042b8 <vTaskDelay>
	while(1) {
 8000908:	e7de      	b.n	80008c8 <GiveSem+0x10>
 800090a:	bf00      	nop
 800090c:	080066b8 	.word	0x080066b8
 8000910:	200002f4 	.word	0x200002f4
 8000914:	080066c4 	.word	0x080066c4

08000918 <TakeSem>:
	}
}

void TakeSem (void * pvParameters){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	617b      	str	r3, [r7, #20]
	while(1) {
		printf("Sem TAKING ..\r\n");
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <TakeSem+0x54>)
 8000926:	f004 fef3 	bl	8005710 <puts>
		uint32_t timer_value;
		BaseType_t ret = xQueueReceive(q_timer, (void*) &timer_value, 1000);
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <TakeSem+0x58>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f107 010c 	add.w	r1, r7, #12
 8000932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000936:	4618      	mov	r0, r3
 8000938:	f003 f92c 	bl	8003b94 <xQueueReceive>
 800093c:	6138      	str	r0, [r7, #16]
		if (ret == pdFALSE) printf("QUEUE VIDE.\r\n");
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d103      	bne.n	800094c <TakeSem+0x34>
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <TakeSem+0x5c>)
 8000946:	f004 fee3 	bl	8005710 <puts>
 800094a:	e007      	b.n	800095c <TakeSem+0x44>
		else if (ret == pdTRUE) printf ("Timer = %ld \r\n", timer_value);
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d104      	bne.n	800095c <TakeSem+0x44>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4619      	mov	r1, r3
 8000956:	4808      	ldr	r0, [pc, #32]	; (8000978 <TakeSem+0x60>)
 8000958:	f004 fe54 	bl	8005604 <iprintf>
		//BaseType_t ret = ulTaskNotifyTake(pdTRUE, 1000);
		//if (ret == pdFALSE) NVIC_SystemReset();
		printf("Sem TAKEN3 ..\r\n");
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <TakeSem+0x64>)
 800095e:	f004 fed7 	bl	8005710 <puts>
		vTaskDelay(duree);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fca7 	bl	80042b8 <vTaskDelay>
	while(1) {
 800096a:	e7db      	b.n	8000924 <TakeSem+0xc>
 800096c:	080066d8 	.word	0x080066d8
 8000970:	200002f4 	.word	0x200002f4
 8000974:	080066e8 	.word	0x080066e8
 8000978:	080066f8 	.word	0x080066f8
 800097c:	08006708 	.word	0x08006708

08000980 <__io_putchar>:
	}
}

int __io_putchar(int ch) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000988:	1d39      	adds	r1, r7, #4
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	2201      	movs	r2, #1
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <__io_putchar+0x20>)
 8000992:	f002 f969 	bl	8002c68 <HAL_UART_Transmit>
	return ch;
 8000996:	687b      	ldr	r3, [r7, #4]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000348 	.word	0x20000348

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b6:	f000 fa4b 	bl	8000e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40001000 	.word	0x40001000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	f06f 0001 	mvn.w	r0, #1
 8000a12:	f000 faf5 	bl	8001000 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2036      	movs	r0, #54	; 0x36
 8000a3a:	f000 fae1 	bl	8001000 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a3e:	2036      	movs	r0, #54	; 0x36
 8000a40:	f000 fafa 	bl	8001038 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f9ae 	bl	8001dc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a6c:	f001 f984 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8000a70:	4603      	mov	r3, r0
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_InitTick+0xa8>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <HAL_InitTick+0xac>)
 8000a88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_InitTick+0xa8>)
 8000a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_InitTick+0xa8>)
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_InitTick+0xa8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_InitTick+0xa8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <HAL_InitTick+0xa8>)
 8000aa6:	f001 fdb1 	bl	800260c <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d104      	bne.n	8000aba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <HAL_InitTick+0xa8>)
 8000ab2:	f001 fe0d 	bl	80026d0 <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3730      	adds	r7, #48	; 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	200002f8 	.word	0x200002f8
 8000ad0:	40001000 	.word	0x40001000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM6_DAC_IRQHandler+0x10>)
 8000b06:	f001 fe5b 	bl	80027c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200002f8 	.word	0x200002f8

08000b14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e00a      	b.n	8000b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b26:	f3af 8000 	nop.w
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	60ba      	str	r2, [r7, #8]
 8000b32:	b2ca      	uxtb	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbf0      	blt.n	8000b26 <_read+0x12>
	}

return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e009      	b.n	8000b74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff09 	bl	8000980 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf1      	blt.n	8000b60 <_write+0x12>
	}
	return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f004 fcb0 	bl	8005584 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20050000 	.word	0x20050000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000344 	.word	0x20000344
 8000c58:	20004130 	.word	0x20004130

08000c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART1_UART_Init+0x58>)
 8000cc4:	f001 ff82 	bl	8002bcc <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cce:	f7ff fe7b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000348 	.word	0x20000348
 8000cdc:	40011000 	.word	0x40011000

08000ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ac      	sub	sp, #176	; 0xb0
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	2284      	movs	r2, #132	; 0x84
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fc77 	bl	80055f4 <memset>
  if(uartHandle->Instance==USART1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a32      	ldr	r2, [pc, #200]	; (8000dd4 <HAL_UART_MspInit+0xf4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d15c      	bne.n	8000dca <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d10:	2340      	movs	r3, #64	; 0x40
 8000d12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d14:	2300      	movs	r3, #0
 8000d16:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 f885 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d28:	f7ff fe4e 	bl	80009c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6453      	str	r3, [r2, #68]	; 0x44
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d96:	4619      	mov	r1, r3
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <HAL_UART_MspInit+0xfc>)
 8000d9a:	f000 f95b 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000db8:	2307      	movs	r3, #7
 8000dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <HAL_UART_MspInit+0x100>)
 8000dc6:	f000 f945 	bl	8001054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dca:	bf00      	nop
 8000dcc:	37b0      	adds	r7, #176	; 0xb0
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020000 	.word	0x40020000

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0e:	f7ff ff25 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f004 fbbd 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fc61 	bl	80006dc <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e28:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8000e2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e30:	2000412c 	.word	0x2000412c

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>

08000e36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 f8d5 	bl	8000fea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e40:	200f      	movs	r0, #15
 8000e42:	f7ff fdef 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e46:	f7ff fdc5 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	200003cc 	.word	0x200003cc

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200003cc 	.word	0x200003cc

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	05fa0000 	.word	0x05fa0000

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff4c 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001012:	f7ff ff61 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001016:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f7ff ffb1 	bl	8000f84 <NVIC_EncodePriority>
 8001022:	4602      	mov	r2, r0
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff80 	bl	8000f30 <__NVIC_SetPriority>
}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff54 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e175      	b.n	8001360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 8164 	bne.w	800135a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_GPIO_Init+0x56>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80be 	beq.w	800135a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b66      	ldr	r3, [pc, #408]	; (8001378 <HAL_GPIO_Init+0x324>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a65      	ldr	r2, [pc, #404]	; (8001378 <HAL_GPIO_Init+0x324>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_GPIO_Init+0x324>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011f6:	4a61      	ldr	r2, [pc, #388]	; (800137c <HAL_GPIO_Init+0x328>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_GPIO_Init+0x32c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d037      	beq.n	8001292 <HAL_GPIO_Init+0x23e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_GPIO_Init+0x330>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d031      	beq.n	800128e <HAL_GPIO_Init+0x23a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a56      	ldr	r2, [pc, #344]	; (8001388 <HAL_GPIO_Init+0x334>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x236>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a55      	ldr	r2, [pc, #340]	; (800138c <HAL_GPIO_Init+0x338>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x232>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a54      	ldr	r2, [pc, #336]	; (8001390 <HAL_GPIO_Init+0x33c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x22e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a53      	ldr	r2, [pc, #332]	; (8001394 <HAL_GPIO_Init+0x340>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x22a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x344>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x226>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_GPIO_Init+0x348>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x222>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_GPIO_Init+0x34c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x21e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x350>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x21a>
 800126a:	2309      	movs	r3, #9
 800126c:	e012      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800126e:	230a      	movs	r3, #10
 8001270:	e010      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001272:	2308      	movs	r3, #8
 8001274:	e00e      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001276:	2307      	movs	r3, #7
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800127a:	2306      	movs	r3, #6
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x328>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <HAL_GPIO_Init+0x354>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a34      	ldr	r2, [pc, #208]	; (80013a8 <HAL_GPIO_Init+0x354>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x354>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_GPIO_Init+0x354>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae86 	bls.w	8001074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40022000 	.word	0x40022000
 80013a4:	40022400 	.word	0x40022400
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001442:	f7ff fd19 	bl	8000e78 <HAL_GetTick>
 8001446:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001448:	e009      	b.n	800145e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800144a:	f7ff fd15 	bl	8000e78 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001458:	d901      	bls.n	800145e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e022      	b.n	80014a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d1ee      	bne.n	800144a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff fcfe 	bl	8000e78 <HAL_GetTick>
 800147c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800147e:	e009      	b.n	8001494 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001480:	f7ff fcfa 	bl	8000e78 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800148e:	d901      	bls.n	8001494 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e007      	b.n	80014a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014a0:	d1ee      	bne.n	8001480 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e291      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8087 	beq.w	80015e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d8:	4b96      	ldr	r3, [pc, #600]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d00c      	beq.n	80014fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e4:	4b93      	ldr	r3, [pc, #588]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d112      	bne.n	8001516 <HAL_RCC_OscConfig+0x62>
 80014f0:	4b90      	ldr	r3, [pc, #576]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fc:	d10b      	bne.n	8001516 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	4b8d      	ldr	r3, [pc, #564]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d06c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x130>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d168      	bne.n	80015e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e26b      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x7a>
 8001520:	4b84      	ldr	r3, [pc, #528]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a83      	ldr	r2, [pc, #524]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e02e      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x9c>
 8001536:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a7e      	ldr	r2, [pc, #504]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800153c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7b      	ldr	r2, [pc, #492]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e01d      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0xc0>
 800155a:	4b76      	ldr	r3, [pc, #472]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a75      	ldr	r2, [pc, #468]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b73      	ldr	r3, [pc, #460]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a72      	ldr	r2, [pc, #456]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 8001574:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800157a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b6c      	ldr	r3, [pc, #432]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6b      	ldr	r2, [pc, #428]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fc70 	bl	8000e78 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc6c 	bl	8000e78 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e21f      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b61      	ldr	r3, [pc, #388]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc5c 	bl	8000e78 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fc58 	bl	8000e78 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e20b      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	4b57      	ldr	r3, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x110>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d069      	beq.n	80016c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x190>
 800160a:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x17a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1df      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	493d      	ldr	r1, [pc, #244]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e040      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fc0e 	bl	8000e78 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fc0a 	bl	8000e78 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1bd      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4929      	ldr	r1, [pc, #164]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
 8001692:	e018      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fbea 	bl	8000e78 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fbe6 	bl	8000e78 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e199      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d038      	beq.n	8001744 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	4a15      	ldr	r2, [pc, #84]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbc7 	bl	8000e78 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fbc3 	bl	8000e78 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e176      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x23a>
 800170c:	e01a      	b.n	8001744 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_RCC_OscConfig+0x280>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fbad 	bl	8000e78 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fba9 	bl	8000e78 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d903      	bls.n	8001738 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e15c      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
 8001734:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b91      	ldr	r3, [pc, #580]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 800173a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a4 	beq.w	800189a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10d      	bne.n	800177a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001786:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7e      	ldr	r2, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff fb71 	bl	8000e78 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fb6d 	bl	8000e78 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b64      	cmp	r3, #100	; 0x64
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e120      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b75      	ldr	r3, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x31a>
 80017c0:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	e02d      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x33c>
 80017d6:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	4a69      	ldr	r2, [pc, #420]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70
 80017e2:	4b67      	ldr	r3, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e6:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	; 0x70
 80017ee:	e01c      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x35e>
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	4a60      	ldr	r2, [pc, #384]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6713      	str	r3, [r2, #112]	; 0x70
 8001804:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	4a5d      	ldr	r2, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	; 0x70
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a5a      	ldr	r2, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d015      	beq.n	800185e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fb21 	bl	8000e78 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fb1d 	bl	8000e78 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0ce      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ee      	beq.n	800183a <HAL_RCC_OscConfig+0x386>
 800185c:	e014      	b.n	8001888 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fb0b 	bl	8000e78 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fb07 	bl	8000e78 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	4b40      	ldr	r3, [pc, #256]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a3b      	ldr	r2, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80a4 	beq.w	80019ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d06b      	beq.n	8001988 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d149      	bne.n	800194c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a30      	ldr	r2, [pc, #192]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80018be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fad8 	bl	8000e78 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fad4 	bl	8000e78 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e087      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	4313      	orrs	r3, r2
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001916:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff faa8 	bl	8000e78 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff faa4 	bl	8000e78 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e057      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x478>
 800194a:	e04f      	b.n	80019ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fa8e 	bl	8000e78 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fa8a 	bl	8000e78 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e03d      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x4ac>
 800197e:	e035      	b.n	80019ec <HAL_RCC_OscConfig+0x538>
 8001980:	40023800 	.word	0x40023800
 8001984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x544>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d028      	beq.n	80019e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d121      	bne.n	80019e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11a      	bne.n	80019e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d111      	bne.n	80019e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	3b01      	subs	r3, #1
 80019d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0d0      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 020f 	bic.w	r2, r3, #15
 8001a2a:	4965      	ldr	r1, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e073      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06b      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af0:	f7ff f9c2 	bl	8000e78 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff f9be 	bl	8000e78 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e053      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 020c 	and.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d210      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1d0>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1d4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ff38 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08006720 	.word	0x08006720
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd8:	b090      	sub	sp, #64	; 0x40
 8001bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
 8001be0:	2300      	movs	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	f200 80a1 	bhi.w	8001d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c06:	e09b      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c0c:	e09b      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c12:	e098      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d028      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	627a      	str	r2, [r7, #36]	; 0x24
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c40:	fb03 f201 	mul.w	r2, r3, r1
 8001c44:	2300      	movs	r3, #0
 8001c46:	fb00 f303 	mul.w	r3, r0, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8001c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c54:	460a      	mov	r2, r1
 8001c56:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5a:	4413      	add	r3, r2
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	2200      	movs	r2, #0
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	61fa      	str	r2, [r7, #28]
 8001c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c6e:	f7fe fb1f 	bl	80002b0 <__aeabi_uldivmod>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4613      	mov	r3, r2
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c7a:	e053      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	2200      	movs	r2, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	617a      	str	r2, [r7, #20]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c8e:	f04f 0b00 	mov.w	fp, #0
 8001c92:	4652      	mov	r2, sl
 8001c94:	465b      	mov	r3, fp
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	0159      	lsls	r1, r3, #5
 8001ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca4:	0150      	lsls	r0, r2, #5
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	ebb2 080a 	subs.w	r8, r2, sl
 8001cae:	eb63 090b 	sbc.w	r9, r3, fp
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8001cca:	eb63 0509 	sbc.w	r5, r3, r9
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	00eb      	lsls	r3, r5, #3
 8001cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cdc:	00e2      	lsls	r2, r4, #3
 8001cde:	4614      	mov	r4, r2
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	eb14 030a 	adds.w	r3, r4, sl
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	eb45 030b 	adc.w	r3, r5, fp
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	028b      	lsls	r3, r1, #10
 8001cfe:	4621      	mov	r1, r4
 8001d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d04:	4621      	mov	r1, r4
 8001d06:	028a      	lsls	r2, r1, #10
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	60fa      	str	r2, [r7, #12]
 8001d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d18:	f7fe faca 	bl	80002b0 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d3e:	e002      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3740      	adds	r7, #64	; 0x40
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	017d7840 	.word	0x017d7840

08001d60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08006730 	.word	0x08006730

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffdc 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08006730 	.word	0x08006730

08001dc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_RCC_GetClockConfig+0x60>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 020f 	and.w	r2, r3, #15
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d012      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e54:	4b69      	ldr	r3, [pc, #420]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a68      	ldr	r2, [pc, #416]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e5e:	6093      	str	r3, [r2, #8]
 8001e60:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	4964      	ldr	r1, [pc, #400]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d017      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	4959      	ldr	r1, [pc, #356]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d017      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ec2:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	494a      	ldr	r1, [pc, #296]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 808b 	beq.w	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a39      	ldr	r2, [pc, #228]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1c:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a34      	ldr	r2, [pc, #208]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f34:	f7fe ffa0 	bl	8000e78 <HAL_GetTick>
 8001f38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3c:	f7fe ff9c 	bl	8000e78 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e357      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d035      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d02e      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d114      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff64 	bl	8000e78 <HAL_GetTick>
 8001fb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ff60 	bl	8000e78 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e319      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0ee      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fe2:	d111      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	4901      	ldr	r1, [pc, #4]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000
 8002004:	0ffffcff 	.word	0x0ffffcff
 8002008:	4baa      	ldr	r3, [pc, #680]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4aa9      	ldr	r2, [pc, #676]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002012:	6093      	str	r3, [r2, #8]
 8002014:	4ba7      	ldr	r3, [pc, #668]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	49a4      	ldr	r1, [pc, #656]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002022:	4313      	orrs	r3, r2
 8002024:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d010      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002032:	4ba0      	ldr	r3, [pc, #640]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002038:	4a9e      	ldr	r2, [pc, #632]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800203e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002042:	4b9c      	ldr	r3, [pc, #624]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002044:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	4999      	ldr	r1, [pc, #612]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002060:	4b94      	ldr	r3, [pc, #592]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800206e:	4991      	ldr	r1, [pc, #580]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002082:	4b8c      	ldr	r3, [pc, #560]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002090:	4988      	ldr	r1, [pc, #544]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020a4:	4b83      	ldr	r3, [pc, #524]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b2:	4980      	ldr	r1, [pc, #512]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020c6:	4b7b      	ldr	r3, [pc, #492]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4977      	ldr	r1, [pc, #476]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e8:	4b72      	ldr	r3, [pc, #456]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	496f      	ldr	r1, [pc, #444]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210a:	4b6a      	ldr	r3, [pc, #424]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f023 020c 	bic.w	r2, r3, #12
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	4966      	ldr	r1, [pc, #408]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	495e      	ldr	r1, [pc, #376]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800214e:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215c:	4955      	ldr	r1, [pc, #340]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	494d      	ldr	r1, [pc, #308]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002192:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	4944      	ldr	r1, [pc, #272]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021b4:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	493c      	ldr	r1, [pc, #240]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	4933      	ldr	r1, [pc, #204]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021f8:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002206:	492b      	ldr	r1, [pc, #172]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d011      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002228:	4922      	ldr	r1, [pc, #136]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002238:	d101      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800224a:	2301      	movs	r3, #1
 800224c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002268:	4912      	ldr	r1, [pc, #72]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d006      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80d9 	beq.w	800245a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022a8:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a01      	ldr	r2, [pc, #4]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022b2:	e001      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80022b4:	40023800 	.word	0x40023800
 80022b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ba:	f7fe fddd 	bl	8000e78 <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022c2:	f7fe fdd9 	bl	8000e78 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	; 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e194      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022d4:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d021      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11d      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022f4:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002302:	4b61      	ldr	r3, [pc, #388]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002308:	0e1b      	lsrs	r3, r3, #24
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	019a      	lsls	r2, r3, #6
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	061b      	lsls	r3, r3, #24
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	071b      	lsls	r3, r3, #28
 8002328:	4957      	ldr	r1, [pc, #348]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800234e:	2b00      	cmp	r3, #0
 8002350:	d02e      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235a:	d129      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800235c:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800235e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800236c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002370:	0f1b      	lsrs	r3, r3, #28
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	019a      	lsls	r2, r3, #6
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	071b      	lsls	r3, r3, #28
 8002390:	493d      	ldr	r1, [pc, #244]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800239e:	f023 021f 	bic.w	r2, r3, #31
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	4937      	ldr	r1, [pc, #220]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01d      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023bc:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c2:	0e1b      	lsrs	r3, r3, #24
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ca:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d0:	0f1b      	lsrs	r3, r3, #28
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	019a      	lsls	r2, r3, #6
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	071b      	lsls	r3, r3, #28
 80023f0:	4925      	ldr	r1, [pc, #148]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d011      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	019a      	lsls	r2, r3, #6
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	071b      	lsls	r3, r3, #28
 8002420:	4919      	ldr	r1, [pc, #100]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800242e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe fd20 	bl	8000e78 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800243c:	f7fe fd1c 	bl	8000e78 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0d7      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b01      	cmp	r3, #1
 800245e:	f040 80cd 	bne.w	80025fc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246e:	f7fe fd03 	bl	8000e78 <HAL_GetTick>
 8002472:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002476:	f7fe fcff 	bl	8000e78 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b64      	cmp	r3, #100	; 0x64
 8002482:	d903      	bls.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0ba      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002488:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002498:	d0ed      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d02e      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d12a      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024d0:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	0f1b      	lsrs	r3, r3, #28
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	019a      	lsls	r2, r3, #6
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	071b      	lsls	r3, r3, #28
 80024f6:	4944      	ldr	r1, [pc, #272]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024fe:	4b42      	ldr	r3, [pc, #264]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002504:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	493d      	ldr	r1, [pc, #244]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d022      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252c:	d11d      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	0e1b      	lsrs	r3, r3, #24
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	0f1b      	lsrs	r3, r3, #28
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	019a      	lsls	r2, r3, #6
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	071b      	lsls	r3, r3, #28
 8002562:	4929      	ldr	r1, [pc, #164]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	0e1b      	lsrs	r3, r3, #24
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	019a      	lsls	r2, r3, #6
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	071b      	lsls	r3, r3, #28
 80025aa:	4917      	ldr	r1, [pc, #92]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	4911      	ldr	r1, [pc, #68]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fc50 	bl	8000e78 <HAL_GetTick>
 80025d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025dc:	f7fe fc4c 	bl	8000e78 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e007      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025fa:	d1ef      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e049      	b.n	80026b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f841 	bl	80026ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 fa00 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e054      	b.n	8002792 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d01d      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <HAL_TIM_Base_Start_IT+0xdc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d115      	bne.n	800277c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_TIM_Base_Start_IT+0xec>)
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b06      	cmp	r3, #6
 8002760:	d015      	beq.n	800278e <HAL_TIM_Base_Start_IT+0xbe>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d011      	beq.n	800278e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	e008      	b.n	800278e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e000      	b.n	8002790 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	40010400 	.word	0x40010400
 80027b4:	40014000 	.word	0x40014000
 80027b8:	40001800 	.word	0x40001800
 80027bc:	00010007 	.word	0x00010007

080027c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0202 	mvn.w	r2, #2
 80027ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f905 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8f7 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f908 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d122      	bne.n	8002870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d11b      	bne.n	8002870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0204 	mvn.w	r2, #4
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8db 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8cd 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8de 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b08      	cmp	r3, #8
 800287c:	d122      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d11b      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0208 	mvn.w	r2, #8
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8b1 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8a3 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8b4 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0210 	mvn.w	r2, #16
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2208      	movs	r2, #8
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f887 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f879 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f88a 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0201 	mvn.w	r2, #1
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe f830 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b80      	cmp	r3, #128	; 0x80
 8002950:	d10e      	bne.n	8002970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d107      	bne.n	8002970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f91a 	bl	8002ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297e:	d10e      	bne.n	800299e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d107      	bne.n	800299e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f90d 	bl	8002bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d10e      	bne.n	80029ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d107      	bne.n	80029ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f838 	bl	8002a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d10e      	bne.n	80029f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d107      	bne.n	80029f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0220 	mvn.w	r2, #32
 80029ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8cd 	bl	8002b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d00f      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3d      	ldr	r2, [pc, #244]	; (8002b68 <TIM_Base_SetConfig+0x118>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <TIM_Base_SetConfig+0x11c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <TIM_Base_SetConfig+0x120>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d108      	bne.n	8002aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d02b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d027      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <TIM_Base_SetConfig+0x118>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d023      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2b      	ldr	r2, [pc, #172]	; (8002b6c <TIM_Base_SetConfig+0x11c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01f      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <TIM_Base_SetConfig+0x120>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d017      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <TIM_Base_SetConfig+0x128>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <TIM_Base_SetConfig+0x12c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00f      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <TIM_Base_SetConfig+0x130>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <TIM_Base_SetConfig+0x134>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <TIM_Base_SetConfig+0x138>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d003      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <TIM_Base_SetConfig+0x13c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_Base_SetConfig+0xf8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	615a      	str	r2, [r3, #20]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40014400 	.word	0x40014400
 8002b80:	40014800 	.word	0x40014800
 8002b84:	40001800 	.word	0x40001800
 8002b88:	40001c00 	.word	0x40001c00
 8002b8c:	40002000 	.word	0x40002000

08002b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e040      	b.n	8002c60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe f876 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8c0 	bl	8002d90 <UART_SetConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e022      	b.n	8002c60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fb18 	bl	8003258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fb9f 	bl	800339c <UART_CheckIdleState>
 8002c5e:	4603      	mov	r3, r0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	f040 8081 	bne.w	8002d84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_UART_Transmit+0x26>
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e079      	b.n	8002d86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x38>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e072      	b.n	8002d86 <HAL_UART_Transmit+0x11e>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2221      	movs	r2, #33	; 0x21
 8002cb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe f8df 	bl	8000e78 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	88fa      	ldrh	r2, [r7, #6]
 8002cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Transmit+0x80>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002cf8:	e02c      	b.n	8002d54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fb7c 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e038      	b.n	8002d86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e007      	b.n	8002d42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1cc      	bne.n	8002cfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb49 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e005      	b.n	8002d86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4ba6      	ldr	r3, [pc, #664]	; (8003054 <UART_SetConfig+0x2c4>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a94      	ldr	r2, [pc, #592]	; (8003058 <UART_SetConfig+0x2c8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d120      	bne.n	8002e4e <UART_SetConfig+0xbe>
 8002e0c:	4b93      	ldr	r3, [pc, #588]	; (800305c <UART_SetConfig+0x2cc>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d816      	bhi.n	8002e48 <UART_SetConfig+0xb8>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <UART_SetConfig+0x90>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e3d 	.word	0x08002e3d
 8002e28:	08002e37 	.word	0x08002e37
 8002e2c:	08002e43 	.word	0x08002e43
 8002e30:	2301      	movs	r3, #1
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e150      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e36:	2302      	movs	r3, #2
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e14d      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e14a      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e42:	2308      	movs	r3, #8
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e147      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e144      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a83      	ldr	r2, [pc, #524]	; (8003060 <UART_SetConfig+0x2d0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d132      	bne.n	8002ebe <UART_SetConfig+0x12e>
 8002e58:	4b80      	ldr	r3, [pc, #512]	; (800305c <UART_SetConfig+0x2cc>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d828      	bhi.n	8002eb8 <UART_SetConfig+0x128>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <UART_SetConfig+0xdc>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08002eb9 	.word	0x08002eb9
 8002e74:	08002eb9 	.word	0x08002eb9
 8002e78:	08002eb9 	.word	0x08002eb9
 8002e7c:	08002ead 	.word	0x08002ead
 8002e80:	08002eb9 	.word	0x08002eb9
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002eb9 	.word	0x08002eb9
 8002e8c:	08002ea7 	.word	0x08002ea7
 8002e90:	08002eb9 	.word	0x08002eb9
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08002eb9 	.word	0x08002eb9
 8002e9c:	08002eb3 	.word	0x08002eb3
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e118      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e115      	b.n	80030d8 <UART_SetConfig+0x348>
 8002eac:	2304      	movs	r3, #4
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e112      	b.n	80030d8 <UART_SetConfig+0x348>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e10f      	b.n	80030d8 <UART_SetConfig+0x348>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e10c      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a68      	ldr	r2, [pc, #416]	; (8003064 <UART_SetConfig+0x2d4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d120      	bne.n	8002f0a <UART_SetConfig+0x17a>
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <UART_SetConfig+0x2cc>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed2:	2b30      	cmp	r3, #48	; 0x30
 8002ed4:	d013      	beq.n	8002efe <UART_SetConfig+0x16e>
 8002ed6:	2b30      	cmp	r3, #48	; 0x30
 8002ed8:	d814      	bhi.n	8002f04 <UART_SetConfig+0x174>
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d009      	beq.n	8002ef2 <UART_SetConfig+0x162>
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d810      	bhi.n	8002f04 <UART_SetConfig+0x174>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <UART_SetConfig+0x15c>
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d006      	beq.n	8002ef8 <UART_SetConfig+0x168>
 8002eea:	e00b      	b.n	8002f04 <UART_SetConfig+0x174>
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e0f2      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e0ef      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e0ec      	b.n	80030d8 <UART_SetConfig+0x348>
 8002efe:	2308      	movs	r3, #8
 8002f00:	77fb      	strb	r3, [r7, #31]
 8002f02:	e0e9      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f04:	2310      	movs	r3, #16
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e0e6      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a56      	ldr	r2, [pc, #344]	; (8003068 <UART_SetConfig+0x2d8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d120      	bne.n	8002f56 <UART_SetConfig+0x1c6>
 8002f14:	4b51      	ldr	r3, [pc, #324]	; (800305c <UART_SetConfig+0x2cc>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f20:	d013      	beq.n	8002f4a <UART_SetConfig+0x1ba>
 8002f22:	2bc0      	cmp	r3, #192	; 0xc0
 8002f24:	d814      	bhi.n	8002f50 <UART_SetConfig+0x1c0>
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d009      	beq.n	8002f3e <UART_SetConfig+0x1ae>
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d810      	bhi.n	8002f50 <UART_SetConfig+0x1c0>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <UART_SetConfig+0x1a8>
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d006      	beq.n	8002f44 <UART_SetConfig+0x1b4>
 8002f36:	e00b      	b.n	8002f50 <UART_SetConfig+0x1c0>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e0cc      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e0c9      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f44:	2304      	movs	r3, #4
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e0c6      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e0c3      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f50:	2310      	movs	r3, #16
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e0c0      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a44      	ldr	r2, [pc, #272]	; (800306c <UART_SetConfig+0x2dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d125      	bne.n	8002fac <UART_SetConfig+0x21c>
 8002f60:	4b3e      	ldr	r3, [pc, #248]	; (800305c <UART_SetConfig+0x2cc>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f6e:	d017      	beq.n	8002fa0 <UART_SetConfig+0x210>
 8002f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f74:	d817      	bhi.n	8002fa6 <UART_SetConfig+0x216>
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7a:	d00b      	beq.n	8002f94 <UART_SetConfig+0x204>
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f80:	d811      	bhi.n	8002fa6 <UART_SetConfig+0x216>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <UART_SetConfig+0x1fe>
 8002f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8a:	d006      	beq.n	8002f9a <UART_SetConfig+0x20a>
 8002f8c:	e00b      	b.n	8002fa6 <UART_SetConfig+0x216>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e0a1      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f94:	2302      	movs	r3, #2
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e09e      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e09b      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e098      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e095      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <UART_SetConfig+0x2e0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d125      	bne.n	8003002 <UART_SetConfig+0x272>
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <UART_SetConfig+0x2cc>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fc4:	d017      	beq.n	8002ff6 <UART_SetConfig+0x266>
 8002fc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fca:	d817      	bhi.n	8002ffc <UART_SetConfig+0x26c>
 8002fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd0:	d00b      	beq.n	8002fea <UART_SetConfig+0x25a>
 8002fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd6:	d811      	bhi.n	8002ffc <UART_SetConfig+0x26c>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <UART_SetConfig+0x254>
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe0:	d006      	beq.n	8002ff0 <UART_SetConfig+0x260>
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x26c>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e076      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e073      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e070      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e06d      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e06a      	b.n	80030d8 <UART_SetConfig+0x348>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <UART_SetConfig+0x2e4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d138      	bne.n	800307e <UART_SetConfig+0x2ee>
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <UART_SetConfig+0x2cc>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800301a:	d017      	beq.n	800304c <UART_SetConfig+0x2bc>
 800301c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003020:	d82a      	bhi.n	8003078 <UART_SetConfig+0x2e8>
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003026:	d00b      	beq.n	8003040 <UART_SetConfig+0x2b0>
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d824      	bhi.n	8003078 <UART_SetConfig+0x2e8>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <UART_SetConfig+0x2aa>
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	d006      	beq.n	8003046 <UART_SetConfig+0x2b6>
 8003038:	e01e      	b.n	8003078 <UART_SetConfig+0x2e8>
 800303a:	2300      	movs	r3, #0
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e04b      	b.n	80030d8 <UART_SetConfig+0x348>
 8003040:	2302      	movs	r3, #2
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e048      	b.n	80030d8 <UART_SetConfig+0x348>
 8003046:	2304      	movs	r3, #4
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e045      	b.n	80030d8 <UART_SetConfig+0x348>
 800304c:	2308      	movs	r3, #8
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e042      	b.n	80030d8 <UART_SetConfig+0x348>
 8003052:	bf00      	nop
 8003054:	efff69f3 	.word	0xefff69f3
 8003058:	40011000 	.word	0x40011000
 800305c:	40023800 	.word	0x40023800
 8003060:	40004400 	.word	0x40004400
 8003064:	40004800 	.word	0x40004800
 8003068:	40004c00 	.word	0x40004c00
 800306c:	40005000 	.word	0x40005000
 8003070:	40011400 	.word	0x40011400
 8003074:	40007800 	.word	0x40007800
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e02c      	b.n	80030d8 <UART_SetConfig+0x348>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a72      	ldr	r2, [pc, #456]	; (800324c <UART_SetConfig+0x4bc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d125      	bne.n	80030d4 <UART_SetConfig+0x344>
 8003088:	4b71      	ldr	r3, [pc, #452]	; (8003250 <UART_SetConfig+0x4c0>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003092:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003096:	d017      	beq.n	80030c8 <UART_SetConfig+0x338>
 8003098:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800309c:	d817      	bhi.n	80030ce <UART_SetConfig+0x33e>
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d00b      	beq.n	80030bc <UART_SetConfig+0x32c>
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	d811      	bhi.n	80030ce <UART_SetConfig+0x33e>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <UART_SetConfig+0x326>
 80030ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b2:	d006      	beq.n	80030c2 <UART_SetConfig+0x332>
 80030b4:	e00b      	b.n	80030ce <UART_SetConfig+0x33e>
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e00d      	b.n	80030d8 <UART_SetConfig+0x348>
 80030bc:	2302      	movs	r3, #2
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e00a      	b.n	80030d8 <UART_SetConfig+0x348>
 80030c2:	2304      	movs	r3, #4
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e007      	b.n	80030d8 <UART_SetConfig+0x348>
 80030c8:	2308      	movs	r3, #8
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e004      	b.n	80030d8 <UART_SetConfig+0x348>
 80030ce:	2310      	movs	r3, #16
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e001      	b.n	80030d8 <UART_SetConfig+0x348>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e0:	d15b      	bne.n	800319a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d828      	bhi.n	800313a <UART_SetConfig+0x3aa>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x360>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003115 	.word	0x08003115
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	08003125 	.word	0x08003125
 80030fc:	0800313b 	.word	0x0800313b
 8003100:	0800312b 	.word	0x0800312b
 8003104:	0800313b 	.word	0x0800313b
 8003108:	0800313b 	.word	0x0800313b
 800310c:	0800313b 	.word	0x0800313b
 8003110:	08003133 	.word	0x08003133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7fe fe30 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8003118:	61b8      	str	r0, [r7, #24]
        break;
 800311a:	e013      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800311c:	f7fe fe40 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8003120:	61b8      	str	r0, [r7, #24]
        break;
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003124:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <UART_SetConfig+0x4c4>)
 8003126:	61bb      	str	r3, [r7, #24]
        break;
 8003128:	e00c      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7fe fd53 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 800312e:	61b8      	str	r0, [r7, #24]
        break;
 8003130:	e008      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003136:	61bb      	str	r3, [r7, #24]
        break;
 8003138:	e004      	b.n	8003144 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	77bb      	strb	r3, [r7, #30]
        break;
 8003142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d074      	beq.n	8003234 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	005a      	lsls	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	d916      	bls.n	8003194 <UART_SetConfig+0x404>
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d212      	bcs.n	8003194 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f023 030f 	bic.w	r3, r3, #15
 8003176:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	b29a      	uxth	r2, r3
 8003184:	89fb      	ldrh	r3, [r7, #14]
 8003186:	4313      	orrs	r3, r2
 8003188:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	89fa      	ldrh	r2, [r7, #14]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e04f      	b.n	8003234 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	77bb      	strb	r3, [r7, #30]
 8003198:	e04c      	b.n	8003234 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800319a:	7ffb      	ldrb	r3, [r7, #31]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d828      	bhi.n	80031f2 <UART_SetConfig+0x462>
 80031a0:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0x418>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031dd 	.word	0x080031dd
 80031b4:	080031f3 	.word	0x080031f3
 80031b8:	080031e3 	.word	0x080031e3
 80031bc:	080031f3 	.word	0x080031f3
 80031c0:	080031f3 	.word	0x080031f3
 80031c4:	080031f3 	.word	0x080031f3
 80031c8:	080031eb 	.word	0x080031eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031cc:	f7fe fdd4 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80031d0:	61b8      	str	r0, [r7, #24]
        break;
 80031d2:	e013      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7fe fde4 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80031d8:	61b8      	str	r0, [r7, #24]
        break;
 80031da:	e00f      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031dc:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <UART_SetConfig+0x4c4>)
 80031de:	61bb      	str	r3, [r7, #24]
        break;
 80031e0:	e00c      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e2:	f7fe fcf7 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 80031e6:	61b8      	str	r0, [r7, #24]
        break;
 80031e8:	e008      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ee:	61bb      	str	r3, [r7, #24]
        break;
 80031f0:	e004      	b.n	80031fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	77bb      	strb	r3, [r7, #30]
        break;
 80031fa:	bf00      	nop
    }

    if (pclk != 0U)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	085a      	lsrs	r2, r3, #1
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	441a      	add	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d909      	bls.n	8003230 <UART_SetConfig+0x4a0>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d205      	bcs.n	8003230 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	e001      	b.n	8003234 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003240:	7fbb      	ldrb	r3, [r7, #30]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40007c00 	.word	0x40007c00
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400

08003258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01a      	beq.n	800336e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003356:	d10a      	bne.n	800336e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033ac:	f7fd fd64 	bl	8000e78 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d10e      	bne.n	80033de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f817 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e00d      	b.n	80033fa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b09c      	sub	sp, #112	; 0x70
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003412:	e0a5      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	f000 80a1 	beq.w	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7fd fd2b 	bl	8000e78 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <UART_WaitOnFlagUntilTimeout+0x32>
 800342e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003430:	2b00      	cmp	r3, #0
 8003432:	d13e      	bne.n	80034b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003448:	667b      	str	r3, [r7, #100]	; 0x64
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003454:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e6      	bne.n	8003434 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3308      	adds	r3, #8
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	663b      	str	r3, [r7, #96]	; 0x60
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003486:	64ba      	str	r2, [r7, #72]	; 0x48
 8003488:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800348c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e5      	bne.n	8003466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e067      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d04f      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ce:	d147      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
 80034fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	613b      	str	r3, [r7, #16]
   return(result);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	66bb      	str	r3, [r7, #104]	; 0x68
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800352c:	623a      	str	r2, [r7, #32]
 800352e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	69f9      	ldr	r1, [r7, #28]
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	61bb      	str	r3, [r7, #24]
   return(result);
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e010      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	f43f af4a 	beq.w	8003414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3770      	adds	r7, #112	; 0x70
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359c:	2b84      	cmp	r3, #132	; 0x84
 800359e:	d005      	beq.n	80035ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	3303      	adds	r3, #3
 80035aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035be:	f000 feb1 	bl	8004324 <vTaskStartScheduler>
  
  return osOK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <osThreadCreate+0x54>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01c      	beq.n	800361c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685c      	ldr	r4, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681d      	ldr	r5, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691e      	ldr	r6, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ffc8 	bl	800358a <makeFreeRtosPriority>
 80035fa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003604:	9202      	str	r2, [sp, #8]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	9100      	str	r1, [sp, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4632      	mov	r2, r6
 800360e:	4629      	mov	r1, r5
 8003610:	4620      	mov	r0, r4
 8003612:	f000 fcb5 	bl	8003f80 <xTaskCreateStatic>
 8003616:	4603      	mov	r3, r0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e01c      	b.n	8003656 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685c      	ldr	r4, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003628:	b29e      	uxth	r6, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ffaa 	bl	800358a <makeFreeRtosPriority>
 8003636:	4602      	mov	r2, r0
 8003638:	f107 030c 	add.w	r3, r7, #12
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	9200      	str	r2, [sp, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4632      	mov	r2, r6
 8003644:	4629      	mov	r1, r5
 8003646:	4620      	mov	r0, r4
 8003648:	f000 fcfd 	bl	8004046 <xTaskCreate>
 800364c:	4603      	mov	r3, r0
 800364e:	2b01      	cmp	r3, #1
 8003650:	d001      	beq.n	8003656 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003660 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <osDelay+0x16>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	e000      	b.n	8003678 <osDelay+0x18>
 8003676:	2301      	movs	r3, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fe1d 	bl	80042b8 <vTaskDelay>
  
  return osOK;
 800367e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f103 0208 	add.w	r2, r3, #8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f103 0208 	add.w	r2, r3, #8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f103 0208 	add.w	r2, r3, #8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d103      	bne.n	800374a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e00c      	b.n	8003764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3308      	adds	r3, #8
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e002      	b.n	8003758 <vListInsert+0x2e>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d2f6      	bcs.n	8003752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6892      	ldr	r2, [r2, #8]
 80037b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6852      	ldr	r2, [r2, #4]
 80037bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d103      	bne.n	80037d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10c      	bne.n	800381e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	b672      	cpsid	i
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	b662      	cpsie	i
 8003818:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800381e:	f001 fbe5 	bl	8004fec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	441a      	add	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	3b01      	subs	r3, #1
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d114      	bne.n	800389e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01a      	beq.n	80038b2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f000 ffc3 	bl	800480c <xTaskRemoveFromEventList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <xQueueGenericReset+0xd0>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	e009      	b.n	80038b2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3310      	adds	r3, #16
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fef0 	bl	8003688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3324      	adds	r3, #36	; 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff feeb 	bl	8003688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038b2:	f001 fbcf 	bl	8005054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	e000ed04 	.word	0xe000ed04

080038c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10c      	bne.n	80038f2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	b672      	cpsid	i
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	b662      	cpsie	i
 80038ec:	613b      	str	r3, [r7, #16]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e004      	b.n	8003908 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3348      	adds	r3, #72	; 0x48
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fc55 	bl	80051bc <pvPortMalloc>
 8003912:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d011      	beq.n	800393e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3348      	adds	r3, #72	; 0x48
 8003922:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800392c:	79fa      	ldrb	r2, [r7, #7]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f805 	bl	8003948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800393e:	69bb      	ldr	r3, [r7, #24]
	}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e002      	b.n	800396a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003976:	2101      	movs	r1, #1
 8003978:	69b8      	ldr	r0, [r7, #24]
 800397a:	f7ff ff39 	bl	80037f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003996:	2300      	movs	r3, #0
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10c      	bne.n	80039be <xQueueGenericSend+0x36>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	b672      	cpsid	i
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	b662      	cpsie	i
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <xQueueGenericSend+0x44>
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <xQueueGenericSend+0x48>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <xQueueGenericSend+0x4a>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <xQueueGenericSend+0x68>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	b672      	cpsid	i
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	b662      	cpsie	i
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d103      	bne.n	80039fe <xQueueGenericSend+0x76>
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <xQueueGenericSend+0x7a>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <xQueueGenericSend+0x7c>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10c      	bne.n	8003a22 <xQueueGenericSend+0x9a>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	b672      	cpsid	i
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	b662      	cpsie	i
 8003a1c:	623b      	str	r3, [r7, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a22:	f001 f8c7 	bl	8004bb4 <xTaskGetSchedulerState>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <xQueueGenericSend+0xaa>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <xQueueGenericSend+0xae>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <xQueueGenericSend+0xb0>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10c      	bne.n	8003a56 <xQueueGenericSend+0xce>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	b672      	cpsid	i
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	b662      	cpsie	i
 8003a50:	61fb      	str	r3, [r7, #28]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a56:	f001 fac9 	bl	8004fec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <xQueueGenericSend+0xe4>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d129      	bne.n	8003ac0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a72:	f000 f975 	bl	8003d60 <prvCopyDataToQueue>
 8003a76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	3324      	adds	r3, #36	; 0x24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fec1 	bl	800480c <xTaskRemoveFromEventList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a90:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <xQueueGenericSend+0x208>)
 8003a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	e00a      	b.n	8003ab8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003aa8:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <xQueueGenericSend+0x208>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ab8:	f001 facc 	bl	8005054 <vPortExitCritical>
				return pdPASS;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e063      	b.n	8003b88 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d103      	bne.n	8003ace <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ac6:	f001 fac5 	bl	8005054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e05c      	b.n	8003b88 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fefb 	bl	80048d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ae2:	f001 fab7 	bl	8005054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ae6:	f000 fc81 	bl	80043ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aea:	f001 fa7f 	bl	8004fec <vPortEnterCritical>
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af4:	b25b      	sxtb	r3, r3
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d103      	bne.n	8003b04 <xQueueGenericSend+0x17c>
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d103      	bne.n	8003b1a <xQueueGenericSend+0x192>
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b1a:	f001 fa9b 	bl	8005054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b1e:	1d3a      	adds	r2, r7, #4
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 feea 	bl	8004900 <xTaskCheckForTimeOut>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d124      	bne.n	8003b7c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b34:	f000 fa0c 	bl	8003f50 <prvIsQueueFull>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d018      	beq.n	8003b70 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	3310      	adds	r3, #16
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fe3a 	bl	80047c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4e:	f000 f997 	bl	8003e80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b52:	f000 fc59 	bl	8004408 <xTaskResumeAll>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f47f af7c 	bne.w	8003a56 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <xQueueGenericSend+0x208>)
 8003b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	e772      	b.n	8003a56 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b72:	f000 f985 	bl	8003e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b76:	f000 fc47 	bl	8004408 <xTaskResumeAll>
 8003b7a:	e76c      	b.n	8003a56 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7e:	f000 f97f 	bl	8003e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b82:	f000 fc41 	bl	8004408 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3738      	adds	r7, #56	; 0x38
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10c      	bne.n	8003bc8 <xQueueReceive+0x34>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	b672      	cpsid	i
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	b662      	cpsie	i
 8003bc2:	623b      	str	r3, [r7, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <xQueueReceive+0x42>
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <xQueueReceive+0x46>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueReceive+0x48>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10c      	bne.n	8003bfa <xQueueReceive+0x66>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	b672      	cpsid	i
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	b662      	cpsie	i
 8003bf4:	61fb      	str	r3, [r7, #28]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bfa:	f000 ffdb 	bl	8004bb4 <xTaskGetSchedulerState>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <xQueueReceive+0x76>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <xQueueReceive+0x7a>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <xQueueReceive+0x7c>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10c      	bne.n	8003c2e <xQueueReceive+0x9a>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	b672      	cpsid	i
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	b662      	cpsie	i
 8003c28:	61bb      	str	r3, [r7, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2e:	f001 f9dd 	bl	8004fec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01f      	beq.n	8003c7e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c42:	f000 f8f7 	bl	8003e34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	3310      	adds	r3, #16
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fdd6 	bl	800480c <xTaskRemoveFromEventList>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <xQueueReceive+0x1c8>)
 8003c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c76:	f001 f9ed 	bl	8005054 <vPortExitCritical>
				return pdPASS;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e069      	b.n	8003d52 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c84:	f001 f9e6 	bl	8005054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e062      	b.n	8003d52 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c92:	f107 0310 	add.w	r3, r7, #16
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fe1c 	bl	80048d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ca0:	f001 f9d8 	bl	8005054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ca4:	f000 fba2 	bl	80043ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ca8:	f001 f9a0 	bl	8004fec <vPortEnterCritical>
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d103      	bne.n	8003cc2 <xQueueReceive+0x12e>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d103      	bne.n	8003cd8 <xQueueReceive+0x144>
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd8:	f001 f9bc 	bl	8005054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cdc:	1d3a      	adds	r2, r7, #4
 8003cde:	f107 0310 	add.w	r3, r7, #16
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fe0b 	bl	8004900 <xTaskCheckForTimeOut>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d123      	bne.n	8003d38 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf2:	f000 f917 	bl	8003f24 <prvIsQueueEmpty>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d017      	beq.n	8003d2c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fd5b 	bl	80047c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0c:	f000 f8b8 	bl	8003e80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d10:	f000 fb7a 	bl	8004408 <xTaskResumeAll>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d189      	bne.n	8003c2e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <xQueueReceive+0x1c8>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	e780      	b.n	8003c2e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2e:	f000 f8a7 	bl	8003e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d32:	f000 fb69 	bl	8004408 <xTaskResumeAll>
 8003d36:	e77a      	b.n	8003c2e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f8a1 	bl	8003e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d3e:	f000 fb63 	bl	8004408 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d44:	f000 f8ee 	bl	8003f24 <prvIsQueueEmpty>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f43f af6f 	beq.w	8003c2e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3730      	adds	r7, #48	; 0x30
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d14d      	bne.n	8003e22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ff30 	bl	8004bf0 <xTaskPriorityDisinherit>
 8003d90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	e043      	b.n	8003e22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d119      	bne.n	8003dd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6858      	ldr	r0, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	461a      	mov	r2, r3
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	f001 fc14 	bl	80055d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d32b      	bcc.n	8003e22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	e026      	b.n	8003e22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68d8      	ldr	r0, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	f001 fbfa 	bl	80055d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	425b      	negs	r3, r3
 8003dee:	441a      	add	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	425b      	negs	r3, r3
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d105      	bne.n	8003e22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e2a:	697b      	ldr	r3, [r7, #20]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d303      	bcc.n	8003e68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	461a      	mov	r2, r3
 8003e72:	6838      	ldr	r0, [r7, #0]
 8003e74:	f001 fbb0 	bl	80055d8 <memcpy>
	}
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e88:	f001 f8b0 	bl	8004fec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e94:	e011      	b.n	8003eba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3324      	adds	r3, #36	; 0x24
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fcb2 	bl	800480c <xTaskRemoveFromEventList>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eae:	f000 fd8d 	bl	80049cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dce9      	bgt.n	8003e96 <prvUnlockQueue+0x16>
 8003ec2:	e000      	b.n	8003ec6 <prvUnlockQueue+0x46>
					break;
 8003ec4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	22ff      	movs	r2, #255	; 0xff
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ece:	f001 f8c1 	bl	8005054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ed2:	f001 f88b 	bl	8004fec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003edc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ede:	e011      	b.n	8003f04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3310      	adds	r3, #16
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fc8d 	bl	800480c <xTaskRemoveFromEventList>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ef8:	f000 fd68 	bl	80049cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003efc:	7bbb      	ldrb	r3, [r7, #14]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dce9      	bgt.n	8003ee0 <prvUnlockQueue+0x60>
 8003f0c:	e000      	b.n	8003f10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	22ff      	movs	r2, #255	; 0xff
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f18:	f001 f89c 	bl	8005054 <vPortExitCritical>
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f2c:	f001 f85e 	bl	8004fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e001      	b.n	8003f42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f42:	f001 f887 	bl	8005054 <vPortExitCritical>

	return xReturn;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f58:	f001 f848 	bl	8004fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d102      	bne.n	8003f6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e001      	b.n	8003f72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f72:	f001 f86f 	bl	8005054 <vPortExitCritical>

	return xReturn;
 8003f76:	68fb      	ldr	r3, [r7, #12]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08e      	sub	sp, #56	; 0x38
 8003f84:	af04      	add	r7, sp, #16
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10c      	bne.n	8003fae <xTaskCreateStatic+0x2e>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	b672      	cpsid	i
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	b662      	cpsie	i
 8003fa8:	623b      	str	r3, [r7, #32]
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10c      	bne.n	8003fce <xTaskCreateStatic+0x4e>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	b672      	cpsid	i
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	b662      	cpsie	i
 8003fc8:	61fb      	str	r3, [r7, #28]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fce:	2354      	movs	r3, #84	; 0x54
 8003fd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b54      	cmp	r3, #84	; 0x54
 8003fd6:	d00c      	beq.n	8003ff2 <xTaskCreateStatic+0x72>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	b672      	cpsid	i
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	b662      	cpsie	i
 8003fec:	61bb      	str	r3, [r7, #24]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ff2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01e      	beq.n	8004038 <xTaskCreateStatic+0xb8>
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004008:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	2202      	movs	r2, #2
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004012:	2300      	movs	r3, #0
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f850 	bl	80040d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004032:	f000 f8d7 	bl	80041e4 <prvAddNewTaskToReadyList>
 8004036:	e001      	b.n	800403c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800403c:	697b      	ldr	r3, [r7, #20]
	}
 800403e:	4618      	mov	r0, r3
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004046:	b580      	push	{r7, lr}
 8004048:	b08c      	sub	sp, #48	; 0x30
 800404a:	af04      	add	r7, sp, #16
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f001 f8ae 	bl	80051bc <pvPortMalloc>
 8004060:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00e      	beq.n	8004086 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004068:	2054      	movs	r0, #84	; 0x54
 800406a:	f001 f8a7 	bl	80051bc <pvPortMalloc>
 800406e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
 800407c:	e005      	b.n	800408a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f001 f966 	bl	8005350 <vPortFree>
 8004084:	e001      	b.n	800408a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d017      	beq.n	80040c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	2300      	movs	r3, #0
 800409c:	9303      	str	r3, [sp, #12]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f80e 	bl	80040d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b4:	69f8      	ldr	r0, [r7, #28]
 80040b6:	f000 f895 	bl	80041e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040ba:	2301      	movs	r3, #1
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	e002      	b.n	80040c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040c0:	f04f 33ff 	mov.w	r3, #4294967295
 80040c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040c6:	69bb      	ldr	r3, [r7, #24]
	}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80040e8:	440b      	add	r3, r1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f023 0307 	bic.w	r3, r3, #7
 80040f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	b672      	cpsid	i
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	b662      	cpsie	i
 8004116:	617b      	str	r3, [r7, #20]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01f      	beq.n	8004162 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e012      	b.n	800414e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	7819      	ldrb	r1, [r3, #0]
 8004130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	3334      	adds	r3, #52	; 0x34
 8004138:	460a      	mov	r2, r1
 800413a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	3301      	adds	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2b0f      	cmp	r3, #15
 8004152:	d9e9      	bls.n	8004128 <prvInitialiseNewTask+0x58>
 8004154:	e000      	b.n	8004158 <prvInitialiseNewTask+0x88>
			{
				break;
 8004156:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004160:	e003      	b.n	800416a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	2b06      	cmp	r3, #6
 800416e:	d901      	bls.n	8004174 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004170:	2306      	movs	r3, #6
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	2200      	movs	r2, #0
 8004184:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	3304      	adds	r3, #4
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fa9c 	bl	80036c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	3318      	adds	r3, #24
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fa97 	bl	80036c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	f1c3 0207 	rsb	r2, r3, #7
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	69b8      	ldr	r0, [r7, #24]
 80041c4:	f000 fe04 	bl	8004dd0 <pxPortInitialiseStack>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041da:	bf00      	nop
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041ec:	f000 fefe 	bl	8004fec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	4a29      	ldr	r2, [pc, #164]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 80041f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041fa:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004202:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d110      	bne.n	8004232 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004210:	f000 fc00 	bl	8004a14 <prvInitialiseTaskLists>
 8004214:	e00d      	b.n	8004232 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <prvAddNewTaskToReadyList+0xc0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	429a      	cmp	r2, r3
 800422a:	d802      	bhi.n	8004232 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004232:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <prvAddNewTaskToReadyList+0xc4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <prvAddNewTaskToReadyList+0xc4>)
 800423a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2201      	movs	r2, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <prvAddNewTaskToReadyList+0xc8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <prvAddNewTaskToReadyList+0xc8>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <prvAddNewTaskToReadyList+0xcc>)
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f7ff fa3c 	bl	80036e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800426a:	f000 fef3 	bl	8005054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <prvAddNewTaskToReadyList+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d207      	bcs.n	8004294 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <prvAddNewTaskToReadyList+0xd0>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	200004d0 	.word	0x200004d0
 80042a0:	200003d0 	.word	0x200003d0
 80042a4:	200004dc 	.word	0x200004dc
 80042a8:	200004ec 	.word	0x200004ec
 80042ac:	200004d8 	.word	0x200004d8
 80042b0:	200003d4 	.word	0x200003d4
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d019      	beq.n	80042fe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <vTaskDelay+0x64>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00c      	beq.n	80042ec <vTaskDelay+0x34>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	b672      	cpsid	i
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	b662      	cpsie	i
 80042e6:	60bb      	str	r3, [r7, #8]
}
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <vTaskDelay+0x32>
			vTaskSuspendAll();
 80042ec:	f000 f87e 	bl	80043ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042f0:	2100      	movs	r1, #0
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fd06 	bl	8004d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042f8:	f000 f886 	bl	8004408 <xTaskResumeAll>
 80042fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <vTaskDelay+0x68>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200004f8 	.word	0x200004f8
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004332:	463a      	mov	r2, r7
 8004334:	1d39      	adds	r1, r7, #4
 8004336:	f107 0308 	add.w	r3, r7, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f93a 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	9202      	str	r2, [sp, #8]
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	2300      	movs	r3, #0
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	2300      	movs	r3, #0
 8004350:	460a      	mov	r2, r1
 8004352:	4920      	ldr	r1, [pc, #128]	; (80043d4 <vTaskStartScheduler+0xb0>)
 8004354:	4820      	ldr	r0, [pc, #128]	; (80043d8 <vTaskStartScheduler+0xb4>)
 8004356:	f7ff fe13 	bl	8003f80 <xTaskCreateStatic>
 800435a:	4603      	mov	r3, r0
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <vTaskStartScheduler+0xb8>)
 800435e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004360:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <vTaskStartScheduler+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004368:	2301      	movs	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e001      	b.n	8004372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d118      	bne.n	80043aa <vTaskStartScheduler+0x86>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	b672      	cpsid	i
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	b662      	cpsie	i
 800438c:	613b      	str	r3, [r7, #16]
}
 800438e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <vTaskStartScheduler+0xbc>)
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004398:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <vTaskStartScheduler+0xc0>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <vTaskStartScheduler+0xc4>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043a4:	f000 fda4 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043a8:	e010      	b.n	80043cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d10c      	bne.n	80043cc <vTaskStartScheduler+0xa8>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	b672      	cpsid	i
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	b662      	cpsie	i
 80043c6:	60fb      	str	r3, [r7, #12]
}
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <vTaskStartScheduler+0xa6>
}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	08006718 	.word	0x08006718
 80043d8:	080049e5 	.word	0x080049e5
 80043dc:	200004f4 	.word	0x200004f4
 80043e0:	200004f0 	.word	0x200004f0
 80043e4:	200004dc 	.word	0x200004dc
 80043e8:	200004d4 	.word	0x200004d4

080043ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <vTaskSuspendAll+0x18>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	4a03      	ldr	r2, [pc, #12]	; (8004404 <vTaskSuspendAll+0x18>)
 80043f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80043fa:	bf00      	nop
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	200004f8 	.word	0x200004f8

08004408 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004416:	4b42      	ldr	r3, [pc, #264]	; (8004520 <xTaskResumeAll+0x118>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <xTaskResumeAll+0x30>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	b672      	cpsid	i
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	b662      	cpsie	i
 8004432:	603b      	str	r3, [r7, #0]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004438:	f000 fdd8 	bl	8004fec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800443c:	4b38      	ldr	r3, [pc, #224]	; (8004520 <xTaskResumeAll+0x118>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	4a37      	ldr	r2, [pc, #220]	; (8004520 <xTaskResumeAll+0x118>)
 8004444:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004446:	4b36      	ldr	r3, [pc, #216]	; (8004520 <xTaskResumeAll+0x118>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d161      	bne.n	8004512 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800444e:	4b35      	ldr	r3, [pc, #212]	; (8004524 <xTaskResumeAll+0x11c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d05d      	beq.n	8004512 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004456:	e02e      	b.n	80044b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004458:	4b33      	ldr	r3, [pc, #204]	; (8004528 <xTaskResumeAll+0x120>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3318      	adds	r3, #24
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff f999 	bl	800379c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff f994 	bl	800379c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	2201      	movs	r2, #1
 800447a:	409a      	lsls	r2, r3
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <xTaskResumeAll+0x124>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	4a2a      	ldr	r2, [pc, #168]	; (800452c <xTaskResumeAll+0x124>)
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a27      	ldr	r2, [pc, #156]	; (8004530 <xTaskResumeAll+0x128>)
 8004494:	441a      	add	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3304      	adds	r3, #4
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7ff f920 	bl	80036e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	4b23      	ldr	r3, [pc, #140]	; (8004534 <xTaskResumeAll+0x12c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80044b0:	4b21      	ldr	r3, [pc, #132]	; (8004538 <xTaskResumeAll+0x130>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <xTaskResumeAll+0x120>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1cc      	bne.n	8004458 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044c4:	f000 fb46 	bl	8004b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044c8:	4b1c      	ldr	r3, [pc, #112]	; (800453c <xTaskResumeAll+0x134>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044d4:	f000 f85c 	bl	8004590 <xTaskIncrementTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044de:	4b16      	ldr	r3, [pc, #88]	; (8004538 <xTaskResumeAll+0x130>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f1      	bne.n	80044d4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <xTaskResumeAll+0x134>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <xTaskResumeAll+0x130>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044fe:	2301      	movs	r3, #1
 8004500:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <xTaskResumeAll+0x138>)
 8004504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004512:	f000 fd9f 	bl	8005054 <vPortExitCritical>

	return xAlreadyYielded;
 8004516:	68bb      	ldr	r3, [r7, #8]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200004f8 	.word	0x200004f8
 8004524:	200004d0 	.word	0x200004d0
 8004528:	20000490 	.word	0x20000490
 800452c:	200004d8 	.word	0x200004d8
 8004530:	200003d4 	.word	0x200003d4
 8004534:	200003d0 	.word	0x200003d0
 8004538:	200004e4 	.word	0x200004e4
 800453c:	200004e0 	.word	0x200004e0
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <pcTaskGetName+0x14>
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <pcTaskGetName+0x48>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	e000      	b.n	800455a <pcTaskGetName+0x16>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <pcTaskGetName+0x38>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	b672      	cpsid	i
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	b662      	cpsie	i
 8004576:	60bb      	str	r3, [r7, #8]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <pcTaskGetName+0x36>
	return &( pxTCB->pcTaskName[ 0 ] );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3334      	adds	r3, #52	; 0x34
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	200003d0 	.word	0x200003d0

08004590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800459a:	4b4f      	ldr	r3, [pc, #316]	; (80046d8 <xTaskIncrementTick+0x148>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 808a 	bne.w	80046b8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045a4:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <xTaskIncrementTick+0x14c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045ac:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <xTaskIncrementTick+0x14c>)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d122      	bne.n	80045fe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80045b8:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <xTaskIncrementTick+0x150>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <xTaskIncrementTick+0x4c>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	b672      	cpsid	i
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	b662      	cpsie	i
 80045d6:	603b      	str	r3, [r7, #0]
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <xTaskIncrementTick+0x4a>
 80045dc:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <xTaskIncrementTick+0x150>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	4b40      	ldr	r3, [pc, #256]	; (80046e4 <xTaskIncrementTick+0x154>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3e      	ldr	r2, [pc, #248]	; (80046e0 <xTaskIncrementTick+0x150>)
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4a3e      	ldr	r2, [pc, #248]	; (80046e4 <xTaskIncrementTick+0x154>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <xTaskIncrementTick+0x158>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	4a3c      	ldr	r2, [pc, #240]	; (80046e8 <xTaskIncrementTick+0x158>)
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	f000 faab 	bl	8004b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045fe:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <xTaskIncrementTick+0x15c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d348      	bcc.n	800469a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <xTaskIncrementTick+0x150>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004612:	4b36      	ldr	r3, [pc, #216]	; (80046ec <xTaskIncrementTick+0x15c>)
 8004614:	f04f 32ff 	mov.w	r2, #4294967295
 8004618:	601a      	str	r2, [r3, #0]
					break;
 800461a:	e03e      	b.n	800469a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <xTaskIncrementTick+0x150>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d203      	bcs.n	800463c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004634:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <xTaskIncrementTick+0x15c>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800463a:	e02e      	b.n	800469a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	3304      	adds	r3, #4
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff f8ab 	bl	800379c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	3318      	adds	r3, #24
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f8a2 	bl	800379c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <xTaskIncrementTick+0x160>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <xTaskIncrementTick+0x160>)
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <xTaskIncrementTick+0x164>)
 8004678:	441a      	add	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7ff f82e 	bl	80036e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <xTaskIncrementTick+0x168>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	429a      	cmp	r2, r3
 8004692:	d3b9      	bcc.n	8004608 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004698:	e7b6      	b.n	8004608 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <xTaskIncrementTick+0x168>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a0:	4914      	ldr	r1, [pc, #80]	; (80046f4 <xTaskIncrementTick+0x164>)
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d907      	bls.n	80046c2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80046b2:	2301      	movs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e004      	b.n	80046c2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <xTaskIncrementTick+0x16c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <xTaskIncrementTick+0x16c>)
 80046c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <xTaskIncrementTick+0x170>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046ce:	697b      	ldr	r3, [r7, #20]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200004f8 	.word	0x200004f8
 80046dc:	200004d4 	.word	0x200004d4
 80046e0:	20000488 	.word	0x20000488
 80046e4:	2000048c 	.word	0x2000048c
 80046e8:	200004e8 	.word	0x200004e8
 80046ec:	200004f0 	.word	0x200004f0
 80046f0:	200004d8 	.word	0x200004d8
 80046f4:	200003d4 	.word	0x200003d4
 80046f8:	200003d0 	.word	0x200003d0
 80046fc:	200004e0 	.word	0x200004e0
 8004700:	200004e4 	.word	0x200004e4

08004704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800470a:	4b28      	ldr	r3, [pc, #160]	; (80047ac <vTaskSwitchContext+0xa8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004712:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <vTaskSwitchContext+0xac>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004718:	e041      	b.n	800479e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800471a:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <vTaskSwitchContext+0xac>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <vTaskSwitchContext+0xb0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800472e:	7afb      	ldrb	r3, [r7, #11]
 8004730:	f1c3 031f 	rsb	r3, r3, #31
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	4920      	ldr	r1, [pc, #128]	; (80047b8 <vTaskSwitchContext+0xb4>)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <vTaskSwitchContext+0x60>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	b672      	cpsid	i
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	b662      	cpsie	i
 800475e:	607b      	str	r3, [r7, #4]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <vTaskSwitchContext+0x5e>
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <vTaskSwitchContext+0xb4>)
 8004770:	4413      	add	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3308      	adds	r3, #8
 8004786:	429a      	cmp	r2, r3
 8004788:	d104      	bne.n	8004794 <vTaskSwitchContext+0x90>
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a08      	ldr	r2, [pc, #32]	; (80047bc <vTaskSwitchContext+0xb8>)
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	200004f8 	.word	0x200004f8
 80047b0:	200004e4 	.word	0x200004e4
 80047b4:	200004d8 	.word	0x200004d8
 80047b8:	200003d4 	.word	0x200003d4
 80047bc:	200003d0 	.word	0x200003d0

080047c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10c      	bne.n	80047ea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	b672      	cpsid	i
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	b662      	cpsie	i
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <vTaskPlaceOnEventList+0x48>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3318      	adds	r3, #24
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe ff99 	bl	800372a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047f8:	2101      	movs	r1, #1
 80047fa:	6838      	ldr	r0, [r7, #0]
 80047fc:	f000 fa82 	bl	8004d04 <prvAddCurrentTaskToDelayedList>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	200003d0 	.word	0x200003d0

0800480c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10c      	bne.n	800483c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	b672      	cpsid	i
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	b662      	cpsie	i
 8004836:	60fb      	str	r3, [r7, #12]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3318      	adds	r3, #24
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe ffab 	bl	800379c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <xTaskRemoveFromEventList+0xb0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d11c      	bne.n	8004888 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3304      	adds	r3, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe ffa2 	bl	800379c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <xTaskRemoveFromEventList+0xb4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <xTaskRemoveFromEventList+0xb4>)
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <xTaskRemoveFromEventList+0xb8>)
 8004878:	441a      	add	r2, r3
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7fe ff2e 	bl	80036e2 <vListInsertEnd>
 8004886:	e005      	b.n	8004894 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3318      	adds	r3, #24
 800488c:	4619      	mov	r1, r3
 800488e:	480e      	ldr	r0, [pc, #56]	; (80048c8 <xTaskRemoveFromEventList+0xbc>)
 8004890:	f7fe ff27 	bl	80036e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <xTaskRemoveFromEventList+0xc0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d905      	bls.n	80048ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048a2:	2301      	movs	r3, #1
 80048a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <xTaskRemoveFromEventList+0xc4>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e001      	b.n	80048b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048b2:	697b      	ldr	r3, [r7, #20]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	200004f8 	.word	0x200004f8
 80048c0:	200004d8 	.word	0x200004d8
 80048c4:	200003d4 	.word	0x200003d4
 80048c8:	20000490 	.word	0x20000490
 80048cc:	200003d0 	.word	0x200003d0
 80048d0:	200004e4 	.word	0x200004e4

080048d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <vTaskInternalSetTimeOutState+0x24>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <vTaskInternalSetTimeOutState+0x28>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	605a      	str	r2, [r3, #4]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	200004e8 	.word	0x200004e8
 80048fc:	200004d4 	.word	0x200004d4

08004900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10c      	bne.n	800492a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	b672      	cpsid	i
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	b662      	cpsie	i
 8004924:	613b      	str	r3, [r7, #16]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10c      	bne.n	800494a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	b672      	cpsid	i
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	b662      	cpsie	i
 8004944:	60fb      	str	r3, [r7, #12]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800494a:	f000 fb4f 	bl	8004fec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <xTaskCheckForTimeOut+0xc4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d102      	bne.n	800496e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e023      	b.n	80049b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <xTaskCheckForTimeOut+0xc8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d007      	beq.n	800498a <xTaskCheckForTimeOut+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e015      	b.n	80049b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	d20b      	bcs.n	80049ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff97 	bl	80048d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e004      	b.n	80049b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049b6:	f000 fb4d 	bl	8005054 <vPortExitCritical>

	return xReturn;
 80049ba:	69fb      	ldr	r3, [r7, #28]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	200004d4 	.word	0x200004d4
 80049c8:	200004e8 	.word	0x200004e8

080049cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <vTaskMissedYield+0x14>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	200004e4 	.word	0x200004e4

080049e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049ec:	f000 f852 	bl	8004a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <prvIdleTask+0x28>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d9f9      	bls.n	80049ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <prvIdleTask+0x2c>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a08:	e7f0      	b.n	80049ec <prvIdleTask+0x8>
 8004a0a:	bf00      	nop
 8004a0c:	200003d4 	.word	0x200003d4
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	e00c      	b.n	8004a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <prvInitialiseTaskLists+0x60>)
 8004a2c:	4413      	add	r3, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fe2a 	bl	8003688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3301      	adds	r3, #1
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d9ef      	bls.n	8004a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a40:	480d      	ldr	r0, [pc, #52]	; (8004a78 <prvInitialiseTaskLists+0x64>)
 8004a42:	f7fe fe21 	bl	8003688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a46:	480d      	ldr	r0, [pc, #52]	; (8004a7c <prvInitialiseTaskLists+0x68>)
 8004a48:	f7fe fe1e 	bl	8003688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a4c:	480c      	ldr	r0, [pc, #48]	; (8004a80 <prvInitialiseTaskLists+0x6c>)
 8004a4e:	f7fe fe1b 	bl	8003688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a52:	480c      	ldr	r0, [pc, #48]	; (8004a84 <prvInitialiseTaskLists+0x70>)
 8004a54:	f7fe fe18 	bl	8003688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a58:	480b      	ldr	r0, [pc, #44]	; (8004a88 <prvInitialiseTaskLists+0x74>)
 8004a5a:	f7fe fe15 	bl	8003688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <prvInitialiseTaskLists+0x78>)
 8004a60:	4a05      	ldr	r2, [pc, #20]	; (8004a78 <prvInitialiseTaskLists+0x64>)
 8004a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <prvInitialiseTaskLists+0x7c>)
 8004a66:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <prvInitialiseTaskLists+0x68>)
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	200003d4 	.word	0x200003d4
 8004a78:	20000460 	.word	0x20000460
 8004a7c:	20000474 	.word	0x20000474
 8004a80:	20000490 	.word	0x20000490
 8004a84:	200004a4 	.word	0x200004a4
 8004a88:	200004bc 	.word	0x200004bc
 8004a8c:	20000488 	.word	0x20000488
 8004a90:	2000048c 	.word	0x2000048c

08004a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a9a:	e019      	b.n	8004ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a9c:	f000 faa6 	bl	8004fec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <prvCheckTasksWaitingTermination+0x50>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fe75 	bl	800379c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <prvCheckTasksWaitingTermination+0x54>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <prvCheckTasksWaitingTermination+0x54>)
 8004aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <prvCheckTasksWaitingTermination+0x58>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <prvCheckTasksWaitingTermination+0x58>)
 8004ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ac6:	f000 fac5 	bl	8005054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f810 	bl	8004af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <prvCheckTasksWaitingTermination+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e1      	bne.n	8004a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200004a4 	.word	0x200004a4
 8004ae8:	200004d0 	.word	0x200004d0
 8004aec:	200004b8 	.word	0x200004b8

08004af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d108      	bne.n	8004b14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fc22 	bl	8005350 <vPortFree>
				vPortFree( pxTCB );
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fc1f 	bl	8005350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b12:	e01a      	b.n	8004b4a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d103      	bne.n	8004b26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fc16 	bl	8005350 <vPortFree>
	}
 8004b24:	e011      	b.n	8004b4a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d00c      	beq.n	8004b4a <prvDeleteTCB+0x5a>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	60fb      	str	r3, [r7, #12]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <prvDeleteTCB+0x58>
	}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <prvResetNextTaskUnblockTime+0x38>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <prvResetNextTaskUnblockTime+0x3c>)
 8004b66:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b6c:	e008      	b.n	8004b80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <prvResetNextTaskUnblockTime+0x38>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <prvResetNextTaskUnblockTime+0x3c>)
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	20000488 	.word	0x20000488
 8004b90:	200004f0 	.word	0x200004f0

08004b94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <xTaskGetCurrentTaskHandle+0x1c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004ba0:	687b      	ldr	r3, [r7, #4]
	}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	200003d0 	.word	0x200003d0

08004bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <xTaskGetSchedulerState+0x34>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	e008      	b.n	8004bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <xTaskGetSchedulerState+0x38>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	e001      	b.n	8004bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bda:	687b      	ldr	r3, [r7, #4]
	}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	200004dc 	.word	0x200004dc
 8004bec:	200004f8 	.word	0x200004f8

08004bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d072      	beq.n	8004cec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c06:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <xTaskPriorityDisinherit+0x108>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d00c      	beq.n	8004c2a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	b672      	cpsid	i
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	b662      	cpsie	i
 8004c24:	60fb      	str	r3, [r7, #12]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	b672      	cpsid	i
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	b662      	cpsie	i
 8004c46:	60bb      	str	r3, [r7, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	1e5a      	subs	r2, r3, #1
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d044      	beq.n	8004cec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d140      	bne.n	8004cec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fd94 	bl	800379c <uxListRemove>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d115      	bne.n	8004ca6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	491f      	ldr	r1, [pc, #124]	; (8004cfc <xTaskPriorityDisinherit+0x10c>)
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xTaskPriorityDisinherit+0xb6>
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	2201      	movs	r2, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <xTaskPriorityDisinherit+0x110>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <xTaskPriorityDisinherit+0x110>)
 8004ca4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	f1c3 0207 	rsb	r2, r3, #7
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <xTaskPriorityDisinherit+0x110>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <xTaskPriorityDisinherit+0x110>)
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <xTaskPriorityDisinherit+0x10c>)
 8004cda:	441a      	add	r2, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f7fe fcfd 	bl	80036e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cec:	697b      	ldr	r3, [r7, #20]
	}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200003d0 	.word	0x200003d0
 8004cfc:	200003d4 	.word	0x200003d4
 8004d00:	200004d8 	.word	0x200004d8

08004d04 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d14:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fd3e 	bl	800379c <uxListRemove>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43da      	mvns	r2, r3
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d10a      	bne.n	8004d5c <prvAddCurrentTaskToDelayedList+0x58>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	481a      	ldr	r0, [pc, #104]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d56:	f7fe fcc4 	bl	80036e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d5a:	e026      	b.n	8004daa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d64:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d209      	bcs.n	8004d88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7fe fcd2 	bl	800372a <vListInsert>
}
 8004d86:	e010      	b.n	8004daa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f7fe fcc8 	bl	800372a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d202      	bcs.n	8004daa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004da4:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	200004d4 	.word	0x200004d4
 8004db8:	200003d0 	.word	0x200003d0
 8004dbc:	200004d8 	.word	0x200004d8
 8004dc0:	200004bc 	.word	0x200004bc
 8004dc4:	2000048c 	.word	0x2000048c
 8004dc8:	20000488 	.word	0x20000488
 8004dcc:	200004f0 	.word	0x200004f0

08004dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b04      	subs	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b04      	subs	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e00:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <pxPortInitialiseStack+0x64>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b14      	subs	r3, #20
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f06f 0202 	mvn.w	r2, #2
 8004e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3b20      	subs	r3, #32
 8004e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	08004e39 	.word	0x08004e39

08004e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <prvTaskExitError+0x5c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d00c      	beq.n	8004e66 <prvTaskExitError+0x2e>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	b672      	cpsid	i
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	b662      	cpsie	i
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <prvTaskExitError+0x2c>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	b672      	cpsid	i
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	b662      	cpsie	i
 8004e7a:	60bb      	str	r3, [r7, #8]
}
 8004e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e7e:	bf00      	nop
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0fc      	beq.n	8004e80 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	2000000c 	.word	0x2000000c
	...

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	; (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <xPortStartScheduler+0xe4>)
 8004ef8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	22ff      	movs	r2, #255	; 0xff
 8004f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <xPortStartScheduler+0xe8>)
 8004f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f1e:	4b2f      	ldr	r3, [pc, #188]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f24:	e009      	b.n	8004f3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f26:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d0ef      	beq.n	8004f26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f46:	4b25      	ldr	r3, [pc, #148]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00c      	beq.n	8004f6c <xPortStartScheduler+0x7c>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	b672      	cpsid	i
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	b662      	cpsie	i
 8004f66:	60bb      	str	r3, [r7, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	4a1a      	ldr	r2, [pc, #104]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f76:	4b19      	ldr	r3, [pc, #100]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f7e:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <xPortStartScheduler+0xec>)
 8004f80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <xPortStartScheduler+0xf0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <xPortStartScheduler+0xf0>)
 8004f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <xPortStartScheduler+0xf0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <xPortStartScheduler+0xf0>)
 8004f9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fa0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fa2:	f000 f8dd 	bl	8005160 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <xPortStartScheduler+0xf4>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fac:	f000 f8fc 	bl	80051a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <xPortStartScheduler+0xf8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <xPortStartScheduler+0xf8>)
 8004fb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fbc:	f7ff ff84 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fc0:	f7ff fba0 	bl	8004704 <vTaskSwitchContext>
	prvTaskExitError();
 8004fc4:	f7ff ff38 	bl	8004e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	e000e400 	.word	0xe000e400
 8004fd8:	200004fc 	.word	0x200004fc
 8004fdc:	20000500 	.word	0x20000500
 8004fe0:	e000ed20 	.word	0xe000ed20
 8004fe4:	2000000c 	.word	0x2000000c
 8004fe8:	e000ef34 	.word	0xe000ef34

08004fec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	b672      	cpsid	i
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	b662      	cpsie	i
 8005006:	607b      	str	r3, [r7, #4]
}
 8005008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <vPortEnterCritical+0x60>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a0e      	ldr	r2, [pc, #56]	; (800504c <vPortEnterCritical+0x60>)
 8005012:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005014:	4b0d      	ldr	r3, [pc, #52]	; (800504c <vPortEnterCritical+0x60>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d111      	bne.n	8005040 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <vPortEnterCritical+0x64>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <vPortEnterCritical+0x54>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	b672      	cpsid	i
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	b662      	cpsie	i
 800503a:	603b      	str	r3, [r7, #0]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <vPortEnterCritical+0x52>
	}
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	2000000c 	.word	0x2000000c
 8005050:	e000ed04 	.word	0xe000ed04

08005054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <vPortExitCritical+0x54>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10c      	bne.n	800507c <vPortExitCritical+0x28>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	b672      	cpsid	i
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	b662      	cpsie	i
 8005076:	607b      	str	r3, [r7, #4]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortExitCritical+0x54>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3b01      	subs	r3, #1
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <vPortExitCritical+0x54>)
 8005084:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <vPortExitCritical+0x54>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <vPortExitCritical+0x46>
 800508e:	2300      	movs	r3, #0
 8005090:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005098:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2000000c 	.word	0x2000000c
 80050ac:	00000000 	.word	0x00000000

080050b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050b0:	f3ef 8009 	mrs	r0, PSP
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <pxCurrentTCBConst>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	f01e 0f10 	tst.w	lr, #16
 80050c0:	bf08      	it	eq
 80050c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	6010      	str	r0, [r2, #0]
 80050cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050d4:	b672      	cpsid	i
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	b662      	cpsie	i
 80050e4:	f7ff fb0e 	bl	8004704 <vTaskSwitchContext>
 80050e8:	f04f 0000 	mov.w	r0, #0
 80050ec:	f380 8811 	msr	BASEPRI, r0
 80050f0:	bc09      	pop	{r0, r3}
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	6808      	ldr	r0, [r1, #0]
 80050f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f01e 0f10 	tst.w	lr, #16
 80050fe:	bf08      	it	eq
 8005100:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005104:	f380 8809 	msr	PSP, r0
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <pxCurrentTCBConst>:
 8005110:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	b672      	cpsid	i
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	b662      	cpsie	i
 8005132:	607b      	str	r3, [r7, #4]
}
 8005134:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005136:	f7ff fa2b 	bl	8004590 <xTaskIncrementTick>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <SysTick_Handler+0x44>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	2300      	movs	r3, #0
 800514a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f383 8811 	msr	BASEPRI, r3
}
 8005152:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <vPortSetupTimerInterrupt+0x34>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <vPortSetupTimerInterrupt+0x38>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <vPortSetupTimerInterrupt+0x3c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <vPortSetupTimerInterrupt+0x40>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <vPortSetupTimerInterrupt+0x44>)
 800517e:	3b01      	subs	r3, #1
 8005180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005182:	4b04      	ldr	r3, [pc, #16]	; (8005194 <vPortSetupTimerInterrupt+0x34>)
 8005184:	2207      	movs	r2, #7
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	bf00      	nop
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000e010 	.word	0xe000e010
 8005198:	e000e018 	.word	0xe000e018
 800519c:	20000000 	.word	0x20000000
 80051a0:	10624dd3 	.word	0x10624dd3
 80051a4:	e000e014 	.word	0xe000e014

080051a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051b8 <vPortEnableVFP+0x10>
 80051ac:	6801      	ldr	r1, [r0, #0]
 80051ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051b2:	6001      	str	r1, [r0, #0]
 80051b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051b6:	bf00      	nop
 80051b8:	e000ed88 	.word	0xe000ed88

080051bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051c8:	f7ff f910 	bl	80043ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051cc:	4b5b      	ldr	r3, [pc, #364]	; (800533c <pvPortMalloc+0x180>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051d4:	f000 f91a 	bl	800540c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <pvPortMalloc+0x184>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 8092 	bne.w	800530a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01f      	beq.n	800522c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80051ec:	2208      	movs	r2, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f023 0307 	bic.w	r3, r3, #7
 8005204:	3308      	adds	r3, #8
 8005206:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00c      	beq.n	800522c <pvPortMalloc+0x70>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	b672      	cpsid	i
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	b662      	cpsie	i
 8005226:	617b      	str	r3, [r7, #20]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d06b      	beq.n	800530a <pvPortMalloc+0x14e>
 8005232:	4b44      	ldr	r3, [pc, #272]	; (8005344 <pvPortMalloc+0x188>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d866      	bhi.n	800530a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800523c:	4b42      	ldr	r3, [pc, #264]	; (8005348 <pvPortMalloc+0x18c>)
 800523e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005240:	4b41      	ldr	r3, [pc, #260]	; (8005348 <pvPortMalloc+0x18c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005246:	e004      	b.n	8005252 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	d903      	bls.n	8005264 <pvPortMalloc+0xa8>
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f1      	bne.n	8005248 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005264:	4b35      	ldr	r3, [pc, #212]	; (800533c <pvPortMalloc+0x180>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	429a      	cmp	r2, r3
 800526c:	d04d      	beq.n	800530a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2208      	movs	r2, #8
 8005274:	4413      	add	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	2308      	movs	r3, #8
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	429a      	cmp	r2, r3
 800528e:	d921      	bls.n	80052d4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4413      	add	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00c      	beq.n	80052bc <pvPortMalloc+0x100>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	b672      	cpsid	i
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	b662      	cpsie	i
 80052b6:	613b      	str	r3, [r7, #16]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	1ad2      	subs	r2, r2, r3
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052ce:	69b8      	ldr	r0, [r7, #24]
 80052d0:	f000 f8fe 	bl	80054d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052d4:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <pvPortMalloc+0x188>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <pvPortMalloc+0x188>)
 80052e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <pvPortMalloc+0x188>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b19      	ldr	r3, [pc, #100]	; (800534c <pvPortMalloc+0x190>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d203      	bcs.n	80052f6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052ee:	4b15      	ldr	r3, [pc, #84]	; (8005344 <pvPortMalloc+0x188>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a16      	ldr	r2, [pc, #88]	; (800534c <pvPortMalloc+0x190>)
 80052f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <pvPortMalloc+0x184>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	431a      	orrs	r2, r3
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800530a:	f7ff f87d 	bl	8004408 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00c      	beq.n	8005332 <pvPortMalloc+0x176>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	b672      	cpsid	i
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	b662      	cpsie	i
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <pvPortMalloc+0x174>
	return pvReturn;
 8005332:	69fb      	ldr	r3, [r7, #28]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3728      	adds	r7, #40	; 0x28
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	2000410c 	.word	0x2000410c
 8005340:	20004118 	.word	0x20004118
 8005344:	20004110 	.word	0x20004110
 8005348:	20004104 	.word	0x20004104
 800534c:	20004114 	.word	0x20004114

08005350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d04c      	beq.n	80053fc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005362:	2308      	movs	r3, #8
 8005364:	425b      	negs	r3, r3
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4413      	add	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4b23      	ldr	r3, [pc, #140]	; (8005404 <vPortFree+0xb4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <vPortFree+0x48>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	b672      	cpsid	i
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	b662      	cpsie	i
 8005392:	60fb      	str	r3, [r7, #12]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <vPortFree+0x6a>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	b672      	cpsid	i
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	b662      	cpsie	i
 80053b4:	60bb      	str	r3, [r7, #8]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4b11      	ldr	r3, [pc, #68]	; (8005404 <vPortFree+0xb4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d019      	beq.n	80053fc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d115      	bne.n	80053fc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <vPortFree+0xb4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053e0:	f7ff f804 	bl	80043ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <vPortFree+0xb8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	4a06      	ldr	r2, [pc, #24]	; (8005408 <vPortFree+0xb8>)
 80053f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053f2:	6938      	ldr	r0, [r7, #16]
 80053f4:	f000 f86c 	bl	80054d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053f8:	f7ff f806 	bl	8004408 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20004118 	.word	0x20004118
 8005408:	20004110 	.word	0x20004110

0800540c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005412:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005416:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005418:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <prvHeapInit+0xac>)
 800541a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3307      	adds	r3, #7
 800542a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <prvHeapInit+0xac>)
 800543c:	4413      	add	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005444:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <prvHeapInit+0xb0>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800544a:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <prvHeapInit+0xb0>)
 800544c:	2200      	movs	r2, #0
 800544e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4413      	add	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005458:	2208      	movs	r2, #8
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0307 	bic.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <prvHeapInit+0xb4>)
 800546c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <prvHeapInit+0xb4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2200      	movs	r2, #0
 8005474:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005476:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <prvHeapInit+0xb4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800548c:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <prvHeapInit+0xb4>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <prvHeapInit+0xb8>)
 800549a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <prvHeapInit+0xbc>)
 80054a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054a4:	4b09      	ldr	r3, [pc, #36]	; (80054cc <prvHeapInit+0xc0>)
 80054a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054aa:	601a      	str	r2, [r3, #0]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	20000504 	.word	0x20000504
 80054bc:	20004104 	.word	0x20004104
 80054c0:	2000410c 	.word	0x2000410c
 80054c4:	20004114 	.word	0x20004114
 80054c8:	20004110 	.word	0x20004110
 80054cc:	20004118 	.word	0x20004118

080054d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054d8:	4b28      	ldr	r3, [pc, #160]	; (800557c <prvInsertBlockIntoFreeList+0xac>)
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e002      	b.n	80054e4 <prvInsertBlockIntoFreeList+0x14>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d8f7      	bhi.n	80054de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	4413      	add	r3, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d108      	bne.n	8005512 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	441a      	add	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	441a      	add	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d118      	bne.n	8005558 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <prvInsertBlockIntoFreeList+0xb0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d00d      	beq.n	800554e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	441a      	add	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e008      	b.n	8005560 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <prvInsertBlockIntoFreeList+0xb0>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e003      	b.n	8005560 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d002      	beq.n	800556e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20004104 	.word	0x20004104
 8005580:	2000410c 	.word	0x2000410c

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000010 	.word	0x20000010

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4d0d      	ldr	r5, [pc, #52]	; (80055c8 <__libc_init_array+0x38>)
 8005594:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005596:	1b64      	subs	r4, r4, r5
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	2600      	movs	r6, #0
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	4d0b      	ldr	r5, [pc, #44]	; (80055d0 <__libc_init_array+0x40>)
 80055a2:	4c0c      	ldr	r4, [pc, #48]	; (80055d4 <__libc_init_array+0x44>)
 80055a4:	f001 f832 	bl	800660c <_init>
 80055a8:	1b64      	subs	r4, r4, r5
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	2600      	movs	r6, #0
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	080067d8 	.word	0x080067d8
 80055cc:	080067d8 	.word	0x080067d8
 80055d0:	080067d8 	.word	0x080067d8
 80055d4:	080067dc 	.word	0x080067dc

080055d8 <memcpy>:
 80055d8:	440a      	add	r2, r1
 80055da:	4291      	cmp	r1, r2
 80055dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055e0:	d100      	bne.n	80055e4 <memcpy+0xc>
 80055e2:	4770      	bx	lr
 80055e4:	b510      	push	{r4, lr}
 80055e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ee:	4291      	cmp	r1, r2
 80055f0:	d1f9      	bne.n	80055e6 <memcpy+0xe>
 80055f2:	bd10      	pop	{r4, pc}

080055f4 <memset>:
 80055f4:	4402      	add	r2, r0
 80055f6:	4603      	mov	r3, r0
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d100      	bne.n	80055fe <memset+0xa>
 80055fc:	4770      	bx	lr
 80055fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005602:	e7f9      	b.n	80055f8 <memset+0x4>

08005604 <iprintf>:
 8005604:	b40f      	push	{r0, r1, r2, r3}
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <iprintf+0x2c>)
 8005608:	b513      	push	{r0, r1, r4, lr}
 800560a:	681c      	ldr	r4, [r3, #0]
 800560c:	b124      	cbz	r4, 8005618 <iprintf+0x14>
 800560e:	69a3      	ldr	r3, [r4, #24]
 8005610:	b913      	cbnz	r3, 8005618 <iprintf+0x14>
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fa5e 	bl	8005ad4 <__sinit>
 8005618:	ab05      	add	r3, sp, #20
 800561a:	9a04      	ldr	r2, [sp, #16]
 800561c:	68a1      	ldr	r1, [r4, #8]
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	4620      	mov	r0, r4
 8005622:	f000 fc67 	bl	8005ef4 <_vfiprintf_r>
 8005626:	b002      	add	sp, #8
 8005628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562c:	b004      	add	sp, #16
 800562e:	4770      	bx	lr
 8005630:	20000010 	.word	0x20000010

08005634 <_puts_r>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	460e      	mov	r6, r1
 8005638:	4605      	mov	r5, r0
 800563a:	b118      	cbz	r0, 8005644 <_puts_r+0x10>
 800563c:	6983      	ldr	r3, [r0, #24]
 800563e:	b90b      	cbnz	r3, 8005644 <_puts_r+0x10>
 8005640:	f000 fa48 	bl	8005ad4 <__sinit>
 8005644:	69ab      	ldr	r3, [r5, #24]
 8005646:	68ac      	ldr	r4, [r5, #8]
 8005648:	b913      	cbnz	r3, 8005650 <_puts_r+0x1c>
 800564a:	4628      	mov	r0, r5
 800564c:	f000 fa42 	bl	8005ad4 <__sinit>
 8005650:	4b2c      	ldr	r3, [pc, #176]	; (8005704 <_puts_r+0xd0>)
 8005652:	429c      	cmp	r4, r3
 8005654:	d120      	bne.n	8005698 <_puts_r+0x64>
 8005656:	686c      	ldr	r4, [r5, #4]
 8005658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800565a:	07db      	lsls	r3, r3, #31
 800565c:	d405      	bmi.n	800566a <_puts_r+0x36>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	0598      	lsls	r0, r3, #22
 8005662:	d402      	bmi.n	800566a <_puts_r+0x36>
 8005664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005666:	f000 fad3 	bl	8005c10 <__retarget_lock_acquire_recursive>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	0719      	lsls	r1, r3, #28
 800566e:	d51d      	bpl.n	80056ac <_puts_r+0x78>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b1db      	cbz	r3, 80056ac <_puts_r+0x78>
 8005674:	3e01      	subs	r6, #1
 8005676:	68a3      	ldr	r3, [r4, #8]
 8005678:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800567c:	3b01      	subs	r3, #1
 800567e:	60a3      	str	r3, [r4, #8]
 8005680:	bb39      	cbnz	r1, 80056d2 <_puts_r+0x9e>
 8005682:	2b00      	cmp	r3, #0
 8005684:	da38      	bge.n	80056f8 <_puts_r+0xc4>
 8005686:	4622      	mov	r2, r4
 8005688:	210a      	movs	r1, #10
 800568a:	4628      	mov	r0, r5
 800568c:	f000 f848 	bl	8005720 <__swbuf_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d011      	beq.n	80056b8 <_puts_r+0x84>
 8005694:	250a      	movs	r5, #10
 8005696:	e011      	b.n	80056bc <_puts_r+0x88>
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <_puts_r+0xd4>)
 800569a:	429c      	cmp	r4, r3
 800569c:	d101      	bne.n	80056a2 <_puts_r+0x6e>
 800569e:	68ac      	ldr	r4, [r5, #8]
 80056a0:	e7da      	b.n	8005658 <_puts_r+0x24>
 80056a2:	4b1a      	ldr	r3, [pc, #104]	; (800570c <_puts_r+0xd8>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	bf08      	it	eq
 80056a8:	68ec      	ldreq	r4, [r5, #12]
 80056aa:	e7d5      	b.n	8005658 <_puts_r+0x24>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 f888 	bl	80057c4 <__swsetup_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d0dd      	beq.n	8005674 <_puts_r+0x40>
 80056b8:	f04f 35ff 	mov.w	r5, #4294967295
 80056bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056be:	07da      	lsls	r2, r3, #31
 80056c0:	d405      	bmi.n	80056ce <_puts_r+0x9a>
 80056c2:	89a3      	ldrh	r3, [r4, #12]
 80056c4:	059b      	lsls	r3, r3, #22
 80056c6:	d402      	bmi.n	80056ce <_puts_r+0x9a>
 80056c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ca:	f000 faa2 	bl	8005c12 <__retarget_lock_release_recursive>
 80056ce:	4628      	mov	r0, r5
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da04      	bge.n	80056e0 <_puts_r+0xac>
 80056d6:	69a2      	ldr	r2, [r4, #24]
 80056d8:	429a      	cmp	r2, r3
 80056da:	dc06      	bgt.n	80056ea <_puts_r+0xb6>
 80056dc:	290a      	cmp	r1, #10
 80056de:	d004      	beq.n	80056ea <_puts_r+0xb6>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	6022      	str	r2, [r4, #0]
 80056e6:	7019      	strb	r1, [r3, #0]
 80056e8:	e7c5      	b.n	8005676 <_puts_r+0x42>
 80056ea:	4622      	mov	r2, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 f817 	bl	8005720 <__swbuf_r>
 80056f2:	3001      	adds	r0, #1
 80056f4:	d1bf      	bne.n	8005676 <_puts_r+0x42>
 80056f6:	e7df      	b.n	80056b8 <_puts_r+0x84>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	250a      	movs	r5, #10
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	6022      	str	r2, [r4, #0]
 8005700:	701d      	strb	r5, [r3, #0]
 8005702:	e7db      	b.n	80056bc <_puts_r+0x88>
 8005704:	0800675c 	.word	0x0800675c
 8005708:	0800677c 	.word	0x0800677c
 800570c:	0800673c 	.word	0x0800673c

08005710 <puts>:
 8005710:	4b02      	ldr	r3, [pc, #8]	; (800571c <puts+0xc>)
 8005712:	4601      	mov	r1, r0
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	f7ff bf8d 	b.w	8005634 <_puts_r>
 800571a:	bf00      	nop
 800571c:	20000010 	.word	0x20000010

08005720 <__swbuf_r>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	460e      	mov	r6, r1
 8005724:	4614      	mov	r4, r2
 8005726:	4605      	mov	r5, r0
 8005728:	b118      	cbz	r0, 8005732 <__swbuf_r+0x12>
 800572a:	6983      	ldr	r3, [r0, #24]
 800572c:	b90b      	cbnz	r3, 8005732 <__swbuf_r+0x12>
 800572e:	f000 f9d1 	bl	8005ad4 <__sinit>
 8005732:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <__swbuf_r+0x98>)
 8005734:	429c      	cmp	r4, r3
 8005736:	d12b      	bne.n	8005790 <__swbuf_r+0x70>
 8005738:	686c      	ldr	r4, [r5, #4]
 800573a:	69a3      	ldr	r3, [r4, #24]
 800573c:	60a3      	str	r3, [r4, #8]
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	071a      	lsls	r2, r3, #28
 8005742:	d52f      	bpl.n	80057a4 <__swbuf_r+0x84>
 8005744:	6923      	ldr	r3, [r4, #16]
 8005746:	b36b      	cbz	r3, 80057a4 <__swbuf_r+0x84>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	6820      	ldr	r0, [r4, #0]
 800574c:	1ac0      	subs	r0, r0, r3
 800574e:	6963      	ldr	r3, [r4, #20]
 8005750:	b2f6      	uxtb	r6, r6
 8005752:	4283      	cmp	r3, r0
 8005754:	4637      	mov	r7, r6
 8005756:	dc04      	bgt.n	8005762 <__swbuf_r+0x42>
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f926 	bl	80059ac <_fflush_r>
 8005760:	bb30      	cbnz	r0, 80057b0 <__swbuf_r+0x90>
 8005762:	68a3      	ldr	r3, [r4, #8]
 8005764:	3b01      	subs	r3, #1
 8005766:	60a3      	str	r3, [r4, #8]
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	6022      	str	r2, [r4, #0]
 800576e:	701e      	strb	r6, [r3, #0]
 8005770:	6963      	ldr	r3, [r4, #20]
 8005772:	3001      	adds	r0, #1
 8005774:	4283      	cmp	r3, r0
 8005776:	d004      	beq.n	8005782 <__swbuf_r+0x62>
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	07db      	lsls	r3, r3, #31
 800577c:	d506      	bpl.n	800578c <__swbuf_r+0x6c>
 800577e:	2e0a      	cmp	r6, #10
 8005780:	d104      	bne.n	800578c <__swbuf_r+0x6c>
 8005782:	4621      	mov	r1, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f000 f911 	bl	80059ac <_fflush_r>
 800578a:	b988      	cbnz	r0, 80057b0 <__swbuf_r+0x90>
 800578c:	4638      	mov	r0, r7
 800578e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <__swbuf_r+0x9c>)
 8005792:	429c      	cmp	r4, r3
 8005794:	d101      	bne.n	800579a <__swbuf_r+0x7a>
 8005796:	68ac      	ldr	r4, [r5, #8]
 8005798:	e7cf      	b.n	800573a <__swbuf_r+0x1a>
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <__swbuf_r+0xa0>)
 800579c:	429c      	cmp	r4, r3
 800579e:	bf08      	it	eq
 80057a0:	68ec      	ldreq	r4, [r5, #12]
 80057a2:	e7ca      	b.n	800573a <__swbuf_r+0x1a>
 80057a4:	4621      	mov	r1, r4
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 f80c 	bl	80057c4 <__swsetup_r>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d0cb      	beq.n	8005748 <__swbuf_r+0x28>
 80057b0:	f04f 37ff 	mov.w	r7, #4294967295
 80057b4:	e7ea      	b.n	800578c <__swbuf_r+0x6c>
 80057b6:	bf00      	nop
 80057b8:	0800675c 	.word	0x0800675c
 80057bc:	0800677c 	.word	0x0800677c
 80057c0:	0800673c 	.word	0x0800673c

080057c4 <__swsetup_r>:
 80057c4:	4b32      	ldr	r3, [pc, #200]	; (8005890 <__swsetup_r+0xcc>)
 80057c6:	b570      	push	{r4, r5, r6, lr}
 80057c8:	681d      	ldr	r5, [r3, #0]
 80057ca:	4606      	mov	r6, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	b125      	cbz	r5, 80057da <__swsetup_r+0x16>
 80057d0:	69ab      	ldr	r3, [r5, #24]
 80057d2:	b913      	cbnz	r3, 80057da <__swsetup_r+0x16>
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f97d 	bl	8005ad4 <__sinit>
 80057da:	4b2e      	ldr	r3, [pc, #184]	; (8005894 <__swsetup_r+0xd0>)
 80057dc:	429c      	cmp	r4, r3
 80057de:	d10f      	bne.n	8005800 <__swsetup_r+0x3c>
 80057e0:	686c      	ldr	r4, [r5, #4]
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057e8:	0719      	lsls	r1, r3, #28
 80057ea:	d42c      	bmi.n	8005846 <__swsetup_r+0x82>
 80057ec:	06dd      	lsls	r5, r3, #27
 80057ee:	d411      	bmi.n	8005814 <__swsetup_r+0x50>
 80057f0:	2309      	movs	r3, #9
 80057f2:	6033      	str	r3, [r6, #0]
 80057f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	f04f 30ff 	mov.w	r0, #4294967295
 80057fe:	e03e      	b.n	800587e <__swsetup_r+0xba>
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <__swsetup_r+0xd4>)
 8005802:	429c      	cmp	r4, r3
 8005804:	d101      	bne.n	800580a <__swsetup_r+0x46>
 8005806:	68ac      	ldr	r4, [r5, #8]
 8005808:	e7eb      	b.n	80057e2 <__swsetup_r+0x1e>
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <__swsetup_r+0xd8>)
 800580c:	429c      	cmp	r4, r3
 800580e:	bf08      	it	eq
 8005810:	68ec      	ldreq	r4, [r5, #12]
 8005812:	e7e6      	b.n	80057e2 <__swsetup_r+0x1e>
 8005814:	0758      	lsls	r0, r3, #29
 8005816:	d512      	bpl.n	800583e <__swsetup_r+0x7a>
 8005818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800581a:	b141      	cbz	r1, 800582e <__swsetup_r+0x6a>
 800581c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005820:	4299      	cmp	r1, r3
 8005822:	d002      	beq.n	800582a <__swsetup_r+0x66>
 8005824:	4630      	mov	r0, r6
 8005826:	f000 fa5b 	bl	8005ce0 <_free_r>
 800582a:	2300      	movs	r3, #0
 800582c:	6363      	str	r3, [r4, #52]	; 0x34
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	2300      	movs	r3, #0
 8005838:	6063      	str	r3, [r4, #4]
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	f043 0308 	orr.w	r3, r3, #8
 8005844:	81a3      	strh	r3, [r4, #12]
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	b94b      	cbnz	r3, 800585e <__swsetup_r+0x9a>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005854:	d003      	beq.n	800585e <__swsetup_r+0x9a>
 8005856:	4621      	mov	r1, r4
 8005858:	4630      	mov	r0, r6
 800585a:	f000 fa01 	bl	8005c60 <__smakebuf_r>
 800585e:	89a0      	ldrh	r0, [r4, #12]
 8005860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005864:	f010 0301 	ands.w	r3, r0, #1
 8005868:	d00a      	beq.n	8005880 <__swsetup_r+0xbc>
 800586a:	2300      	movs	r3, #0
 800586c:	60a3      	str	r3, [r4, #8]
 800586e:	6963      	ldr	r3, [r4, #20]
 8005870:	425b      	negs	r3, r3
 8005872:	61a3      	str	r3, [r4, #24]
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	b943      	cbnz	r3, 800588a <__swsetup_r+0xc6>
 8005878:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800587c:	d1ba      	bne.n	80057f4 <__swsetup_r+0x30>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	0781      	lsls	r1, r0, #30
 8005882:	bf58      	it	pl
 8005884:	6963      	ldrpl	r3, [r4, #20]
 8005886:	60a3      	str	r3, [r4, #8]
 8005888:	e7f4      	b.n	8005874 <__swsetup_r+0xb0>
 800588a:	2000      	movs	r0, #0
 800588c:	e7f7      	b.n	800587e <__swsetup_r+0xba>
 800588e:	bf00      	nop
 8005890:	20000010 	.word	0x20000010
 8005894:	0800675c 	.word	0x0800675c
 8005898:	0800677c 	.word	0x0800677c
 800589c:	0800673c 	.word	0x0800673c

080058a0 <__sflush_r>:
 80058a0:	898a      	ldrh	r2, [r1, #12]
 80058a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	4605      	mov	r5, r0
 80058a8:	0710      	lsls	r0, r2, #28
 80058aa:	460c      	mov	r4, r1
 80058ac:	d458      	bmi.n	8005960 <__sflush_r+0xc0>
 80058ae:	684b      	ldr	r3, [r1, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	dc05      	bgt.n	80058c0 <__sflush_r+0x20>
 80058b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	dc02      	bgt.n	80058c0 <__sflush_r+0x20>
 80058ba:	2000      	movs	r0, #0
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	d0f9      	beq.n	80058ba <__sflush_r+0x1a>
 80058c6:	2300      	movs	r3, #0
 80058c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058cc:	682f      	ldr	r7, [r5, #0]
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	d032      	beq.n	8005938 <__sflush_r+0x98>
 80058d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	075a      	lsls	r2, r3, #29
 80058d8:	d505      	bpl.n	80058e6 <__sflush_r+0x46>
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	1ac0      	subs	r0, r0, r3
 80058de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058e0:	b10b      	cbz	r3, 80058e6 <__sflush_r+0x46>
 80058e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058e4:	1ac0      	subs	r0, r0, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	4602      	mov	r2, r0
 80058ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ec:	6a21      	ldr	r1, [r4, #32]
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b0      	blx	r6
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	d106      	bne.n	8005906 <__sflush_r+0x66>
 80058f8:	6829      	ldr	r1, [r5, #0]
 80058fa:	291d      	cmp	r1, #29
 80058fc:	d82c      	bhi.n	8005958 <__sflush_r+0xb8>
 80058fe:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <__sflush_r+0x108>)
 8005900:	40ca      	lsrs	r2, r1
 8005902:	07d6      	lsls	r6, r2, #31
 8005904:	d528      	bpl.n	8005958 <__sflush_r+0xb8>
 8005906:	2200      	movs	r2, #0
 8005908:	6062      	str	r2, [r4, #4]
 800590a:	04d9      	lsls	r1, r3, #19
 800590c:	6922      	ldr	r2, [r4, #16]
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	d504      	bpl.n	800591c <__sflush_r+0x7c>
 8005912:	1c42      	adds	r2, r0, #1
 8005914:	d101      	bne.n	800591a <__sflush_r+0x7a>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	b903      	cbnz	r3, 800591c <__sflush_r+0x7c>
 800591a:	6560      	str	r0, [r4, #84]	; 0x54
 800591c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800591e:	602f      	str	r7, [r5, #0]
 8005920:	2900      	cmp	r1, #0
 8005922:	d0ca      	beq.n	80058ba <__sflush_r+0x1a>
 8005924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005928:	4299      	cmp	r1, r3
 800592a:	d002      	beq.n	8005932 <__sflush_r+0x92>
 800592c:	4628      	mov	r0, r5
 800592e:	f000 f9d7 	bl	8005ce0 <_free_r>
 8005932:	2000      	movs	r0, #0
 8005934:	6360      	str	r0, [r4, #52]	; 0x34
 8005936:	e7c1      	b.n	80058bc <__sflush_r+0x1c>
 8005938:	6a21      	ldr	r1, [r4, #32]
 800593a:	2301      	movs	r3, #1
 800593c:	4628      	mov	r0, r5
 800593e:	47b0      	blx	r6
 8005940:	1c41      	adds	r1, r0, #1
 8005942:	d1c7      	bne.n	80058d4 <__sflush_r+0x34>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0c4      	beq.n	80058d4 <__sflush_r+0x34>
 800594a:	2b1d      	cmp	r3, #29
 800594c:	d001      	beq.n	8005952 <__sflush_r+0xb2>
 800594e:	2b16      	cmp	r3, #22
 8005950:	d101      	bne.n	8005956 <__sflush_r+0xb6>
 8005952:	602f      	str	r7, [r5, #0]
 8005954:	e7b1      	b.n	80058ba <__sflush_r+0x1a>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	e7ad      	b.n	80058bc <__sflush_r+0x1c>
 8005960:	690f      	ldr	r7, [r1, #16]
 8005962:	2f00      	cmp	r7, #0
 8005964:	d0a9      	beq.n	80058ba <__sflush_r+0x1a>
 8005966:	0793      	lsls	r3, r2, #30
 8005968:	680e      	ldr	r6, [r1, #0]
 800596a:	bf08      	it	eq
 800596c:	694b      	ldreq	r3, [r1, #20]
 800596e:	600f      	str	r7, [r1, #0]
 8005970:	bf18      	it	ne
 8005972:	2300      	movne	r3, #0
 8005974:	eba6 0807 	sub.w	r8, r6, r7
 8005978:	608b      	str	r3, [r1, #8]
 800597a:	f1b8 0f00 	cmp.w	r8, #0
 800597e:	dd9c      	ble.n	80058ba <__sflush_r+0x1a>
 8005980:	6a21      	ldr	r1, [r4, #32]
 8005982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005984:	4643      	mov	r3, r8
 8005986:	463a      	mov	r2, r7
 8005988:	4628      	mov	r0, r5
 800598a:	47b0      	blx	r6
 800598c:	2800      	cmp	r0, #0
 800598e:	dc06      	bgt.n	800599e <__sflush_r+0xfe>
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	e78e      	b.n	80058bc <__sflush_r+0x1c>
 800599e:	4407      	add	r7, r0
 80059a0:	eba8 0800 	sub.w	r8, r8, r0
 80059a4:	e7e9      	b.n	800597a <__sflush_r+0xda>
 80059a6:	bf00      	nop
 80059a8:	20400001 	.word	0x20400001

080059ac <_fflush_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	690b      	ldr	r3, [r1, #16]
 80059b0:	4605      	mov	r5, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	b913      	cbnz	r3, 80059bc <_fflush_r+0x10>
 80059b6:	2500      	movs	r5, #0
 80059b8:	4628      	mov	r0, r5
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	b118      	cbz	r0, 80059c6 <_fflush_r+0x1a>
 80059be:	6983      	ldr	r3, [r0, #24]
 80059c0:	b90b      	cbnz	r3, 80059c6 <_fflush_r+0x1a>
 80059c2:	f000 f887 	bl	8005ad4 <__sinit>
 80059c6:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <_fflush_r+0x6c>)
 80059c8:	429c      	cmp	r4, r3
 80059ca:	d11b      	bne.n	8005a04 <_fflush_r+0x58>
 80059cc:	686c      	ldr	r4, [r5, #4]
 80059ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0ef      	beq.n	80059b6 <_fflush_r+0xa>
 80059d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059d8:	07d0      	lsls	r0, r2, #31
 80059da:	d404      	bmi.n	80059e6 <_fflush_r+0x3a>
 80059dc:	0599      	lsls	r1, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_fflush_r+0x3a>
 80059e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e2:	f000 f915 	bl	8005c10 <__retarget_lock_acquire_recursive>
 80059e6:	4628      	mov	r0, r5
 80059e8:	4621      	mov	r1, r4
 80059ea:	f7ff ff59 	bl	80058a0 <__sflush_r>
 80059ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059f0:	07da      	lsls	r2, r3, #31
 80059f2:	4605      	mov	r5, r0
 80059f4:	d4e0      	bmi.n	80059b8 <_fflush_r+0xc>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	059b      	lsls	r3, r3, #22
 80059fa:	d4dd      	bmi.n	80059b8 <_fflush_r+0xc>
 80059fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059fe:	f000 f908 	bl	8005c12 <__retarget_lock_release_recursive>
 8005a02:	e7d9      	b.n	80059b8 <_fflush_r+0xc>
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <_fflush_r+0x70>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d101      	bne.n	8005a0e <_fflush_r+0x62>
 8005a0a:	68ac      	ldr	r4, [r5, #8]
 8005a0c:	e7df      	b.n	80059ce <_fflush_r+0x22>
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <_fflush_r+0x74>)
 8005a10:	429c      	cmp	r4, r3
 8005a12:	bf08      	it	eq
 8005a14:	68ec      	ldreq	r4, [r5, #12]
 8005a16:	e7da      	b.n	80059ce <_fflush_r+0x22>
 8005a18:	0800675c 	.word	0x0800675c
 8005a1c:	0800677c 	.word	0x0800677c
 8005a20:	0800673c 	.word	0x0800673c

08005a24 <std>:
 8005a24:	2300      	movs	r3, #0
 8005a26:	b510      	push	{r4, lr}
 8005a28:	4604      	mov	r4, r0
 8005a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a32:	6083      	str	r3, [r0, #8]
 8005a34:	8181      	strh	r1, [r0, #12]
 8005a36:	6643      	str	r3, [r0, #100]	; 0x64
 8005a38:	81c2      	strh	r2, [r0, #14]
 8005a3a:	6183      	str	r3, [r0, #24]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	2208      	movs	r2, #8
 8005a40:	305c      	adds	r0, #92	; 0x5c
 8005a42:	f7ff fdd7 	bl	80055f4 <memset>
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <std+0x38>)
 8005a48:	6263      	str	r3, [r4, #36]	; 0x24
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <std+0x3c>)
 8005a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a4e:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <std+0x40>)
 8005a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <std+0x44>)
 8005a54:	6224      	str	r4, [r4, #32]
 8005a56:	6323      	str	r3, [r4, #48]	; 0x30
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	bf00      	nop
 8005a5c:	0800649d 	.word	0x0800649d
 8005a60:	080064bf 	.word	0x080064bf
 8005a64:	080064f7 	.word	0x080064f7
 8005a68:	0800651b 	.word	0x0800651b

08005a6c <_cleanup_r>:
 8005a6c:	4901      	ldr	r1, [pc, #4]	; (8005a74 <_cleanup_r+0x8>)
 8005a6e:	f000 b8af 	b.w	8005bd0 <_fwalk_reent>
 8005a72:	bf00      	nop
 8005a74:	080059ad 	.word	0x080059ad

08005a78 <__sfmoreglue>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	2268      	movs	r2, #104	; 0x68
 8005a7c:	1e4d      	subs	r5, r1, #1
 8005a7e:	4355      	muls	r5, r2
 8005a80:	460e      	mov	r6, r1
 8005a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a86:	f000 f997 	bl	8005db8 <_malloc_r>
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	b140      	cbz	r0, 8005aa0 <__sfmoreglue+0x28>
 8005a8e:	2100      	movs	r1, #0
 8005a90:	e9c0 1600 	strd	r1, r6, [r0]
 8005a94:	300c      	adds	r0, #12
 8005a96:	60a0      	str	r0, [r4, #8]
 8005a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a9c:	f7ff fdaa 	bl	80055f4 <memset>
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}

08005aa4 <__sfp_lock_acquire>:
 8005aa4:	4801      	ldr	r0, [pc, #4]	; (8005aac <__sfp_lock_acquire+0x8>)
 8005aa6:	f000 b8b3 	b.w	8005c10 <__retarget_lock_acquire_recursive>
 8005aaa:	bf00      	nop
 8005aac:	2000411d 	.word	0x2000411d

08005ab0 <__sfp_lock_release>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__sfp_lock_release+0x8>)
 8005ab2:	f000 b8ae 	b.w	8005c12 <__retarget_lock_release_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	2000411d 	.word	0x2000411d

08005abc <__sinit_lock_acquire>:
 8005abc:	4801      	ldr	r0, [pc, #4]	; (8005ac4 <__sinit_lock_acquire+0x8>)
 8005abe:	f000 b8a7 	b.w	8005c10 <__retarget_lock_acquire_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	2000411e 	.word	0x2000411e

08005ac8 <__sinit_lock_release>:
 8005ac8:	4801      	ldr	r0, [pc, #4]	; (8005ad0 <__sinit_lock_release+0x8>)
 8005aca:	f000 b8a2 	b.w	8005c12 <__retarget_lock_release_recursive>
 8005ace:	bf00      	nop
 8005ad0:	2000411e 	.word	0x2000411e

08005ad4 <__sinit>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	f7ff fff0 	bl	8005abc <__sinit_lock_acquire>
 8005adc:	69a3      	ldr	r3, [r4, #24]
 8005ade:	b11b      	cbz	r3, 8005ae8 <__sinit+0x14>
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae4:	f7ff bff0 	b.w	8005ac8 <__sinit_lock_release>
 8005ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005aec:	6523      	str	r3, [r4, #80]	; 0x50
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <__sinit+0x68>)
 8005af0:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <__sinit+0x6c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	bf04      	itt	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	61a3      	streq	r3, [r4, #24]
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 f820 	bl	8005b44 <__sfp>
 8005b04:	6060      	str	r0, [r4, #4]
 8005b06:	4620      	mov	r0, r4
 8005b08:	f000 f81c 	bl	8005b44 <__sfp>
 8005b0c:	60a0      	str	r0, [r4, #8]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 f818 	bl	8005b44 <__sfp>
 8005b14:	2200      	movs	r2, #0
 8005b16:	60e0      	str	r0, [r4, #12]
 8005b18:	2104      	movs	r1, #4
 8005b1a:	6860      	ldr	r0, [r4, #4]
 8005b1c:	f7ff ff82 	bl	8005a24 <std>
 8005b20:	68a0      	ldr	r0, [r4, #8]
 8005b22:	2201      	movs	r2, #1
 8005b24:	2109      	movs	r1, #9
 8005b26:	f7ff ff7d 	bl	8005a24 <std>
 8005b2a:	68e0      	ldr	r0, [r4, #12]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	2112      	movs	r1, #18
 8005b30:	f7ff ff78 	bl	8005a24 <std>
 8005b34:	2301      	movs	r3, #1
 8005b36:	61a3      	str	r3, [r4, #24]
 8005b38:	e7d2      	b.n	8005ae0 <__sinit+0xc>
 8005b3a:	bf00      	nop
 8005b3c:	08006738 	.word	0x08006738
 8005b40:	08005a6d 	.word	0x08005a6d

08005b44 <__sfp>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	4607      	mov	r7, r0
 8005b48:	f7ff ffac 	bl	8005aa4 <__sfp_lock_acquire>
 8005b4c:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <__sfp+0x84>)
 8005b4e:	681e      	ldr	r6, [r3, #0]
 8005b50:	69b3      	ldr	r3, [r6, #24]
 8005b52:	b913      	cbnz	r3, 8005b5a <__sfp+0x16>
 8005b54:	4630      	mov	r0, r6
 8005b56:	f7ff ffbd 	bl	8005ad4 <__sinit>
 8005b5a:	3648      	adds	r6, #72	; 0x48
 8005b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	d503      	bpl.n	8005b6c <__sfp+0x28>
 8005b64:	6833      	ldr	r3, [r6, #0]
 8005b66:	b30b      	cbz	r3, 8005bac <__sfp+0x68>
 8005b68:	6836      	ldr	r6, [r6, #0]
 8005b6a:	e7f7      	b.n	8005b5c <__sfp+0x18>
 8005b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b70:	b9d5      	cbnz	r5, 8005ba8 <__sfp+0x64>
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <__sfp+0x88>)
 8005b74:	60e3      	str	r3, [r4, #12]
 8005b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b7c:	f000 f847 	bl	8005c0e <__retarget_lock_init_recursive>
 8005b80:	f7ff ff96 	bl	8005ab0 <__sfp_lock_release>
 8005b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b8c:	6025      	str	r5, [r4, #0]
 8005b8e:	61a5      	str	r5, [r4, #24]
 8005b90:	2208      	movs	r2, #8
 8005b92:	4629      	mov	r1, r5
 8005b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b98:	f7ff fd2c 	bl	80055f4 <memset>
 8005b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba8:	3468      	adds	r4, #104	; 0x68
 8005baa:	e7d9      	b.n	8005b60 <__sfp+0x1c>
 8005bac:	2104      	movs	r1, #4
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f7ff ff62 	bl	8005a78 <__sfmoreglue>
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	6030      	str	r0, [r6, #0]
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d1d5      	bne.n	8005b68 <__sfp+0x24>
 8005bbc:	f7ff ff78 	bl	8005ab0 <__sfp_lock_release>
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	e7ee      	b.n	8005ba4 <__sfp+0x60>
 8005bc6:	bf00      	nop
 8005bc8:	08006738 	.word	0x08006738
 8005bcc:	ffff0001 	.word	0xffff0001

08005bd0 <_fwalk_reent>:
 8005bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	4688      	mov	r8, r1
 8005bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bdc:	2700      	movs	r7, #0
 8005bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005be2:	f1b9 0901 	subs.w	r9, r9, #1
 8005be6:	d505      	bpl.n	8005bf4 <_fwalk_reent+0x24>
 8005be8:	6824      	ldr	r4, [r4, #0]
 8005bea:	2c00      	cmp	r4, #0
 8005bec:	d1f7      	bne.n	8005bde <_fwalk_reent+0xe>
 8005bee:	4638      	mov	r0, r7
 8005bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf4:	89ab      	ldrh	r3, [r5, #12]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d907      	bls.n	8005c0a <_fwalk_reent+0x3a>
 8005bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	d003      	beq.n	8005c0a <_fwalk_reent+0x3a>
 8005c02:	4629      	mov	r1, r5
 8005c04:	4630      	mov	r0, r6
 8005c06:	47c0      	blx	r8
 8005c08:	4307      	orrs	r7, r0
 8005c0a:	3568      	adds	r5, #104	; 0x68
 8005c0c:	e7e9      	b.n	8005be2 <_fwalk_reent+0x12>

08005c0e <__retarget_lock_init_recursive>:
 8005c0e:	4770      	bx	lr

08005c10 <__retarget_lock_acquire_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_release_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <__swhatbuf_r>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	460e      	mov	r6, r1
 8005c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	b096      	sub	sp, #88	; 0x58
 8005c20:	4614      	mov	r4, r2
 8005c22:	461d      	mov	r5, r3
 8005c24:	da08      	bge.n	8005c38 <__swhatbuf_r+0x24>
 8005c26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	602a      	str	r2, [r5, #0]
 8005c2e:	061a      	lsls	r2, r3, #24
 8005c30:	d410      	bmi.n	8005c54 <__swhatbuf_r+0x40>
 8005c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c36:	e00e      	b.n	8005c56 <__swhatbuf_r+0x42>
 8005c38:	466a      	mov	r2, sp
 8005c3a:	f000 fc95 	bl	8006568 <_fstat_r>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	dbf1      	blt.n	8005c26 <__swhatbuf_r+0x12>
 8005c42:	9a01      	ldr	r2, [sp, #4]
 8005c44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c4c:	425a      	negs	r2, r3
 8005c4e:	415a      	adcs	r2, r3
 8005c50:	602a      	str	r2, [r5, #0]
 8005c52:	e7ee      	b.n	8005c32 <__swhatbuf_r+0x1e>
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	2000      	movs	r0, #0
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	b016      	add	sp, #88	; 0x58
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c60 <__smakebuf_r>:
 8005c60:	898b      	ldrh	r3, [r1, #12]
 8005c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c64:	079d      	lsls	r5, r3, #30
 8005c66:	4606      	mov	r6, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	d507      	bpl.n	8005c7c <__smakebuf_r+0x1c>
 8005c6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	6123      	str	r3, [r4, #16]
 8005c74:	2301      	movs	r3, #1
 8005c76:	6163      	str	r3, [r4, #20]
 8005c78:	b002      	add	sp, #8
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
 8005c7c:	ab01      	add	r3, sp, #4
 8005c7e:	466a      	mov	r2, sp
 8005c80:	f7ff ffc8 	bl	8005c14 <__swhatbuf_r>
 8005c84:	9900      	ldr	r1, [sp, #0]
 8005c86:	4605      	mov	r5, r0
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f000 f895 	bl	8005db8 <_malloc_r>
 8005c8e:	b948      	cbnz	r0, 8005ca4 <__smakebuf_r+0x44>
 8005c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c94:	059a      	lsls	r2, r3, #22
 8005c96:	d4ef      	bmi.n	8005c78 <__smakebuf_r+0x18>
 8005c98:	f023 0303 	bic.w	r3, r3, #3
 8005c9c:	f043 0302 	orr.w	r3, r3, #2
 8005ca0:	81a3      	strh	r3, [r4, #12]
 8005ca2:	e7e3      	b.n	8005c6c <__smakebuf_r+0xc>
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <__smakebuf_r+0x7c>)
 8005ca6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	6020      	str	r0, [r4, #0]
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	81a3      	strh	r3, [r4, #12]
 8005cb2:	9b00      	ldr	r3, [sp, #0]
 8005cb4:	6163      	str	r3, [r4, #20]
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	6120      	str	r0, [r4, #16]
 8005cba:	b15b      	cbz	r3, 8005cd4 <__smakebuf_r+0x74>
 8005cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f000 fc63 	bl	800658c <_isatty_r>
 8005cc6:	b128      	cbz	r0, 8005cd4 <__smakebuf_r+0x74>
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	89a0      	ldrh	r0, [r4, #12]
 8005cd6:	4305      	orrs	r5, r0
 8005cd8:	81a5      	strh	r5, [r4, #12]
 8005cda:	e7cd      	b.n	8005c78 <__smakebuf_r+0x18>
 8005cdc:	08005a6d 	.word	0x08005a6d

08005ce0 <_free_r>:
 8005ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	d044      	beq.n	8005d70 <_free_r+0x90>
 8005ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cea:	9001      	str	r0, [sp, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f1a1 0404 	sub.w	r4, r1, #4
 8005cf2:	bfb8      	it	lt
 8005cf4:	18e4      	addlt	r4, r4, r3
 8005cf6:	f000 fc6b 	bl	80065d0 <__malloc_lock>
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <_free_r+0x94>)
 8005cfc:	9801      	ldr	r0, [sp, #4]
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	b933      	cbnz	r3, 8005d10 <_free_r+0x30>
 8005d02:	6063      	str	r3, [r4, #4]
 8005d04:	6014      	str	r4, [r2, #0]
 8005d06:	b003      	add	sp, #12
 8005d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d0c:	f000 bc66 	b.w	80065dc <__malloc_unlock>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d908      	bls.n	8005d26 <_free_r+0x46>
 8005d14:	6825      	ldr	r5, [r4, #0]
 8005d16:	1961      	adds	r1, r4, r5
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	bf01      	itttt	eq
 8005d1c:	6819      	ldreq	r1, [r3, #0]
 8005d1e:	685b      	ldreq	r3, [r3, #4]
 8005d20:	1949      	addeq	r1, r1, r5
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	e7ed      	b.n	8005d02 <_free_r+0x22>
 8005d26:	461a      	mov	r2, r3
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b10b      	cbz	r3, 8005d30 <_free_r+0x50>
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d9fa      	bls.n	8005d26 <_free_r+0x46>
 8005d30:	6811      	ldr	r1, [r2, #0]
 8005d32:	1855      	adds	r5, r2, r1
 8005d34:	42a5      	cmp	r5, r4
 8005d36:	d10b      	bne.n	8005d50 <_free_r+0x70>
 8005d38:	6824      	ldr	r4, [r4, #0]
 8005d3a:	4421      	add	r1, r4
 8005d3c:	1854      	adds	r4, r2, r1
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	6011      	str	r1, [r2, #0]
 8005d42:	d1e0      	bne.n	8005d06 <_free_r+0x26>
 8005d44:	681c      	ldr	r4, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	6053      	str	r3, [r2, #4]
 8005d4a:	4421      	add	r1, r4
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	e7da      	b.n	8005d06 <_free_r+0x26>
 8005d50:	d902      	bls.n	8005d58 <_free_r+0x78>
 8005d52:	230c      	movs	r3, #12
 8005d54:	6003      	str	r3, [r0, #0]
 8005d56:	e7d6      	b.n	8005d06 <_free_r+0x26>
 8005d58:	6825      	ldr	r5, [r4, #0]
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	bf04      	itt	eq
 8005d60:	6819      	ldreq	r1, [r3, #0]
 8005d62:	685b      	ldreq	r3, [r3, #4]
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	bf04      	itt	eq
 8005d68:	1949      	addeq	r1, r1, r5
 8005d6a:	6021      	streq	r1, [r4, #0]
 8005d6c:	6054      	str	r4, [r2, #4]
 8005d6e:	e7ca      	b.n	8005d06 <_free_r+0x26>
 8005d70:	b003      	add	sp, #12
 8005d72:	bd30      	pop	{r4, r5, pc}
 8005d74:	20004120 	.word	0x20004120

08005d78 <sbrk_aligned>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4e0e      	ldr	r6, [pc, #56]	; (8005db4 <sbrk_aligned+0x3c>)
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	6831      	ldr	r1, [r6, #0]
 8005d80:	4605      	mov	r5, r0
 8005d82:	b911      	cbnz	r1, 8005d8a <sbrk_aligned+0x12>
 8005d84:	f000 fb7a 	bl	800647c <_sbrk_r>
 8005d88:	6030      	str	r0, [r6, #0]
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fb75 	bl	800647c <_sbrk_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d00a      	beq.n	8005dac <sbrk_aligned+0x34>
 8005d96:	1cc4      	adds	r4, r0, #3
 8005d98:	f024 0403 	bic.w	r4, r4, #3
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d007      	beq.n	8005db0 <sbrk_aligned+0x38>
 8005da0:	1a21      	subs	r1, r4, r0
 8005da2:	4628      	mov	r0, r5
 8005da4:	f000 fb6a 	bl	800647c <_sbrk_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d101      	bne.n	8005db0 <sbrk_aligned+0x38>
 8005dac:	f04f 34ff 	mov.w	r4, #4294967295
 8005db0:	4620      	mov	r0, r4
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	20004124 	.word	0x20004124

08005db8 <_malloc_r>:
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	1ccd      	adds	r5, r1, #3
 8005dbe:	f025 0503 	bic.w	r5, r5, #3
 8005dc2:	3508      	adds	r5, #8
 8005dc4:	2d0c      	cmp	r5, #12
 8005dc6:	bf38      	it	cc
 8005dc8:	250c      	movcc	r5, #12
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	4607      	mov	r7, r0
 8005dce:	db01      	blt.n	8005dd4 <_malloc_r+0x1c>
 8005dd0:	42a9      	cmp	r1, r5
 8005dd2:	d905      	bls.n	8005de0 <_malloc_r+0x28>
 8005dd4:	230c      	movs	r3, #12
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	2600      	movs	r6, #0
 8005dda:	4630      	mov	r0, r6
 8005ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de0:	4e2e      	ldr	r6, [pc, #184]	; (8005e9c <_malloc_r+0xe4>)
 8005de2:	f000 fbf5 	bl	80065d0 <__malloc_lock>
 8005de6:	6833      	ldr	r3, [r6, #0]
 8005de8:	461c      	mov	r4, r3
 8005dea:	bb34      	cbnz	r4, 8005e3a <_malloc_r+0x82>
 8005dec:	4629      	mov	r1, r5
 8005dee:	4638      	mov	r0, r7
 8005df0:	f7ff ffc2 	bl	8005d78 <sbrk_aligned>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	4604      	mov	r4, r0
 8005df8:	d14d      	bne.n	8005e96 <_malloc_r+0xde>
 8005dfa:	6834      	ldr	r4, [r6, #0]
 8005dfc:	4626      	mov	r6, r4
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	d140      	bne.n	8005e84 <_malloc_r+0xcc>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	4631      	mov	r1, r6
 8005e06:	4638      	mov	r0, r7
 8005e08:	eb04 0803 	add.w	r8, r4, r3
 8005e0c:	f000 fb36 	bl	800647c <_sbrk_r>
 8005e10:	4580      	cmp	r8, r0
 8005e12:	d13a      	bne.n	8005e8a <_malloc_r+0xd2>
 8005e14:	6821      	ldr	r1, [r4, #0]
 8005e16:	3503      	adds	r5, #3
 8005e18:	1a6d      	subs	r5, r5, r1
 8005e1a:	f025 0503 	bic.w	r5, r5, #3
 8005e1e:	3508      	adds	r5, #8
 8005e20:	2d0c      	cmp	r5, #12
 8005e22:	bf38      	it	cc
 8005e24:	250c      	movcc	r5, #12
 8005e26:	4629      	mov	r1, r5
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f7ff ffa5 	bl	8005d78 <sbrk_aligned>
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d02b      	beq.n	8005e8a <_malloc_r+0xd2>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	442b      	add	r3, r5
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	e00e      	b.n	8005e58 <_malloc_r+0xa0>
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	1b52      	subs	r2, r2, r5
 8005e3e:	d41e      	bmi.n	8005e7e <_malloc_r+0xc6>
 8005e40:	2a0b      	cmp	r2, #11
 8005e42:	d916      	bls.n	8005e72 <_malloc_r+0xba>
 8005e44:	1961      	adds	r1, r4, r5
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	6025      	str	r5, [r4, #0]
 8005e4a:	bf18      	it	ne
 8005e4c:	6059      	strne	r1, [r3, #4]
 8005e4e:	6863      	ldr	r3, [r4, #4]
 8005e50:	bf08      	it	eq
 8005e52:	6031      	streq	r1, [r6, #0]
 8005e54:	5162      	str	r2, [r4, r5]
 8005e56:	604b      	str	r3, [r1, #4]
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f104 060b 	add.w	r6, r4, #11
 8005e5e:	f000 fbbd 	bl	80065dc <__malloc_unlock>
 8005e62:	f026 0607 	bic.w	r6, r6, #7
 8005e66:	1d23      	adds	r3, r4, #4
 8005e68:	1af2      	subs	r2, r6, r3
 8005e6a:	d0b6      	beq.n	8005dda <_malloc_r+0x22>
 8005e6c:	1b9b      	subs	r3, r3, r6
 8005e6e:	50a3      	str	r3, [r4, r2]
 8005e70:	e7b3      	b.n	8005dda <_malloc_r+0x22>
 8005e72:	6862      	ldr	r2, [r4, #4]
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	bf0c      	ite	eq
 8005e78:	6032      	streq	r2, [r6, #0]
 8005e7a:	605a      	strne	r2, [r3, #4]
 8005e7c:	e7ec      	b.n	8005e58 <_malloc_r+0xa0>
 8005e7e:	4623      	mov	r3, r4
 8005e80:	6864      	ldr	r4, [r4, #4]
 8005e82:	e7b2      	b.n	8005dea <_malloc_r+0x32>
 8005e84:	4634      	mov	r4, r6
 8005e86:	6876      	ldr	r6, [r6, #4]
 8005e88:	e7b9      	b.n	8005dfe <_malloc_r+0x46>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	4638      	mov	r0, r7
 8005e90:	f000 fba4 	bl	80065dc <__malloc_unlock>
 8005e94:	e7a1      	b.n	8005dda <_malloc_r+0x22>
 8005e96:	6025      	str	r5, [r4, #0]
 8005e98:	e7de      	b.n	8005e58 <_malloc_r+0xa0>
 8005e9a:	bf00      	nop
 8005e9c:	20004120 	.word	0x20004120

08005ea0 <__sfputc_r>:
 8005ea0:	6893      	ldr	r3, [r2, #8]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	b410      	push	{r4}
 8005ea8:	6093      	str	r3, [r2, #8]
 8005eaa:	da08      	bge.n	8005ebe <__sfputc_r+0x1e>
 8005eac:	6994      	ldr	r4, [r2, #24]
 8005eae:	42a3      	cmp	r3, r4
 8005eb0:	db01      	blt.n	8005eb6 <__sfputc_r+0x16>
 8005eb2:	290a      	cmp	r1, #10
 8005eb4:	d103      	bne.n	8005ebe <__sfputc_r+0x1e>
 8005eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eba:	f7ff bc31 	b.w	8005720 <__swbuf_r>
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	1c58      	adds	r0, r3, #1
 8005ec2:	6010      	str	r0, [r2, #0]
 8005ec4:	7019      	strb	r1, [r3, #0]
 8005ec6:	4608      	mov	r0, r1
 8005ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <__sfputs_r>:
 8005ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	460f      	mov	r7, r1
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	18d5      	adds	r5, r2, r3
 8005ed8:	42ac      	cmp	r4, r5
 8005eda:	d101      	bne.n	8005ee0 <__sfputs_r+0x12>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e007      	b.n	8005ef0 <__sfputs_r+0x22>
 8005ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee4:	463a      	mov	r2, r7
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7ff ffda 	bl	8005ea0 <__sfputc_r>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d1f3      	bne.n	8005ed8 <__sfputs_r+0xa>
 8005ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ef4 <_vfiprintf_r>:
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	460d      	mov	r5, r1
 8005efa:	b09d      	sub	sp, #116	; 0x74
 8005efc:	4614      	mov	r4, r2
 8005efe:	4698      	mov	r8, r3
 8005f00:	4606      	mov	r6, r0
 8005f02:	b118      	cbz	r0, 8005f0c <_vfiprintf_r+0x18>
 8005f04:	6983      	ldr	r3, [r0, #24]
 8005f06:	b90b      	cbnz	r3, 8005f0c <_vfiprintf_r+0x18>
 8005f08:	f7ff fde4 	bl	8005ad4 <__sinit>
 8005f0c:	4b89      	ldr	r3, [pc, #548]	; (8006134 <_vfiprintf_r+0x240>)
 8005f0e:	429d      	cmp	r5, r3
 8005f10:	d11b      	bne.n	8005f4a <_vfiprintf_r+0x56>
 8005f12:	6875      	ldr	r5, [r6, #4]
 8005f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f16:	07d9      	lsls	r1, r3, #31
 8005f18:	d405      	bmi.n	8005f26 <_vfiprintf_r+0x32>
 8005f1a:	89ab      	ldrh	r3, [r5, #12]
 8005f1c:	059a      	lsls	r2, r3, #22
 8005f1e:	d402      	bmi.n	8005f26 <_vfiprintf_r+0x32>
 8005f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f22:	f7ff fe75 	bl	8005c10 <__retarget_lock_acquire_recursive>
 8005f26:	89ab      	ldrh	r3, [r5, #12]
 8005f28:	071b      	lsls	r3, r3, #28
 8005f2a:	d501      	bpl.n	8005f30 <_vfiprintf_r+0x3c>
 8005f2c:	692b      	ldr	r3, [r5, #16]
 8005f2e:	b9eb      	cbnz	r3, 8005f6c <_vfiprintf_r+0x78>
 8005f30:	4629      	mov	r1, r5
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff fc46 	bl	80057c4 <__swsetup_r>
 8005f38:	b1c0      	cbz	r0, 8005f6c <_vfiprintf_r+0x78>
 8005f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f3c:	07dc      	lsls	r4, r3, #31
 8005f3e:	d50e      	bpl.n	8005f5e <_vfiprintf_r+0x6a>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	b01d      	add	sp, #116	; 0x74
 8005f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4a:	4b7b      	ldr	r3, [pc, #492]	; (8006138 <_vfiprintf_r+0x244>)
 8005f4c:	429d      	cmp	r5, r3
 8005f4e:	d101      	bne.n	8005f54 <_vfiprintf_r+0x60>
 8005f50:	68b5      	ldr	r5, [r6, #8]
 8005f52:	e7df      	b.n	8005f14 <_vfiprintf_r+0x20>
 8005f54:	4b79      	ldr	r3, [pc, #484]	; (800613c <_vfiprintf_r+0x248>)
 8005f56:	429d      	cmp	r5, r3
 8005f58:	bf08      	it	eq
 8005f5a:	68f5      	ldreq	r5, [r6, #12]
 8005f5c:	e7da      	b.n	8005f14 <_vfiprintf_r+0x20>
 8005f5e:	89ab      	ldrh	r3, [r5, #12]
 8005f60:	0598      	lsls	r0, r3, #22
 8005f62:	d4ed      	bmi.n	8005f40 <_vfiprintf_r+0x4c>
 8005f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f66:	f7ff fe54 	bl	8005c12 <__retarget_lock_release_recursive>
 8005f6a:	e7e9      	b.n	8005f40 <_vfiprintf_r+0x4c>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f70:	2320      	movs	r3, #32
 8005f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f7a:	2330      	movs	r3, #48	; 0x30
 8005f7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006140 <_vfiprintf_r+0x24c>
 8005f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f84:	f04f 0901 	mov.w	r9, #1
 8005f88:	4623      	mov	r3, r4
 8005f8a:	469a      	mov	sl, r3
 8005f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f90:	b10a      	cbz	r2, 8005f96 <_vfiprintf_r+0xa2>
 8005f92:	2a25      	cmp	r2, #37	; 0x25
 8005f94:	d1f9      	bne.n	8005f8a <_vfiprintf_r+0x96>
 8005f96:	ebba 0b04 	subs.w	fp, sl, r4
 8005f9a:	d00b      	beq.n	8005fb4 <_vfiprintf_r+0xc0>
 8005f9c:	465b      	mov	r3, fp
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7ff ff93 	bl	8005ece <__sfputs_r>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f000 80aa 	beq.w	8006102 <_vfiprintf_r+0x20e>
 8005fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fb0:	445a      	add	r2, fp
 8005fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80a2 	beq.w	8006102 <_vfiprintf_r+0x20e>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fc8:	f10a 0a01 	add.w	sl, sl, #1
 8005fcc:	9304      	str	r3, [sp, #16]
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8005fd6:	4654      	mov	r4, sl
 8005fd8:	2205      	movs	r2, #5
 8005fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fde:	4858      	ldr	r0, [pc, #352]	; (8006140 <_vfiprintf_r+0x24c>)
 8005fe0:	f7fa f916 	bl	8000210 <memchr>
 8005fe4:	9a04      	ldr	r2, [sp, #16]
 8005fe6:	b9d8      	cbnz	r0, 8006020 <_vfiprintf_r+0x12c>
 8005fe8:	06d1      	lsls	r1, r2, #27
 8005fea:	bf44      	itt	mi
 8005fec:	2320      	movmi	r3, #32
 8005fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff2:	0713      	lsls	r3, r2, #28
 8005ff4:	bf44      	itt	mi
 8005ff6:	232b      	movmi	r3, #43	; 0x2b
 8005ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8006000:	2b2a      	cmp	r3, #42	; 0x2a
 8006002:	d015      	beq.n	8006030 <_vfiprintf_r+0x13c>
 8006004:	9a07      	ldr	r2, [sp, #28]
 8006006:	4654      	mov	r4, sl
 8006008:	2000      	movs	r0, #0
 800600a:	f04f 0c0a 	mov.w	ip, #10
 800600e:	4621      	mov	r1, r4
 8006010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006014:	3b30      	subs	r3, #48	; 0x30
 8006016:	2b09      	cmp	r3, #9
 8006018:	d94e      	bls.n	80060b8 <_vfiprintf_r+0x1c4>
 800601a:	b1b0      	cbz	r0, 800604a <_vfiprintf_r+0x156>
 800601c:	9207      	str	r2, [sp, #28]
 800601e:	e014      	b.n	800604a <_vfiprintf_r+0x156>
 8006020:	eba0 0308 	sub.w	r3, r0, r8
 8006024:	fa09 f303 	lsl.w	r3, r9, r3
 8006028:	4313      	orrs	r3, r2
 800602a:	9304      	str	r3, [sp, #16]
 800602c:	46a2      	mov	sl, r4
 800602e:	e7d2      	b.n	8005fd6 <_vfiprintf_r+0xe2>
 8006030:	9b03      	ldr	r3, [sp, #12]
 8006032:	1d19      	adds	r1, r3, #4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	9103      	str	r1, [sp, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	bfbb      	ittet	lt
 800603c:	425b      	neglt	r3, r3
 800603e:	f042 0202 	orrlt.w	r2, r2, #2
 8006042:	9307      	strge	r3, [sp, #28]
 8006044:	9307      	strlt	r3, [sp, #28]
 8006046:	bfb8      	it	lt
 8006048:	9204      	strlt	r2, [sp, #16]
 800604a:	7823      	ldrb	r3, [r4, #0]
 800604c:	2b2e      	cmp	r3, #46	; 0x2e
 800604e:	d10c      	bne.n	800606a <_vfiprintf_r+0x176>
 8006050:	7863      	ldrb	r3, [r4, #1]
 8006052:	2b2a      	cmp	r3, #42	; 0x2a
 8006054:	d135      	bne.n	80060c2 <_vfiprintf_r+0x1ce>
 8006056:	9b03      	ldr	r3, [sp, #12]
 8006058:	1d1a      	adds	r2, r3, #4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	9203      	str	r2, [sp, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	bfb8      	it	lt
 8006062:	f04f 33ff 	movlt.w	r3, #4294967295
 8006066:	3402      	adds	r4, #2
 8006068:	9305      	str	r3, [sp, #20]
 800606a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006150 <_vfiprintf_r+0x25c>
 800606e:	7821      	ldrb	r1, [r4, #0]
 8006070:	2203      	movs	r2, #3
 8006072:	4650      	mov	r0, sl
 8006074:	f7fa f8cc 	bl	8000210 <memchr>
 8006078:	b140      	cbz	r0, 800608c <_vfiprintf_r+0x198>
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	eba0 000a 	sub.w	r0, r0, sl
 8006080:	fa03 f000 	lsl.w	r0, r3, r0
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	4303      	orrs	r3, r0
 8006088:	3401      	adds	r4, #1
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006090:	482c      	ldr	r0, [pc, #176]	; (8006144 <_vfiprintf_r+0x250>)
 8006092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006096:	2206      	movs	r2, #6
 8006098:	f7fa f8ba 	bl	8000210 <memchr>
 800609c:	2800      	cmp	r0, #0
 800609e:	d03f      	beq.n	8006120 <_vfiprintf_r+0x22c>
 80060a0:	4b29      	ldr	r3, [pc, #164]	; (8006148 <_vfiprintf_r+0x254>)
 80060a2:	bb1b      	cbnz	r3, 80060ec <_vfiprintf_r+0x1f8>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	3307      	adds	r3, #7
 80060a8:	f023 0307 	bic.w	r3, r3, #7
 80060ac:	3308      	adds	r3, #8
 80060ae:	9303      	str	r3, [sp, #12]
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	443b      	add	r3, r7
 80060b4:	9309      	str	r3, [sp, #36]	; 0x24
 80060b6:	e767      	b.n	8005f88 <_vfiprintf_r+0x94>
 80060b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80060bc:	460c      	mov	r4, r1
 80060be:	2001      	movs	r0, #1
 80060c0:	e7a5      	b.n	800600e <_vfiprintf_r+0x11a>
 80060c2:	2300      	movs	r3, #0
 80060c4:	3401      	adds	r4, #1
 80060c6:	9305      	str	r3, [sp, #20]
 80060c8:	4619      	mov	r1, r3
 80060ca:	f04f 0c0a 	mov.w	ip, #10
 80060ce:	4620      	mov	r0, r4
 80060d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d4:	3a30      	subs	r2, #48	; 0x30
 80060d6:	2a09      	cmp	r2, #9
 80060d8:	d903      	bls.n	80060e2 <_vfiprintf_r+0x1ee>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0c5      	beq.n	800606a <_vfiprintf_r+0x176>
 80060de:	9105      	str	r1, [sp, #20]
 80060e0:	e7c3      	b.n	800606a <_vfiprintf_r+0x176>
 80060e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e6:	4604      	mov	r4, r0
 80060e8:	2301      	movs	r3, #1
 80060ea:	e7f0      	b.n	80060ce <_vfiprintf_r+0x1da>
 80060ec:	ab03      	add	r3, sp, #12
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	462a      	mov	r2, r5
 80060f2:	4b16      	ldr	r3, [pc, #88]	; (800614c <_vfiprintf_r+0x258>)
 80060f4:	a904      	add	r1, sp, #16
 80060f6:	4630      	mov	r0, r6
 80060f8:	f3af 8000 	nop.w
 80060fc:	4607      	mov	r7, r0
 80060fe:	1c78      	adds	r0, r7, #1
 8006100:	d1d6      	bne.n	80060b0 <_vfiprintf_r+0x1bc>
 8006102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006104:	07d9      	lsls	r1, r3, #31
 8006106:	d405      	bmi.n	8006114 <_vfiprintf_r+0x220>
 8006108:	89ab      	ldrh	r3, [r5, #12]
 800610a:	059a      	lsls	r2, r3, #22
 800610c:	d402      	bmi.n	8006114 <_vfiprintf_r+0x220>
 800610e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006110:	f7ff fd7f 	bl	8005c12 <__retarget_lock_release_recursive>
 8006114:	89ab      	ldrh	r3, [r5, #12]
 8006116:	065b      	lsls	r3, r3, #25
 8006118:	f53f af12 	bmi.w	8005f40 <_vfiprintf_r+0x4c>
 800611c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800611e:	e711      	b.n	8005f44 <_vfiprintf_r+0x50>
 8006120:	ab03      	add	r3, sp, #12
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	462a      	mov	r2, r5
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <_vfiprintf_r+0x258>)
 8006128:	a904      	add	r1, sp, #16
 800612a:	4630      	mov	r0, r6
 800612c:	f000 f880 	bl	8006230 <_printf_i>
 8006130:	e7e4      	b.n	80060fc <_vfiprintf_r+0x208>
 8006132:	bf00      	nop
 8006134:	0800675c 	.word	0x0800675c
 8006138:	0800677c 	.word	0x0800677c
 800613c:	0800673c 	.word	0x0800673c
 8006140:	0800679c 	.word	0x0800679c
 8006144:	080067a6 	.word	0x080067a6
 8006148:	00000000 	.word	0x00000000
 800614c:	08005ecf 	.word	0x08005ecf
 8006150:	080067a2 	.word	0x080067a2

08006154 <_printf_common>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	4616      	mov	r6, r2
 800615a:	4699      	mov	r9, r3
 800615c:	688a      	ldr	r2, [r1, #8]
 800615e:	690b      	ldr	r3, [r1, #16]
 8006160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006164:	4293      	cmp	r3, r2
 8006166:	bfb8      	it	lt
 8006168:	4613      	movlt	r3, r2
 800616a:	6033      	str	r3, [r6, #0]
 800616c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006170:	4607      	mov	r7, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b10a      	cbz	r2, 800617a <_printf_common+0x26>
 8006176:	3301      	adds	r3, #1
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	0699      	lsls	r1, r3, #26
 800617e:	bf42      	ittt	mi
 8006180:	6833      	ldrmi	r3, [r6, #0]
 8006182:	3302      	addmi	r3, #2
 8006184:	6033      	strmi	r3, [r6, #0]
 8006186:	6825      	ldr	r5, [r4, #0]
 8006188:	f015 0506 	ands.w	r5, r5, #6
 800618c:	d106      	bne.n	800619c <_printf_common+0x48>
 800618e:	f104 0a19 	add.w	sl, r4, #25
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	6832      	ldr	r2, [r6, #0]
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	42ab      	cmp	r3, r5
 800619a:	dc26      	bgt.n	80061ea <_printf_common+0x96>
 800619c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061a0:	1e13      	subs	r3, r2, #0
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	bf18      	it	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	0692      	lsls	r2, r2, #26
 80061aa:	d42b      	bmi.n	8006204 <_printf_common+0xb0>
 80061ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b0:	4649      	mov	r1, r9
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c0      	blx	r8
 80061b6:	3001      	adds	r0, #1
 80061b8:	d01e      	beq.n	80061f8 <_printf_common+0xa4>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	68e5      	ldr	r5, [r4, #12]
 80061be:	6832      	ldr	r2, [r6, #0]
 80061c0:	f003 0306 	and.w	r3, r3, #6
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	bf08      	it	eq
 80061c8:	1aad      	subeq	r5, r5, r2
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	6922      	ldr	r2, [r4, #16]
 80061ce:	bf0c      	ite	eq
 80061d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d4:	2500      	movne	r5, #0
 80061d6:	4293      	cmp	r3, r2
 80061d8:	bfc4      	itt	gt
 80061da:	1a9b      	subgt	r3, r3, r2
 80061dc:	18ed      	addgt	r5, r5, r3
 80061de:	2600      	movs	r6, #0
 80061e0:	341a      	adds	r4, #26
 80061e2:	42b5      	cmp	r5, r6
 80061e4:	d11a      	bne.n	800621c <_printf_common+0xc8>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e008      	b.n	80061fc <_printf_common+0xa8>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4652      	mov	r2, sl
 80061ee:	4649      	mov	r1, r9
 80061f0:	4638      	mov	r0, r7
 80061f2:	47c0      	blx	r8
 80061f4:	3001      	adds	r0, #1
 80061f6:	d103      	bne.n	8006200 <_printf_common+0xac>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	3501      	adds	r5, #1
 8006202:	e7c6      	b.n	8006192 <_printf_common+0x3e>
 8006204:	18e1      	adds	r1, r4, r3
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	2030      	movs	r0, #48	; 0x30
 800620a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800620e:	4422      	add	r2, r4
 8006210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006218:	3302      	adds	r3, #2
 800621a:	e7c7      	b.n	80061ac <_printf_common+0x58>
 800621c:	2301      	movs	r3, #1
 800621e:	4622      	mov	r2, r4
 8006220:	4649      	mov	r1, r9
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	3001      	adds	r0, #1
 8006228:	d0e6      	beq.n	80061f8 <_printf_common+0xa4>
 800622a:	3601      	adds	r6, #1
 800622c:	e7d9      	b.n	80061e2 <_printf_common+0x8e>
	...

08006230 <_printf_i>:
 8006230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	7e0f      	ldrb	r7, [r1, #24]
 8006236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006238:	2f78      	cmp	r7, #120	; 0x78
 800623a:	4691      	mov	r9, r2
 800623c:	4680      	mov	r8, r0
 800623e:	460c      	mov	r4, r1
 8006240:	469a      	mov	sl, r3
 8006242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006246:	d807      	bhi.n	8006258 <_printf_i+0x28>
 8006248:	2f62      	cmp	r7, #98	; 0x62
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x32>
 800624c:	2f00      	cmp	r7, #0
 800624e:	f000 80d8 	beq.w	8006402 <_printf_i+0x1d2>
 8006252:	2f58      	cmp	r7, #88	; 0x58
 8006254:	f000 80a3 	beq.w	800639e <_printf_i+0x16e>
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006260:	e03a      	b.n	80062d8 <_printf_i+0xa8>
 8006262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006266:	2b15      	cmp	r3, #21
 8006268:	d8f6      	bhi.n	8006258 <_printf_i+0x28>
 800626a:	a101      	add	r1, pc, #4	; (adr r1, 8006270 <_printf_i+0x40>)
 800626c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062dd 	.word	0x080062dd
 8006278:	08006259 	.word	0x08006259
 800627c:	08006259 	.word	0x08006259
 8006280:	08006259 	.word	0x08006259
 8006284:	08006259 	.word	0x08006259
 8006288:	080062dd 	.word	0x080062dd
 800628c:	08006259 	.word	0x08006259
 8006290:	08006259 	.word	0x08006259
 8006294:	08006259 	.word	0x08006259
 8006298:	08006259 	.word	0x08006259
 800629c:	080063e9 	.word	0x080063e9
 80062a0:	0800630d 	.word	0x0800630d
 80062a4:	080063cb 	.word	0x080063cb
 80062a8:	08006259 	.word	0x08006259
 80062ac:	08006259 	.word	0x08006259
 80062b0:	0800640b 	.word	0x0800640b
 80062b4:	08006259 	.word	0x08006259
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	08006259 	.word	0x08006259
 80062c0:	08006259 	.word	0x08006259
 80062c4:	080063d3 	.word	0x080063d3
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	602a      	str	r2, [r5, #0]
 80062d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062d8:	2301      	movs	r3, #1
 80062da:	e0a3      	b.n	8006424 <_printf_i+0x1f4>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	6829      	ldr	r1, [r5, #0]
 80062e0:	0606      	lsls	r6, r0, #24
 80062e2:	f101 0304 	add.w	r3, r1, #4
 80062e6:	d50a      	bpl.n	80062fe <_printf_i+0xce>
 80062e8:	680e      	ldr	r6, [r1, #0]
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	da03      	bge.n	80062f8 <_printf_i+0xc8>
 80062f0:	232d      	movs	r3, #45	; 0x2d
 80062f2:	4276      	negs	r6, r6
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	485e      	ldr	r0, [pc, #376]	; (8006474 <_printf_i+0x244>)
 80062fa:	230a      	movs	r3, #10
 80062fc:	e019      	b.n	8006332 <_printf_i+0x102>
 80062fe:	680e      	ldr	r6, [r1, #0]
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006306:	bf18      	it	ne
 8006308:	b236      	sxthne	r6, r6
 800630a:	e7ef      	b.n	80062ec <_printf_i+0xbc>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	1d19      	adds	r1, r3, #4
 8006312:	6029      	str	r1, [r5, #0]
 8006314:	0601      	lsls	r1, r0, #24
 8006316:	d501      	bpl.n	800631c <_printf_i+0xec>
 8006318:	681e      	ldr	r6, [r3, #0]
 800631a:	e002      	b.n	8006322 <_printf_i+0xf2>
 800631c:	0646      	lsls	r6, r0, #25
 800631e:	d5fb      	bpl.n	8006318 <_printf_i+0xe8>
 8006320:	881e      	ldrh	r6, [r3, #0]
 8006322:	4854      	ldr	r0, [pc, #336]	; (8006474 <_printf_i+0x244>)
 8006324:	2f6f      	cmp	r7, #111	; 0x6f
 8006326:	bf0c      	ite	eq
 8006328:	2308      	moveq	r3, #8
 800632a:	230a      	movne	r3, #10
 800632c:	2100      	movs	r1, #0
 800632e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006332:	6865      	ldr	r5, [r4, #4]
 8006334:	60a5      	str	r5, [r4, #8]
 8006336:	2d00      	cmp	r5, #0
 8006338:	bfa2      	ittt	ge
 800633a:	6821      	ldrge	r1, [r4, #0]
 800633c:	f021 0104 	bicge.w	r1, r1, #4
 8006340:	6021      	strge	r1, [r4, #0]
 8006342:	b90e      	cbnz	r6, 8006348 <_printf_i+0x118>
 8006344:	2d00      	cmp	r5, #0
 8006346:	d04d      	beq.n	80063e4 <_printf_i+0x1b4>
 8006348:	4615      	mov	r5, r2
 800634a:	fbb6 f1f3 	udiv	r1, r6, r3
 800634e:	fb03 6711 	mls	r7, r3, r1, r6
 8006352:	5dc7      	ldrb	r7, [r0, r7]
 8006354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006358:	4637      	mov	r7, r6
 800635a:	42bb      	cmp	r3, r7
 800635c:	460e      	mov	r6, r1
 800635e:	d9f4      	bls.n	800634a <_printf_i+0x11a>
 8006360:	2b08      	cmp	r3, #8
 8006362:	d10b      	bne.n	800637c <_printf_i+0x14c>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	07de      	lsls	r6, r3, #31
 8006368:	d508      	bpl.n	800637c <_printf_i+0x14c>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	6861      	ldr	r1, [r4, #4]
 800636e:	4299      	cmp	r1, r3
 8006370:	bfde      	ittt	le
 8006372:	2330      	movle	r3, #48	; 0x30
 8006374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006378:	f105 35ff 	addle.w	r5, r5, #4294967295
 800637c:	1b52      	subs	r2, r2, r5
 800637e:	6122      	str	r2, [r4, #16]
 8006380:	f8cd a000 	str.w	sl, [sp]
 8006384:	464b      	mov	r3, r9
 8006386:	aa03      	add	r2, sp, #12
 8006388:	4621      	mov	r1, r4
 800638a:	4640      	mov	r0, r8
 800638c:	f7ff fee2 	bl	8006154 <_printf_common>
 8006390:	3001      	adds	r0, #1
 8006392:	d14c      	bne.n	800642e <_printf_i+0x1fe>
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	b004      	add	sp, #16
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639e:	4835      	ldr	r0, [pc, #212]	; (8006474 <_printf_i+0x244>)
 80063a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063a4:	6829      	ldr	r1, [r5, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80063ac:	6029      	str	r1, [r5, #0]
 80063ae:	061d      	lsls	r5, r3, #24
 80063b0:	d514      	bpl.n	80063dc <_printf_i+0x1ac>
 80063b2:	07df      	lsls	r7, r3, #31
 80063b4:	bf44      	itt	mi
 80063b6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ba:	6023      	strmi	r3, [r4, #0]
 80063bc:	b91e      	cbnz	r6, 80063c6 <_printf_i+0x196>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	f023 0320 	bic.w	r3, r3, #32
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	2310      	movs	r3, #16
 80063c8:	e7b0      	b.n	800632c <_printf_i+0xfc>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f043 0320 	orr.w	r3, r3, #32
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	2378      	movs	r3, #120	; 0x78
 80063d4:	4828      	ldr	r0, [pc, #160]	; (8006478 <_printf_i+0x248>)
 80063d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063da:	e7e3      	b.n	80063a4 <_printf_i+0x174>
 80063dc:	0659      	lsls	r1, r3, #25
 80063de:	bf48      	it	mi
 80063e0:	b2b6      	uxthmi	r6, r6
 80063e2:	e7e6      	b.n	80063b2 <_printf_i+0x182>
 80063e4:	4615      	mov	r5, r2
 80063e6:	e7bb      	b.n	8006360 <_printf_i+0x130>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	6826      	ldr	r6, [r4, #0]
 80063ec:	6961      	ldr	r1, [r4, #20]
 80063ee:	1d18      	adds	r0, r3, #4
 80063f0:	6028      	str	r0, [r5, #0]
 80063f2:	0635      	lsls	r5, r6, #24
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0x1cc>
 80063f8:	6019      	str	r1, [r3, #0]
 80063fa:	e002      	b.n	8006402 <_printf_i+0x1d2>
 80063fc:	0670      	lsls	r0, r6, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0x1c8>
 8006400:	8019      	strh	r1, [r3, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	4615      	mov	r5, r2
 8006408:	e7ba      	b.n	8006380 <_printf_i+0x150>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	602a      	str	r2, [r5, #0]
 8006410:	681d      	ldr	r5, [r3, #0]
 8006412:	6862      	ldr	r2, [r4, #4]
 8006414:	2100      	movs	r1, #0
 8006416:	4628      	mov	r0, r5
 8006418:	f7f9 fefa 	bl	8000210 <memchr>
 800641c:	b108      	cbz	r0, 8006422 <_printf_i+0x1f2>
 800641e:	1b40      	subs	r0, r0, r5
 8006420:	6060      	str	r0, [r4, #4]
 8006422:	6863      	ldr	r3, [r4, #4]
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	2300      	movs	r3, #0
 8006428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800642c:	e7a8      	b.n	8006380 <_printf_i+0x150>
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	462a      	mov	r2, r5
 8006432:	4649      	mov	r1, r9
 8006434:	4640      	mov	r0, r8
 8006436:	47d0      	blx	sl
 8006438:	3001      	adds	r0, #1
 800643a:	d0ab      	beq.n	8006394 <_printf_i+0x164>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	079b      	lsls	r3, r3, #30
 8006440:	d413      	bmi.n	800646a <_printf_i+0x23a>
 8006442:	68e0      	ldr	r0, [r4, #12]
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	4298      	cmp	r0, r3
 8006448:	bfb8      	it	lt
 800644a:	4618      	movlt	r0, r3
 800644c:	e7a4      	b.n	8006398 <_printf_i+0x168>
 800644e:	2301      	movs	r3, #1
 8006450:	4632      	mov	r2, r6
 8006452:	4649      	mov	r1, r9
 8006454:	4640      	mov	r0, r8
 8006456:	47d0      	blx	sl
 8006458:	3001      	adds	r0, #1
 800645a:	d09b      	beq.n	8006394 <_printf_i+0x164>
 800645c:	3501      	adds	r5, #1
 800645e:	68e3      	ldr	r3, [r4, #12]
 8006460:	9903      	ldr	r1, [sp, #12]
 8006462:	1a5b      	subs	r3, r3, r1
 8006464:	42ab      	cmp	r3, r5
 8006466:	dcf2      	bgt.n	800644e <_printf_i+0x21e>
 8006468:	e7eb      	b.n	8006442 <_printf_i+0x212>
 800646a:	2500      	movs	r5, #0
 800646c:	f104 0619 	add.w	r6, r4, #25
 8006470:	e7f5      	b.n	800645e <_printf_i+0x22e>
 8006472:	bf00      	nop
 8006474:	080067ad 	.word	0x080067ad
 8006478:	080067be 	.word	0x080067be

0800647c <_sbrk_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d06      	ldr	r5, [pc, #24]	; (8006498 <_sbrk_r+0x1c>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	f7fa fbb2 	bl	8000bf0 <_sbrk>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_sbrk_r+0x1a>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_sbrk_r+0x1a>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20004128 	.word	0x20004128

0800649c <__sread>:
 800649c:	b510      	push	{r4, lr}
 800649e:	460c      	mov	r4, r1
 80064a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a4:	f000 f8a0 	bl	80065e8 <_read_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	bfab      	itete	ge
 80064ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064ae:	89a3      	ldrhlt	r3, [r4, #12]
 80064b0:	181b      	addge	r3, r3, r0
 80064b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064b6:	bfac      	ite	ge
 80064b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80064ba:	81a3      	strhlt	r3, [r4, #12]
 80064bc:	bd10      	pop	{r4, pc}

080064be <__swrite>:
 80064be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c2:	461f      	mov	r7, r3
 80064c4:	898b      	ldrh	r3, [r1, #12]
 80064c6:	05db      	lsls	r3, r3, #23
 80064c8:	4605      	mov	r5, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	4616      	mov	r6, r2
 80064ce:	d505      	bpl.n	80064dc <__swrite+0x1e>
 80064d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d4:	2302      	movs	r3, #2
 80064d6:	2200      	movs	r2, #0
 80064d8:	f000 f868 	bl	80065ac <_lseek_r>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	4632      	mov	r2, r6
 80064ea:	463b      	mov	r3, r7
 80064ec:	4628      	mov	r0, r5
 80064ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f2:	f000 b817 	b.w	8006524 <_write_r>

080064f6 <__sseek>:
 80064f6:	b510      	push	{r4, lr}
 80064f8:	460c      	mov	r4, r1
 80064fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fe:	f000 f855 	bl	80065ac <_lseek_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	bf15      	itete	ne
 8006508:	6560      	strne	r0, [r4, #84]	; 0x54
 800650a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800650e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006512:	81a3      	strheq	r3, [r4, #12]
 8006514:	bf18      	it	ne
 8006516:	81a3      	strhne	r3, [r4, #12]
 8006518:	bd10      	pop	{r4, pc}

0800651a <__sclose>:
 800651a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651e:	f000 b813 	b.w	8006548 <_close_r>
	...

08006524 <_write_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4d07      	ldr	r5, [pc, #28]	; (8006544 <_write_r+0x20>)
 8006528:	4604      	mov	r4, r0
 800652a:	4608      	mov	r0, r1
 800652c:	4611      	mov	r1, r2
 800652e:	2200      	movs	r2, #0
 8006530:	602a      	str	r2, [r5, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	f7fa fb0b 	bl	8000b4e <_write>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_write_r+0x1e>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_write_r+0x1e>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	20004128 	.word	0x20004128

08006548 <_close_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	; (8006564 <_close_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fa fb17 	bl	8000b86 <_close>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_close_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_close_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	20004128 	.word	0x20004128

08006568 <_fstat_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	; (8006588 <_fstat_r+0x20>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	4611      	mov	r1, r2
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	f7fa fb12 	bl	8000b9e <_fstat>
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	d102      	bne.n	8006584 <_fstat_r+0x1c>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	b103      	cbz	r3, 8006584 <_fstat_r+0x1c>
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	bd38      	pop	{r3, r4, r5, pc}
 8006586:	bf00      	nop
 8006588:	20004128 	.word	0x20004128

0800658c <_isatty_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d06      	ldr	r5, [pc, #24]	; (80065a8 <_isatty_r+0x1c>)
 8006590:	2300      	movs	r3, #0
 8006592:	4604      	mov	r4, r0
 8006594:	4608      	mov	r0, r1
 8006596:	602b      	str	r3, [r5, #0]
 8006598:	f7fa fb11 	bl	8000bbe <_isatty>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d102      	bne.n	80065a6 <_isatty_r+0x1a>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	b103      	cbz	r3, 80065a6 <_isatty_r+0x1a>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	20004128 	.word	0x20004128

080065ac <_lseek_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d07      	ldr	r5, [pc, #28]	; (80065cc <_lseek_r+0x20>)
 80065b0:	4604      	mov	r4, r0
 80065b2:	4608      	mov	r0, r1
 80065b4:	4611      	mov	r1, r2
 80065b6:	2200      	movs	r2, #0
 80065b8:	602a      	str	r2, [r5, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f7fa fb0a 	bl	8000bd4 <_lseek>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_lseek_r+0x1e>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_lseek_r+0x1e>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	20004128 	.word	0x20004128

080065d0 <__malloc_lock>:
 80065d0:	4801      	ldr	r0, [pc, #4]	; (80065d8 <__malloc_lock+0x8>)
 80065d2:	f7ff bb1d 	b.w	8005c10 <__retarget_lock_acquire_recursive>
 80065d6:	bf00      	nop
 80065d8:	2000411c 	.word	0x2000411c

080065dc <__malloc_unlock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	; (80065e4 <__malloc_unlock+0x8>)
 80065de:	f7ff bb18 	b.w	8005c12 <__retarget_lock_release_recursive>
 80065e2:	bf00      	nop
 80065e4:	2000411c 	.word	0x2000411c

080065e8 <_read_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	; (8006608 <_read_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fa fa8c 	bl	8000b14 <_read>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_read_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_read_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20004128 	.word	0x20004128

0800660c <_init>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr

08006618 <_fini>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr
