
NTR_SHELL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045bc  080045bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c4  080045c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004094  20000010  080045dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040a4  080045dc  000240a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001451c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d22  00000000  00000000  0003455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00037280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00038400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270d2  00000000  00000000  00039448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f66  00000000  00000000  0006051a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f71d8  00000000  00000000  00075480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  0016c6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800455c 	.word	0x0800455c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800455c 	.word	0x0800455c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000030 	.word	0x20000030
 8000544:	20000084 	.word	0x20000084

08000548 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_FREERTOS_Init+0x30>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f002 fda7 	bl	80030b8 <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <MX_FREERTOS_Init+0x34>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bdb0      	pop	{r4, r5, r7, pc}
 8000578:	08004580 	.word	0x08004580
 800057c:	2000002c 	.word	0x2000002c

08000580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f002 fde1 	bl	8003150 <osDelay>
 800058e:	e7fb      	b.n	8000588 <StartDefaultTask+0x8>

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a22      	ldr	r2, [pc, #136]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_GPIO_Init+0xa4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2102      	movs	r1, #2
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0xa8>)
 800060c:	f000 fcf4 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_GPIO_Init+0xa8>)
 8000628:	f000 fb3a 	bl	8000ca0 <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40022000 	.word	0x40022000

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fa1f 	bl	8000a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f80a 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ffa2 	bl	8000590 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800064c:	f000 f93e 	bl	80008cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000650:	f7ff ff7a 	bl	8000548 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000654:	f002 fd29 	bl	80030aa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0x1c>
	...

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 ff6e 	bl	800454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <SystemClock_Config+0xd4>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xd4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a25      	ldr	r2, [pc, #148]	; (8000734 <SystemClock_Config+0xd8>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006c4:	2319      	movs	r3, #25
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006c8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fcf6 	bl	80010cc <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006e6:	f000 f839 	bl	800075c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ea:	f000 fc9f 	bl	800102c <HAL_PWREx_EnableOverDrive>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f4:	f000 f832 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2107      	movs	r1, #7
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ff7c 	bl	8001614 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000722:	f000 f81b 	bl	800075c <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074a:	f000 f9a7 	bl	8000a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40001000 	.word	0x40001000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	210f      	movs	r1, #15
 80007a2:	f06f 0001 	mvn.w	r0, #1
 80007a6:	f000 fa51 	bl	8000c4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	2036      	movs	r0, #54	; 0x36
 80007ce:	f000 fa3d 	bl	8000c4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007d2:	2036      	movs	r0, #54	; 0x36
 80007d4:	f000 fa56 	bl	8000c84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <HAL_InitTick+0xa0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <HAL_InitTick+0xa0>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_InitTick+0xa0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f0:	f107 0210 	add.w	r2, r7, #16
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f8f0 	bl	80019e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000800:	f001 f8c6 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8000804:	4603      	mov	r3, r0
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <HAL_InitTick+0xa4>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0c9b      	lsrs	r3, r3, #18
 8000814:	3b01      	subs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_InitTick+0xa8>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <HAL_InitTick+0xac>)
 800081c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_InitTick+0xa8>)
 8000820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000824:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_InitTick+0xa8>)
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_InitTick+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_InitTick+0xa8>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <HAL_InitTick+0xa8>)
 800083a:	f001 fcf3 	bl	8002224 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <HAL_InitTick+0xa8>)
 8000846:	f001 fd4f 	bl	80022e8 <HAL_TIM_Base_Start_IT>
 800084a:	4603      	mov	r3, r0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	431bde83 	.word	0x431bde83
 8000860:	20000284 	.word	0x20000284
 8000864:	40001000 	.word	0x40001000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <TIM6_DAC_IRQHandler+0x10>)
 800089a:	f001 fd9d 	bl	80023d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000284 	.word	0x20000284

080008a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART1_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000910:	f001 ff68 	bl	80027e4 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f7ff ff1f 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200002d0 	.word	0x200002d0
 8000928:	40011000 	.word	0x40011000

0800092c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0ac      	sub	sp, #176	; 0xb0
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	2284      	movs	r2, #132	; 0x84
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fdfd 	bl	800454c <memset>
  if(uartHandle->Instance==USART1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d15c      	bne.n	8000a16 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800095c:	2340      	movs	r3, #64	; 0x40
 800095e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000960:	2300      	movs	r3, #0
 8000962:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f86b 	bl	8001a44 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000974:	f7ff fef2 	bl	800075c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	6453      	str	r3, [r2, #68]	; 0x44
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 8000986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d8:	2307      	movs	r3, #7
 80009da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e2:	4619      	mov	r1, r3
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009e6:	f000 f95b 	bl	8000ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a04:	2307      	movs	r3, #7
 8000a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <HAL_UART_MspInit+0x100>)
 8000a12:	f000 f945 	bl	8000ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a16:	bf00      	nop
 8000a18:	37b0      	adds	r7, #176	; 0xb0
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40011000 	.word	0x40011000
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40020000 	.word	0x40020000

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5a:	f7ff ff25 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f003 fd51 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fdeb 	bl	800063c <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a74:	080045cc 	.word	0x080045cc
  ldr r2, =_sbss
 8000a78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a7c:	200040a4 	.word	0x200040a4

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>

08000a82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f000 f8d5 	bl	8000c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	f7ff fe93 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a92:	f7ff fe69 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000354 	.word	0x20000354

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000354 	.word	0x20000354

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <__NVIC_SetPriorityGrouping+0x40>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x40>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	05fa0000 	.word	0x05fa0000

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff4c 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5e:	f7ff ff61 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f7ff ffb1 	bl	8000bd0 <NVIC_EncodePriority>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff80 	bl	8000b7c <__NVIC_SetPriority>
}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff54 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	e175      	b.n	8000fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	f040 8164 	bne.w	8000fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d005      	beq.n	8000cf6 <HAL_GPIO_Init+0x56>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d130      	bne.n	8000d58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	091b      	lsrs	r3, r3, #4
 8000d42:	f003 0201 	and.w	r2, r3, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d017      	beq.n	8000d94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d123      	bne.n	8000de8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	08da      	lsrs	r2, r3, #3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3208      	adds	r2, #8
 8000da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0203 	and.w	r2, r3, #3
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80be 	beq.w	8000fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b66      	ldr	r3, [pc, #408]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a65      	ldr	r2, [pc, #404]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e42:	4a61      	ldr	r2, [pc, #388]	; (8000fc8 <HAL_GPIO_Init+0x328>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a58      	ldr	r2, [pc, #352]	; (8000fcc <HAL_GPIO_Init+0x32c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d037      	beq.n	8000ede <HAL_GPIO_Init+0x23e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a57      	ldr	r2, [pc, #348]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d031      	beq.n	8000eda <HAL_GPIO_Init+0x23a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a56      	ldr	r2, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d02b      	beq.n	8000ed6 <HAL_GPIO_Init+0x236>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a55      	ldr	r2, [pc, #340]	; (8000fd8 <HAL_GPIO_Init+0x338>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d025      	beq.n	8000ed2 <HAL_GPIO_Init+0x232>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a54      	ldr	r2, [pc, #336]	; (8000fdc <HAL_GPIO_Init+0x33c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d01f      	beq.n	8000ece <HAL_GPIO_Init+0x22e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a53      	ldr	r2, [pc, #332]	; (8000fe0 <HAL_GPIO_Init+0x340>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0x22a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a52      	ldr	r2, [pc, #328]	; (8000fe4 <HAL_GPIO_Init+0x344>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a51      	ldr	r2, [pc, #324]	; (8000fe8 <HAL_GPIO_Init+0x348>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x222>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a50      	ldr	r2, [pc, #320]	; (8000fec <HAL_GPIO_Init+0x34c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x21e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x350>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x21a>
 8000eb6:	2309      	movs	r3, #9
 8000eb8:	e012      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000eba:	230a      	movs	r3, #10
 8000ebc:	e010      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x240>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ef0:	4935      	ldr	r1, [pc, #212]	; (8000fc8 <HAL_GPIO_Init+0x328>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f22:	4a34      	ldr	r2, [pc, #208]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f28:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f76:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_GPIO_Init+0x354>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f67f ae86 	bls.w	8000cc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40021400 	.word	0x40021400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40021c00 	.word	0x40021c00
 8000fec:	40022000 	.word	0x40022000
 8000ff0:	40022400 	.word	0x40022400
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001014:	e003      	b.n	800101e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800105a:	f7ff fd33 	bl	8000ac4 <HAL_GetTick>
 800105e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001060:	e009      	b.n	8001076 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001062:	f7ff fd2f 	bl	8000ac4 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001070:	d901      	bls.n	8001076 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e022      	b.n	80010bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001082:	d1ee      	bne.n	8001062 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001090:	f7ff fd18 	bl	8000ac4 <HAL_GetTick>
 8001094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001096:	e009      	b.n	80010ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001098:	f7ff fd14 	bl	8000ac4 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a6:	d901      	bls.n	80010ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e007      	b.n	80010bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010b8:	d1ee      	bne.n	8001098 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e291      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8087 	beq.w	80011fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f0:	4b96      	ldr	r3, [pc, #600]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00c      	beq.n	8001116 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fc:	4b93      	ldr	r3, [pc, #588]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d112      	bne.n	800112e <HAL_RCC_OscConfig+0x62>
 8001108:	4b90      	ldr	r3, [pc, #576]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001114:	d10b      	bne.n	800112e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001116:	4b8d      	ldr	r3, [pc, #564]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d06c      	beq.n	80011fc <HAL_RCC_OscConfig+0x130>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d168      	bne.n	80011fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e26b      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x7a>
 8001138:	4b84      	ldr	r3, [pc, #528]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a83      	ldr	r2, [pc, #524]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e02e      	b.n	80011a4 <HAL_RCC_OscConfig+0xd8>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x9c>
 800114e:	4b7f      	ldr	r3, [pc, #508]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7e      	ldr	r2, [pc, #504]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b7c      	ldr	r3, [pc, #496]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7b      	ldr	r2, [pc, #492]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xd8>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0xc0>
 8001172:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a75      	ldr	r2, [pc, #468]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b73      	ldr	r3, [pc, #460]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a72      	ldr	r2, [pc, #456]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xd8>
 800118c:	4b6f      	ldr	r3, [pc, #444]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6e      	ldr	r2, [pc, #440]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b6c      	ldr	r3, [pc, #432]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6b      	ldr	r2, [pc, #428]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc8a 	bl	8000ac4 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fc86 	bl	8000ac4 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e21f      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b61      	ldr	r3, [pc, #388]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe8>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fc76 	bl	8000ac4 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fc72 	bl	8000ac4 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e20b      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b57      	ldr	r3, [pc, #348]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x110>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d069      	beq.n	80012de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800120a:	4b50      	ldr	r3, [pc, #320]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b4d      	ldr	r3, [pc, #308]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x190>
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x17a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1df      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	493d      	ldr	r1, [pc, #244]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e040      	b.n	80012de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d023      	beq.n	80012ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b39      	ldr	r3, [pc, #228]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a38      	ldr	r2, [pc, #224]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fc28 	bl	8000ac4 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fc24 	bl	8000ac4 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1bd      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4929      	ldr	r1, [pc, #164]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
 80012aa:	e018      	b.n	80012de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a26      	ldr	r2, [pc, #152]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc04 	bl	8000ac4 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc00 	bl	8000ac4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e199      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d038      	beq.n	800135c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d019      	beq.n	8001326 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80012f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff fbe1 	bl	8000ac4 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fbdd 	bl	8000ac4 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e176      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800131a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x23a>
 8001324:	e01a      	b.n	800135c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001332:	f7ff fbc7 	bl	8000ac4 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133a:	f7ff fbc3 	bl	8000ac4 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d903      	bls.n	8001350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e15c      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
 800134c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b91      	ldr	r3, [pc, #580]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ee      	bne.n	800133a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a4 	beq.w	80014b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136a:	4b8b      	ldr	r3, [pc, #556]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10d      	bne.n	8001392 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a87      	ldr	r2, [pc, #540]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b85      	ldr	r3, [pc, #532]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001392:	4b82      	ldr	r3, [pc, #520]	; (800159c <HAL_RCC_OscConfig+0x4d0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d118      	bne.n	80013d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x4d0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a7e      	ldr	r2, [pc, #504]	; (800159c <HAL_RCC_OscConfig+0x4d0>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fb8b 	bl	8000ac4 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff fb87 	bl	8000ac4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b64      	cmp	r3, #100	; 0x64
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e120      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c4:	4b75      	ldr	r3, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x4d0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x31a>
 80013d8:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a6e      	ldr	r2, [pc, #440]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	e02d      	b.n	8001442 <HAL_RCC_OscConfig+0x376>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x33c>
 80013ee:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a69      	ldr	r2, [pc, #420]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	4b67      	ldr	r3, [pc, #412]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a66      	ldr	r2, [pc, #408]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001400:	f023 0304 	bic.w	r3, r3, #4
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	e01c      	b.n	8001442 <HAL_RCC_OscConfig+0x376>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b05      	cmp	r3, #5
 800140e:	d10c      	bne.n	800142a <HAL_RCC_OscConfig+0x35e>
 8001410:	4b61      	ldr	r3, [pc, #388]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a60      	ldr	r2, [pc, #384]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
 800141c:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a5d      	ldr	r2, [pc, #372]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	e00b      	b.n	8001442 <HAL_RCC_OscConfig+0x376>
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a5a      	ldr	r2, [pc, #360]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
 8001436:	4b58      	ldr	r3, [pc, #352]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a57      	ldr	r2, [pc, #348]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800143c:	f023 0304 	bic.w	r3, r3, #4
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d015      	beq.n	8001476 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff fb3b 	bl	8000ac4 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fb37 	bl	8000ac4 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e0ce      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0ee      	beq.n	8001452 <HAL_RCC_OscConfig+0x386>
 8001474:	e014      	b.n	80014a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001476:	f7ff fb25 	bl	8000ac4 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147c:	e00a      	b.n	8001494 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff fb21 	bl	8000ac4 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f241 3288 	movw	r2, #5000	; 0x1388
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0b8      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	4b40      	ldr	r3, [pc, #256]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1ee      	bne.n	800147e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d105      	bne.n	80014b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80014ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80a4 	beq.w	8001604 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d06b      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d149      	bne.n	8001564 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a30      	ldr	r2, [pc, #192]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80014d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff faf2 	bl	8000ac4 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff faee 	bl	8000ac4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e087      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	4313      	orrs	r3, r2
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800152e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fac2 	bl	8000ac4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fabe 	bl	8000ac4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e057      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x478>
 8001562:	e04f      	b.n	8001604 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800156a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff faa8 	bl	8000ac4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff faa4 	bl	8000ac4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e03d      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_RCC_OscConfig+0x4cc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x4ac>
 8001596:	e035      	b.n	8001604 <HAL_RCC_OscConfig+0x538>
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x544>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d028      	beq.n	8001600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11a      	bne.n	8001600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d111      	bne.n	8001600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0d0      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d910      	bls.n	800165c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 020f 	bic.w	r2, r3, #15
 8001642:	4965      	ldr	r1, [pc, #404]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a58      	ldr	r2, [pc, #352]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 800167a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800167e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 8001692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001696:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d040      	beq.n	8001738 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e073      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06b      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4936      	ldr	r1, [pc, #216]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001708:	f7ff f9dc 	bl	8000ac4 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f9d8 	bl	8000ac4 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e053      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d210      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 020f 	bic.w	r2, r3, #15
 800174e:	4922      	ldr	r1, [pc, #136]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 f821 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	490a      	ldr	r1, [pc, #40]	; (80017e0 <HAL_RCC_ClockConfig+0x1cc>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1d0>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1d4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fff6 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00
 80017dc:	40023800 	.word	0x40023800
 80017e0:	080045a4 	.word	0x080045a4
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f0:	b090      	sub	sp, #64	; 0x40
 80017f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017fc:	2300      	movs	r3, #0
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_GetSysClockFreq+0x180>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d00d      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x40>
 8001810:	2b08      	cmp	r3, #8
 8001812:	f200 80a1 	bhi.w	8001958 <HAL_RCC_GetSysClockFreq+0x16c>
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x34>
 800181a:	2b04      	cmp	r3, #4
 800181c:	d003      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x3a>
 800181e:	e09b      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_GetSysClockFreq+0x184>)
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001824:	e09b      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001826:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_GetSysClockFreq+0x188>)
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800182a:	e098      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4b4f      	ldr	r3, [pc, #316]	; (800196c <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <HAL_RCC_GetSysClockFreq+0x180>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d028      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_RCC_GetSysClockFreq+0x180>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	2200      	movs	r2, #0
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	627a      	str	r2, [r7, #36]	; 0x24
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001854:	2100      	movs	r1, #0
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_GetSysClockFreq+0x188>)
 8001858:	fb03 f201 	mul.w	r2, r3, r1
 800185c:	2300      	movs	r3, #0
 800185e:	fb00 f303 	mul.w	r3, r0, r3
 8001862:	4413      	add	r3, r2
 8001864:	4a43      	ldr	r2, [pc, #268]	; (8001974 <HAL_RCC_GetSysClockFreq+0x188>)
 8001866:	fba0 1202 	umull	r1, r2, r0, r2
 800186a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800186c:	460a      	mov	r2, r1
 800186e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001872:	4413      	add	r3, r2
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001878:	2200      	movs	r2, #0
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	61fa      	str	r2, [r7, #28]
 800187e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001886:	f7fe fcc3 	bl	8000210 <__aeabi_uldivmod>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4613      	mov	r3, r2
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001892:	e053      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_RCC_GetSysClockFreq+0x180>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	2200      	movs	r2, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	617a      	str	r2, [r7, #20]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018a6:	f04f 0b00 	mov.w	fp, #0
 80018aa:	4652      	mov	r2, sl
 80018ac:	465b      	mov	r3, fp
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	0159      	lsls	r1, r3, #5
 80018b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018bc:	0150      	lsls	r0, r2, #5
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ebb2 080a 	subs.w	r8, r2, sl
 80018c6:	eb63 090b 	sbc.w	r9, r3, fp
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018de:	ebb2 0408 	subs.w	r4, r2, r8
 80018e2:	eb63 0509 	sbc.w	r5, r3, r9
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	00eb      	lsls	r3, r5, #3
 80018f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018f4:	00e2      	lsls	r2, r4, #3
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	eb14 030a 	adds.w	r3, r4, sl
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	eb45 030b 	adc.w	r3, r5, fp
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001912:	4629      	mov	r1, r5
 8001914:	028b      	lsls	r3, r1, #10
 8001916:	4621      	mov	r1, r4
 8001918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800191c:	4621      	mov	r1, r4
 800191e:	028a      	lsls	r2, r1, #10
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	2200      	movs	r2, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	60fa      	str	r2, [r7, #12]
 800192c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001930:	f7fe fc6e 	bl	8000210 <__aeabi_uldivmod>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4613      	mov	r3, r2
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_GetSysClockFreq+0x180>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	3301      	adds	r3, #1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800194c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001956:	e002      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetSysClockFreq+0x184>)
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800195c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001960:	4618      	mov	r0, r3
 8001962:	3740      	adds	r7, #64	; 0x40
 8001964:	46bd      	mov	sp, r7
 8001966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	00f42400 	.word	0x00f42400
 8001974:	017d7840 	.word	0x017d7840

08001978 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_RCC_GetHCLKFreq+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	f7ff fff0 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	080045b4 	.word	0x080045b4

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff ffdc 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0b5b      	lsrs	r3, r3, #13
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	080045b4 	.word	0x080045b4

080019e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	220f      	movs	r2, #15
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_RCC_GetClockConfig+0x60>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 020f 	and.w	r2, r3, #15
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d012      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a68      	ldr	r2, [pc, #416]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a76:	6093      	str	r3, [r2, #8]
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	4964      	ldr	r1, [pc, #400]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d017      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	4959      	ldr	r1, [pc, #356]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d017      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ada:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	494a      	ldr	r1, [pc, #296]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af8:	d101      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 808b 	beq.w	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b28:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a39      	ldr	r2, [pc, #228]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b4c:	f7fe ffba 	bl	8000ac4 <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b54:	f7fe ffb6 	bl	8000ac4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e357      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d035      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d02e      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d114      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff7e 	bl	8000ac4 <HAL_GetTick>
 8001bc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7fe ff7a 	bl	8000ac4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e319      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ee      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	4901      	ldr	r1, [pc, #4]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	0ffffcff 	.word	0x0ffffcff
 8001c20:	4baa      	ldr	r3, [pc, #680]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4aa9      	ldr	r2, [pc, #676]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c2a:	6093      	str	r3, [r2, #8]
 8001c2c:	4ba7      	ldr	r3, [pc, #668]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	49a4      	ldr	r1, [pc, #656]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d010      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c4a:	4ba0      	ldr	r3, [pc, #640]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c50:	4a9e      	ldr	r2, [pc, #632]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c5a:	4b9c      	ldr	r3, [pc, #624]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	4999      	ldr	r1, [pc, #612]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00a      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c78:	4b94      	ldr	r3, [pc, #592]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c86:	4991      	ldr	r1, [pc, #580]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c9a:	4b8c      	ldr	r3, [pc, #560]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ca8:	4988      	ldr	r1, [pc, #544]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cbc:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cca:	4980      	ldr	r1, [pc, #512]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001cde:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4977      	ldr	r1, [pc, #476]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00a      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d00:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	496f      	ldr	r1, [pc, #444]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f023 020c 	bic.w	r2, r3, #12
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d30:	4966      	ldr	r1, [pc, #408]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00a      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	495e      	ldr	r1, [pc, #376]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d66:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d74:	4955      	ldr	r1, [pc, #340]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00a      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001daa:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4944      	ldr	r1, [pc, #272]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	493c      	ldr	r1, [pc, #240]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4933      	ldr	r1, [pc, #204]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e1e:	492b      	ldr	r1, [pc, #172]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d011      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e50:	d101      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	4912      	ldr	r1, [pc, #72]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea4:	4909      	ldr	r1, [pc, #36]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d006      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80d9 	beq.w	8002072 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a01      	ldr	r2, [pc, #4]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001eca:	e001      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed2:	f7fe fdf7 	bl	8000ac4 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001eda:	f7fe fdf3 	bl	8000ac4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e194      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001eec:	4b6c      	ldr	r3, [pc, #432]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d021      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d11d      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f0c:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f1a:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f20:	0e1b      	lsrs	r3, r3, #24
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	019a      	lsls	r2, r3, #6
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	061b      	lsls	r3, r3, #24
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	071b      	lsls	r3, r3, #28
 8001f40:	4957      	ldr	r1, [pc, #348]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d02e      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f72:	d129      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f7a:	0c1b      	lsrs	r3, r3, #16
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f88:	0f1b      	lsrs	r3, r3, #28
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	019a      	lsls	r2, r3, #6
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	071b      	lsls	r3, r3, #28
 8001fa8:	493d      	ldr	r1, [pc, #244]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb6:	f023 021f 	bic.w	r2, r3, #31
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01d      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fda:	0e1b      	lsrs	r3, r3, #24
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe8:	0f1b      	lsrs	r3, r3, #28
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	019a      	lsls	r2, r3, #6
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	071b      	lsls	r3, r3, #28
 8002008:	4925      	ldr	r1, [pc, #148]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d011      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	019a      	lsls	r2, r3, #6
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	061b      	lsls	r3, r3, #24
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	071b      	lsls	r3, r3, #28
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800204a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7fe fd3a 	bl	8000ac4 <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002054:	f7fe fd36 	bl	8000ac4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0d7      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b01      	cmp	r3, #1
 8002076:	f040 80cd 	bne.w	8002214 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002086:	f7fe fd1d 	bl	8000ac4 <HAL_GetTick>
 800208a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800208e:	f7fe fd19 	bl	8000ac4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d903      	bls.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0ba      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80020a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020a4:	4b5e      	ldr	r3, [pc, #376]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b0:	d0ed      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d02e      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d12a      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020da:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	0f1b      	lsrs	r3, r3, #28
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	019a      	lsls	r2, r3, #6
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	071b      	lsls	r3, r3, #28
 800210e:	4944      	ldr	r1, [pc, #272]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002116:	4b42      	ldr	r3, [pc, #264]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	3b01      	subs	r3, #1
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	493d      	ldr	r1, [pc, #244]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d022      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002144:	d11d      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	0e1b      	lsrs	r3, r3, #24
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002154:	4b32      	ldr	r3, [pc, #200]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	0f1b      	lsrs	r3, r3, #28
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	019a      	lsls	r2, r3, #6
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	041b      	lsls	r3, r3, #16
 800216e:	431a      	orrs	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	061b      	lsls	r3, r3, #24
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	071b      	lsls	r3, r3, #28
 800217a:	4929      	ldr	r1, [pc, #164]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d028      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	0e1b      	lsrs	r3, r3, #24
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	019a      	lsls	r2, r3, #6
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	431a      	orrs	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	071b      	lsls	r3, r3, #28
 80021c2:	4917      	ldr	r1, [pc, #92]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	4911      	ldr	r1, [pc, #68]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ec:	f7fe fc6a 	bl	8000ac4 <HAL_GetTick>
 80021f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021f4:	f7fe fc66 	bl	8000ac4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e007      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800220e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002212:	d1ef      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e049      	b.n	80022ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f841 	bl	80022d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f000 fa00 	bl	8002668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d001      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e054      	b.n	80023aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d022      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x80>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d01d      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x80>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d018      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x80>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x80>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00e      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x80>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x80>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_TIM_Base_Start_IT+0xe4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x80>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d115      	bne.n	8002394 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_TIM_Base_Start_IT+0xec>)
 8002370:	4013      	ands	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d015      	beq.n	80023a6 <HAL_TIM_Base_Start_IT+0xbe>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d011      	beq.n	80023a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	e008      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e000      	b.n	80023a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40010400 	.word	0x40010400
 80023cc:	40014000 	.word	0x40014000
 80023d0:	40001800 	.word	0x40001800
 80023d4:	00010007 	.word	0x00010007

080023d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0202 	mvn.w	r2, #2
 8002404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f905 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8f7 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f908 	bl	800263e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b04      	cmp	r3, #4
 8002440:	d122      	bne.n	8002488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11b      	bne.n	8002488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0204 	mvn.w	r2, #4
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8db 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f8cd 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f8de 	bl	800263e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b08      	cmp	r3, #8
 8002494:	d122      	bne.n	80024dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d11b      	bne.n	80024dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0208 	mvn.w	r2, #8
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8b1 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8a3 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f8b4 	bl	800263e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d122      	bne.n	8002530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d11b      	bne.n	8002530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0210 	mvn.w	r2, #16
 8002500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2208      	movs	r2, #8
 8002506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f887 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f879 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f88a 	bl	800263e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10e      	bne.n	800255c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0201 	mvn.w	r2, #1
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe f8ee 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	d107      	bne.n	8002588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f91a 	bl	80027bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002596:	d10e      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	d107      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f90d 	bl	80027d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d10e      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f838 	bl	8002652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d10e      	bne.n	800260e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d107      	bne.n	800260e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 0220 	mvn.w	r2, #32
 8002606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8cd 	bl	80027a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a40      	ldr	r2, [pc, #256]	; (800277c <TIM_Base_SetConfig+0x114>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002686:	d00f      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <TIM_Base_SetConfig+0x118>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00b      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <TIM_Base_SetConfig+0x11c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d007      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a3b      	ldr	r2, [pc, #236]	; (8002788 <TIM_Base_SetConfig+0x120>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3a      	ldr	r2, [pc, #232]	; (800278c <TIM_Base_SetConfig+0x124>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d108      	bne.n	80026ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2f      	ldr	r2, [pc, #188]	; (800277c <TIM_Base_SetConfig+0x114>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d027      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2c      	ldr	r2, [pc, #176]	; (8002780 <TIM_Base_SetConfig+0x118>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d023      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <TIM_Base_SetConfig+0x11c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <TIM_Base_SetConfig+0x120>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a29      	ldr	r2, [pc, #164]	; (800278c <TIM_Base_SetConfig+0x124>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d017      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a28      	ldr	r2, [pc, #160]	; (8002790 <TIM_Base_SetConfig+0x128>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <TIM_Base_SetConfig+0x12c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <TIM_Base_SetConfig+0x130>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <TIM_Base_SetConfig+0x134>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <TIM_Base_SetConfig+0x138>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <TIM_Base_SetConfig+0x13c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <TIM_Base_SetConfig+0x114>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_Base_SetConfig+0xf8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <TIM_Base_SetConfig+0x124>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800
 8002788:	40000c00 	.word	0x40000c00
 800278c:	40010400 	.word	0x40010400
 8002790:	40014000 	.word	0x40014000
 8002794:	40014400 	.word	0x40014400
 8002798:	40014800 	.word	0x40014800
 800279c:	40001800 	.word	0x40001800
 80027a0:	40001c00 	.word	0x40001c00
 80027a4:	40002000 	.word	0x40002000

080027a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e040      	b.n	8002878 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f890 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f82c 	bl	8002880 <UART_SetConfig>
 8002828:	4603      	mov	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e022      	b.n	8002878 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fa84 	bl	8002d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800284e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800285e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fb0b 	bl	8002e8c <UART_CheckIdleState>
 8002876:	4603      	mov	r3, r0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4ba6      	ldr	r3, [pc, #664]	; (8002b44 <UART_SetConfig+0x2c4>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	6979      	ldr	r1, [r7, #20]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a94      	ldr	r2, [pc, #592]	; (8002b48 <UART_SetConfig+0x2c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d120      	bne.n	800293e <UART_SetConfig+0xbe>
 80028fc:	4b93      	ldr	r3, [pc, #588]	; (8002b4c <UART_SetConfig+0x2cc>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b03      	cmp	r3, #3
 8002908:	d816      	bhi.n	8002938 <UART_SetConfig+0xb8>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <UART_SetConfig+0x90>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002921 	.word	0x08002921
 8002914:	0800292d 	.word	0x0800292d
 8002918:	08002927 	.word	0x08002927
 800291c:	08002933 	.word	0x08002933
 8002920:	2301      	movs	r3, #1
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e150      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002926:	2302      	movs	r3, #2
 8002928:	77fb      	strb	r3, [r7, #31]
 800292a:	e14d      	b.n	8002bc8 <UART_SetConfig+0x348>
 800292c:	2304      	movs	r3, #4
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	e14a      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002932:	2308      	movs	r3, #8
 8002934:	77fb      	strb	r3, [r7, #31]
 8002936:	e147      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002938:	2310      	movs	r3, #16
 800293a:	77fb      	strb	r3, [r7, #31]
 800293c:	e144      	b.n	8002bc8 <UART_SetConfig+0x348>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a83      	ldr	r2, [pc, #524]	; (8002b50 <UART_SetConfig+0x2d0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d132      	bne.n	80029ae <UART_SetConfig+0x12e>
 8002948:	4b80      	ldr	r3, [pc, #512]	; (8002b4c <UART_SetConfig+0x2cc>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d828      	bhi.n	80029a8 <UART_SetConfig+0x128>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <UART_SetConfig+0xdc>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	08002991 	.word	0x08002991
 8002960:	080029a9 	.word	0x080029a9
 8002964:	080029a9 	.word	0x080029a9
 8002968:	080029a9 	.word	0x080029a9
 800296c:	0800299d 	.word	0x0800299d
 8002970:	080029a9 	.word	0x080029a9
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029a9 	.word	0x080029a9
 800297c:	08002997 	.word	0x08002997
 8002980:	080029a9 	.word	0x080029a9
 8002984:	080029a9 	.word	0x080029a9
 8002988:	080029a9 	.word	0x080029a9
 800298c:	080029a3 	.word	0x080029a3
 8002990:	2300      	movs	r3, #0
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e118      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002996:	2302      	movs	r3, #2
 8002998:	77fb      	strb	r3, [r7, #31]
 800299a:	e115      	b.n	8002bc8 <UART_SetConfig+0x348>
 800299c:	2304      	movs	r3, #4
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e112      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029a2:	2308      	movs	r3, #8
 80029a4:	77fb      	strb	r3, [r7, #31]
 80029a6:	e10f      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029a8:	2310      	movs	r3, #16
 80029aa:	77fb      	strb	r3, [r7, #31]
 80029ac:	e10c      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a68      	ldr	r2, [pc, #416]	; (8002b54 <UART_SetConfig+0x2d4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d120      	bne.n	80029fa <UART_SetConfig+0x17a>
 80029b8:	4b64      	ldr	r3, [pc, #400]	; (8002b4c <UART_SetConfig+0x2cc>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029c2:	2b30      	cmp	r3, #48	; 0x30
 80029c4:	d013      	beq.n	80029ee <UART_SetConfig+0x16e>
 80029c6:	2b30      	cmp	r3, #48	; 0x30
 80029c8:	d814      	bhi.n	80029f4 <UART_SetConfig+0x174>
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d009      	beq.n	80029e2 <UART_SetConfig+0x162>
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d810      	bhi.n	80029f4 <UART_SetConfig+0x174>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <UART_SetConfig+0x15c>
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d006      	beq.n	80029e8 <UART_SetConfig+0x168>
 80029da:	e00b      	b.n	80029f4 <UART_SetConfig+0x174>
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e0f2      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029e2:	2302      	movs	r3, #2
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e0ef      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029e8:	2304      	movs	r3, #4
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e0ec      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029ee:	2308      	movs	r3, #8
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e0e9      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029f4:	2310      	movs	r3, #16
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e0e6      	b.n	8002bc8 <UART_SetConfig+0x348>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a56      	ldr	r2, [pc, #344]	; (8002b58 <UART_SetConfig+0x2d8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d120      	bne.n	8002a46 <UART_SetConfig+0x1c6>
 8002a04:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <UART_SetConfig+0x2cc>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a10:	d013      	beq.n	8002a3a <UART_SetConfig+0x1ba>
 8002a12:	2bc0      	cmp	r3, #192	; 0xc0
 8002a14:	d814      	bhi.n	8002a40 <UART_SetConfig+0x1c0>
 8002a16:	2b80      	cmp	r3, #128	; 0x80
 8002a18:	d009      	beq.n	8002a2e <UART_SetConfig+0x1ae>
 8002a1a:	2b80      	cmp	r3, #128	; 0x80
 8002a1c:	d810      	bhi.n	8002a40 <UART_SetConfig+0x1c0>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <UART_SetConfig+0x1a8>
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d006      	beq.n	8002a34 <UART_SetConfig+0x1b4>
 8002a26:	e00b      	b.n	8002a40 <UART_SetConfig+0x1c0>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e0cc      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	77fb      	strb	r3, [r7, #31]
 8002a32:	e0c9      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a34:	2304      	movs	r3, #4
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e0c6      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e0c3      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a40:	2310      	movs	r3, #16
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e0c0      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a44      	ldr	r2, [pc, #272]	; (8002b5c <UART_SetConfig+0x2dc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d125      	bne.n	8002a9c <UART_SetConfig+0x21c>
 8002a50:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <UART_SetConfig+0x2cc>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a5e:	d017      	beq.n	8002a90 <UART_SetConfig+0x210>
 8002a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a64:	d817      	bhi.n	8002a96 <UART_SetConfig+0x216>
 8002a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6a:	d00b      	beq.n	8002a84 <UART_SetConfig+0x204>
 8002a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a70:	d811      	bhi.n	8002a96 <UART_SetConfig+0x216>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <UART_SetConfig+0x1fe>
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7a:	d006      	beq.n	8002a8a <UART_SetConfig+0x20a>
 8002a7c:	e00b      	b.n	8002a96 <UART_SetConfig+0x216>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e0a1      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a84:	2302      	movs	r3, #2
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e09e      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	77fb      	strb	r3, [r7, #31]
 8002a8e:	e09b      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a90:	2308      	movs	r3, #8
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e098      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a96:	2310      	movs	r3, #16
 8002a98:	77fb      	strb	r3, [r7, #31]
 8002a9a:	e095      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <UART_SetConfig+0x2e0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d125      	bne.n	8002af2 <UART_SetConfig+0x272>
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <UART_SetConfig+0x2cc>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ab4:	d017      	beq.n	8002ae6 <UART_SetConfig+0x266>
 8002ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002aba:	d817      	bhi.n	8002aec <UART_SetConfig+0x26c>
 8002abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac0:	d00b      	beq.n	8002ada <UART_SetConfig+0x25a>
 8002ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac6:	d811      	bhi.n	8002aec <UART_SetConfig+0x26c>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <UART_SetConfig+0x254>
 8002acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad0:	d006      	beq.n	8002ae0 <UART_SetConfig+0x260>
 8002ad2:	e00b      	b.n	8002aec <UART_SetConfig+0x26c>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e076      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002ada:	2302      	movs	r3, #2
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e073      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e070      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e06d      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002aec:	2310      	movs	r3, #16
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e06a      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <UART_SetConfig+0x2e4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d138      	bne.n	8002b6e <UART_SetConfig+0x2ee>
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <UART_SetConfig+0x2cc>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b0a:	d017      	beq.n	8002b3c <UART_SetConfig+0x2bc>
 8002b0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b10:	d82a      	bhi.n	8002b68 <UART_SetConfig+0x2e8>
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b16:	d00b      	beq.n	8002b30 <UART_SetConfig+0x2b0>
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1c:	d824      	bhi.n	8002b68 <UART_SetConfig+0x2e8>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <UART_SetConfig+0x2aa>
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	d006      	beq.n	8002b36 <UART_SetConfig+0x2b6>
 8002b28:	e01e      	b.n	8002b68 <UART_SetConfig+0x2e8>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	77fb      	strb	r3, [r7, #31]
 8002b2e:	e04b      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002b30:	2302      	movs	r3, #2
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	e048      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002b36:	2304      	movs	r3, #4
 8002b38:	77fb      	strb	r3, [r7, #31]
 8002b3a:	e045      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	77fb      	strb	r3, [r7, #31]
 8002b40:	e042      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002b42:	bf00      	nop
 8002b44:	efff69f3 	.word	0xefff69f3
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40004400 	.word	0x40004400
 8002b54:	40004800 	.word	0x40004800
 8002b58:	40004c00 	.word	0x40004c00
 8002b5c:	40005000 	.word	0x40005000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40007800 	.word	0x40007800
 8002b68:	2310      	movs	r3, #16
 8002b6a:	77fb      	strb	r3, [r7, #31]
 8002b6c:	e02c      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a72      	ldr	r2, [pc, #456]	; (8002d3c <UART_SetConfig+0x4bc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d125      	bne.n	8002bc4 <UART_SetConfig+0x344>
 8002b78:	4b71      	ldr	r3, [pc, #452]	; (8002d40 <UART_SetConfig+0x4c0>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b86:	d017      	beq.n	8002bb8 <UART_SetConfig+0x338>
 8002b88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b8c:	d817      	bhi.n	8002bbe <UART_SetConfig+0x33e>
 8002b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b92:	d00b      	beq.n	8002bac <UART_SetConfig+0x32c>
 8002b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b98:	d811      	bhi.n	8002bbe <UART_SetConfig+0x33e>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <UART_SetConfig+0x326>
 8002b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ba2:	d006      	beq.n	8002bb2 <UART_SetConfig+0x332>
 8002ba4:	e00b      	b.n	8002bbe <UART_SetConfig+0x33e>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e00d      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002bac:	2302      	movs	r3, #2
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e00a      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e007      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002bb8:	2308      	movs	r3, #8
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e004      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e001      	b.n	8002bc8 <UART_SetConfig+0x348>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd0:	d15b      	bne.n	8002c8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d828      	bhi.n	8002c2a <UART_SetConfig+0x3aa>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <UART_SetConfig+0x360>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002c05 	.word	0x08002c05
 8002be4:	08002c0d 	.word	0x08002c0d
 8002be8:	08002c15 	.word	0x08002c15
 8002bec:	08002c2b 	.word	0x08002c2b
 8002bf0:	08002c1b 	.word	0x08002c1b
 8002bf4:	08002c2b 	.word	0x08002c2b
 8002bf8:	08002c2b 	.word	0x08002c2b
 8002bfc:	08002c2b 	.word	0x08002c2b
 8002c00:	08002c23 	.word	0x08002c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7fe fec4 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002c08:	61b8      	str	r0, [r7, #24]
        break;
 8002c0a:	e013      	b.n	8002c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c0c:	f7fe fed4 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 8002c10:	61b8      	str	r0, [r7, #24]
        break;
 8002c12:	e00f      	b.n	8002c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <UART_SetConfig+0x4c4>)
 8002c16:	61bb      	str	r3, [r7, #24]
        break;
 8002c18:	e00c      	b.n	8002c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1a:	f7fe fde7 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 8002c1e:	61b8      	str	r0, [r7, #24]
        break;
 8002c20:	e008      	b.n	8002c34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c26:	61bb      	str	r3, [r7, #24]
        break;
 8002c28:	e004      	b.n	8002c34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	77bb      	strb	r3, [r7, #30]
        break;
 8002c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d074      	beq.n	8002d24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	005a      	lsls	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	d916      	bls.n	8002c84 <UART_SetConfig+0x404>
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d212      	bcs.n	8002c84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f023 030f 	bic.w	r3, r3, #15
 8002c66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	89fb      	ldrh	r3, [r7, #14]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	89fa      	ldrh	r2, [r7, #14]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	e04f      	b.n	8002d24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	77bb      	strb	r3, [r7, #30]
 8002c88:	e04c      	b.n	8002d24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c8a:	7ffb      	ldrb	r3, [r7, #31]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d828      	bhi.n	8002ce2 <UART_SetConfig+0x462>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <UART_SetConfig+0x418>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002cbd 	.word	0x08002cbd
 8002c9c:	08002cc5 	.word	0x08002cc5
 8002ca0:	08002ccd 	.word	0x08002ccd
 8002ca4:	08002ce3 	.word	0x08002ce3
 8002ca8:	08002cd3 	.word	0x08002cd3
 8002cac:	08002ce3 	.word	0x08002ce3
 8002cb0:	08002ce3 	.word	0x08002ce3
 8002cb4:	08002ce3 	.word	0x08002ce3
 8002cb8:	08002cdb 	.word	0x08002cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cbc:	f7fe fe68 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002cc0:	61b8      	str	r0, [r7, #24]
        break;
 8002cc2:	e013      	b.n	8002cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cc4:	f7fe fe78 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	61b8      	str	r0, [r7, #24]
        break;
 8002cca:	e00f      	b.n	8002cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <UART_SetConfig+0x4c4>)
 8002cce:	61bb      	str	r3, [r7, #24]
        break;
 8002cd0:	e00c      	b.n	8002cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd2:	f7fe fd8b 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 8002cd6:	61b8      	str	r0, [r7, #24]
        break;
 8002cd8:	e008      	b.n	8002cec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cde:	61bb      	str	r3, [r7, #24]
        break;
 8002ce0:	e004      	b.n	8002cec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8002cea:	bf00      	nop
    }

    if (pclk != 0U)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	085a      	lsrs	r2, r3, #1
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	441a      	add	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d909      	bls.n	8002d20 <UART_SetConfig+0x4a0>
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d12:	d205      	bcs.n	8002d20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	e001      	b.n	8002d24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d30:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40007c00 	.word	0x40007c00
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400

08002d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01a      	beq.n	8002e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e46:	d10a      	bne.n	8002e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  }
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e9c:	f7fd fe12 	bl	8000ac4 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d10e      	bne.n	8002ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f817 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00d      	b.n	8002eea <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b09c      	sub	sp, #112	; 0x70
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f02:	e0a5      	b.n	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	f000 80a1 	beq.w	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fd fdd9 	bl	8000ac4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13e      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f38:	667b      	str	r3, [r7, #100]	; 0x64
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e6      	bne.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3308      	adds	r3, #8
 8002f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f76:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e5      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e067      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d04f      	beq.n	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	d147      	bne.n	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e6      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	613b      	str	r3, [r7, #16]
   return(result);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	66bb      	str	r3, [r7, #104]	; 0x68
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800301c:	623a      	str	r2, [r7, #32]
 800301e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	69f9      	ldr	r1, [r7, #28]
 8003022:	6a3a      	ldr	r2, [r7, #32]
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	61bb      	str	r3, [r7, #24]
   return(result);
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e5      	bne.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e010      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	f43f af4a 	beq.w	8002f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3770      	adds	r7, #112	; 0x70
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308c:	2b84      	cmp	r3, #132	; 0x84
 800308e:	d005      	beq.n	800309c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003090:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	3303      	adds	r3, #3
 800309a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800309c:	68fb      	ldr	r3, [r7, #12]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030ae:	f000 fae9 	bl	8003684 <vTaskStartScheduler>
  
  return osOK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af04      	add	r7, sp, #16
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <osThreadCreate+0x54>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01c      	beq.n	800310c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685c      	ldr	r4, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681d      	ldr	r5, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691e      	ldr	r6, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ffc8 	bl	800307a <makeFreeRtosPriority>
 80030ea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030f4:	9202      	str	r2, [sp, #8]
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	9100      	str	r1, [sp, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	4632      	mov	r2, r6
 80030fe:	4629      	mov	r1, r5
 8003100:	4620      	mov	r0, r4
 8003102:	f000 f8ed 	bl	80032e0 <xTaskCreateStatic>
 8003106:	4603      	mov	r3, r0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e01c      	b.n	8003146 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685c      	ldr	r4, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003118:	b29e      	uxth	r6, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ffaa 	bl	800307a <makeFreeRtosPriority>
 8003126:	4602      	mov	r2, r0
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	9200      	str	r2, [sp, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4632      	mov	r2, r6
 8003134:	4629      	mov	r1, r5
 8003136:	4620      	mov	r0, r4
 8003138:	f000 f935 	bl	80033a6 <xTaskCreate>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003146:	68fb      	ldr	r3, [r7, #12]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003150 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <osDelay+0x16>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	e000      	b.n	8003168 <osDelay+0x18>
 8003166:	2301      	movs	r3, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa55 	bl	8003618 <vTaskDelay>
  
  return osOK;
 800316e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f103 0208 	add.w	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 0208 	add.w	r2, r3, #8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f103 0208 	add.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	601a      	str	r2, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d103      	bne.n	800323a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e00c      	b.n	8003254 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3308      	adds	r3, #8
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e002      	b.n	8003248 <vListInsert+0x2e>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d2f6      	bcs.n	8003242 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d103      	bne.n	80032c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	; 0x38
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10c      	bne.n	800330e <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	b672      	cpsid	i
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	b662      	cpsie	i
 8003308:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10c      	bne.n	800332e <xTaskCreateStatic+0x4e>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	b672      	cpsid	i
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	b662      	cpsie	i
 8003328:	61fb      	str	r3, [r7, #28]
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800332e:	2354      	movs	r3, #84	; 0x54
 8003330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b54      	cmp	r3, #84	; 0x54
 8003336:	d00c      	beq.n	8003352 <xTaskCreateStatic+0x72>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	b672      	cpsid	i
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	b662      	cpsie	i
 800334c:	61bb      	str	r3, [r7, #24]
}
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003352:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01e      	beq.n	8003398 <xTaskCreateStatic+0xb8>
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003368:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003372:	2300      	movs	r3, #0
 8003374:	9303      	str	r3, [sp, #12]
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9302      	str	r3, [sp, #8]
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f850 	bl	8003430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003392:	f000 f8d7 	bl	8003544 <prvAddNewTaskToReadyList>
 8003396:	e001      	b.n	800339c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800339c:	697b      	ldr	r3, [r7, #20]
	}
 800339e:	4618      	mov	r0, r3
 80033a0:	3728      	adds	r7, #40	; 0x28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b08c      	sub	sp, #48	; 0x30
 80033aa:	af04      	add	r7, sp, #16
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 febe 	bl	800413c <pvPortMalloc>
 80033c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033c8:	2054      	movs	r0, #84	; 0x54
 80033ca:	f000 feb7 	bl	800413c <pvPortMalloc>
 80033ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
 80033dc:	e005      	b.n	80033ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f000 ff76 	bl	80042d0 <vPortFree>
 80033e4:	e001      	b.n	80033ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d017      	beq.n	8003420 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9303      	str	r3, [sp, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	9302      	str	r3, [sp, #8]
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f80e 	bl	8003430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003414:	69f8      	ldr	r0, [r7, #28]
 8003416:	f000 f895 	bl	8003544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e002      	b.n	8003426 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
 8003424:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003426:	69bb      	ldr	r3, [r7, #24]
	}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003448:	440b      	add	r3, r1
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	b672      	cpsid	i
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	b662      	cpsie	i
 8003476:	617b      	str	r3, [r7, #20]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01f      	beq.n	80034c2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e012      	b.n	80034ae <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	7819      	ldrb	r1, [r3, #0]
 8003490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	3334      	adds	r3, #52	; 0x34
 8003498:	460a      	mov	r2, r1
 800349a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d006      	beq.n	80034b6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d9e9      	bls.n	8003488 <prvInitialiseNewTask+0x58>
 80034b4:	e000      	b.n	80034b8 <prvInitialiseNewTask+0x88>
			{
				break;
 80034b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c0:	e003      	b.n	80034ca <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d901      	bls.n	80034d4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034d0:	2306      	movs	r3, #6
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	2200      	movs	r2, #0
 80034e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	3304      	adds	r3, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fe64 	bl	80031b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	3318      	adds	r3, #24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fe5f 	bl	80031b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	f1c3 0207 	rsb	r2, r3, #7
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	2200      	movs	r2, #0
 8003514:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	68f9      	ldr	r1, [r7, #12]
 8003522:	69b8      	ldr	r0, [r7, #24]
 8003524:	f000 fc14 	bl	8003d50 <pxPortInitialiseStack>
 8003528:	4602      	mov	r2, r0
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800353a:	bf00      	nop
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800354c:	f000 fd0e 	bl	8003f6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003550:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <prvAddNewTaskToReadyList+0xb8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <prvAddNewTaskToReadyList+0xb8>)
 8003558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800355a:	4b29      	ldr	r3, [pc, #164]	; (8003600 <prvAddNewTaskToReadyList+0xbc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003562:	4a27      	ldr	r2, [pc, #156]	; (8003600 <prvAddNewTaskToReadyList+0xbc>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003568:	4b24      	ldr	r3, [pc, #144]	; (80035fc <prvAddNewTaskToReadyList+0xb8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d110      	bne.n	8003592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003570:	f000 fac8 	bl	8003b04 <prvInitialiseTaskLists>
 8003574:	e00d      	b.n	8003592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <prvAddNewTaskToReadyList+0xc0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <prvAddNewTaskToReadyList+0xbc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	429a      	cmp	r2, r3
 800358a:	d802      	bhi.n	8003592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800358c:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <prvAddNewTaskToReadyList+0xbc>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <prvAddNewTaskToReadyList+0xc4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <prvAddNewTaskToReadyList+0xc4>)
 800359a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <prvAddNewTaskToReadyList+0xc8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <prvAddNewTaskToReadyList+0xc8>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <prvAddNewTaskToReadyList+0xcc>)
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7ff fe04 	bl	80031d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035ca:	f000 fd03 	bl	8003fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <prvAddNewTaskToReadyList+0xc0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00e      	beq.n	80035f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <prvAddNewTaskToReadyList+0xbc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d207      	bcs.n	80035f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <prvAddNewTaskToReadyList+0xd0>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000458 	.word	0x20000458
 8003600:	20000358 	.word	0x20000358
 8003604:	20000464 	.word	0x20000464
 8003608:	20000474 	.word	0x20000474
 800360c:	20000460 	.word	0x20000460
 8003610:	2000035c 	.word	0x2000035c
 8003614:	e000ed04 	.word	0xe000ed04

08003618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d019      	beq.n	800365e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <vTaskDelay+0x64>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <vTaskDelay+0x34>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	b672      	cpsid	i
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	b662      	cpsie	i
 8003646:	60bb      	str	r3, [r7, #8]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800364c:	f000 f87e 	bl	800374c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003650:	2100      	movs	r1, #0
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fb16 	bl	8003c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003658:	f000 f886 	bl	8003768 <xTaskResumeAll>
 800365c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <vTaskDelay+0x68>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000480 	.word	0x20000480
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003692:	463a      	mov	r2, r7
 8003694:	1d39      	adds	r1, r7, #4
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff3a 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	9202      	str	r2, [sp, #8]
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	460a      	mov	r2, r1
 80036b2:	4920      	ldr	r1, [pc, #128]	; (8003734 <vTaskStartScheduler+0xb0>)
 80036b4:	4820      	ldr	r0, [pc, #128]	; (8003738 <vTaskStartScheduler+0xb4>)
 80036b6:	f7ff fe13 	bl	80032e0 <xTaskCreateStatic>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a1f      	ldr	r2, [pc, #124]	; (800373c <vTaskStartScheduler+0xb8>)
 80036be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <vTaskStartScheduler+0xb8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036c8:	2301      	movs	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e001      	b.n	80036d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d118      	bne.n	800370a <vTaskStartScheduler+0x86>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	b672      	cpsid	i
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	b662      	cpsie	i
 80036ec:	613b      	str	r3, [r7, #16]
}
 80036ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <vTaskStartScheduler+0xbc>)
 80036f2:	f04f 32ff 	mov.w	r2, #4294967295
 80036f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <vTaskStartScheduler+0xc0>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <vTaskStartScheduler+0xc4>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003704:	f000 fbb4 	bl	8003e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003708:	e010      	b.n	800372c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d10c      	bne.n	800372c <vTaskStartScheduler+0xa8>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	b672      	cpsid	i
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	b662      	cpsie	i
 8003726:	60fb      	str	r3, [r7, #12]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <vTaskStartScheduler+0xa6>
}
 800372c:	bf00      	nop
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	0800459c 	.word	0x0800459c
 8003738:	08003ad5 	.word	0x08003ad5
 800373c:	2000047c 	.word	0x2000047c
 8003740:	20000478 	.word	0x20000478
 8003744:	20000464 	.word	0x20000464
 8003748:	2000045c 	.word	0x2000045c

0800374c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <vTaskSuspendAll+0x18>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	4a03      	ldr	r2, [pc, #12]	; (8003764 <vTaskSuspendAll+0x18>)
 8003758:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000480 	.word	0x20000480

08003768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003776:	4b42      	ldr	r3, [pc, #264]	; (8003880 <xTaskResumeAll+0x118>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <xTaskResumeAll+0x30>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	b672      	cpsid	i
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	b662      	cpsie	i
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003798:	f000 fbe8 	bl	8003f6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800379c:	4b38      	ldr	r3, [pc, #224]	; (8003880 <xTaskResumeAll+0x118>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	4a37      	ldr	r2, [pc, #220]	; (8003880 <xTaskResumeAll+0x118>)
 80037a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <xTaskResumeAll+0x118>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d161      	bne.n	8003872 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037ae:	4b35      	ldr	r3, [pc, #212]	; (8003884 <xTaskResumeAll+0x11c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d05d      	beq.n	8003872 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037b6:	e02e      	b.n	8003816 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b8:	4b33      	ldr	r3, [pc, #204]	; (8003888 <xTaskResumeAll+0x120>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3318      	adds	r3, #24
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fd61 	bl	800328c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3304      	adds	r3, #4
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fd5c 	bl	800328c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	2201      	movs	r2, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <xTaskResumeAll+0x124>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	4a2a      	ldr	r2, [pc, #168]	; (800388c <xTaskResumeAll+0x124>)
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4a27      	ldr	r2, [pc, #156]	; (8003890 <xTaskResumeAll+0x128>)
 80037f4:	441a      	add	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7ff fce8 	bl	80031d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <xTaskResumeAll+0x12c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <xTaskResumeAll+0x130>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003816:	4b1c      	ldr	r3, [pc, #112]	; (8003888 <xTaskResumeAll+0x120>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1cc      	bne.n	80037b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003824:	f000 fa0e 	bl	8003c44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <xTaskResumeAll+0x134>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003834:	f000 f836 	bl	80038a4 <xTaskIncrementTick>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <xTaskResumeAll+0x130>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f1      	bne.n	8003834 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <xTaskResumeAll+0x134>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <xTaskResumeAll+0x130>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003862:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <xTaskResumeAll+0x138>)
 8003864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003872:	f000 fbaf 	bl	8003fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8003876:	68bb      	ldr	r3, [r7, #8]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20000480 	.word	0x20000480
 8003884:	20000458 	.word	0x20000458
 8003888:	20000418 	.word	0x20000418
 800388c:	20000460 	.word	0x20000460
 8003890:	2000035c 	.word	0x2000035c
 8003894:	20000358 	.word	0x20000358
 8003898:	2000046c 	.word	0x2000046c
 800389c:	20000468 	.word	0x20000468
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ae:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <xTaskIncrementTick+0x148>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 808a 	bne.w	80039cc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038b8:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <xTaskIncrementTick+0x14c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <xTaskIncrementTick+0x14c>)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d122      	bne.n	8003912 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80038cc:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <xTaskIncrementTick+0x150>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	b672      	cpsid	i
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	b662      	cpsie	i
 80038ea:	603b      	str	r3, [r7, #0]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xTaskIncrementTick+0x4a>
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <xTaskIncrementTick+0x150>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <xTaskIncrementTick+0x154>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a3e      	ldr	r2, [pc, #248]	; (80039f4 <xTaskIncrementTick+0x150>)
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4a3e      	ldr	r2, [pc, #248]	; (80039f8 <xTaskIncrementTick+0x154>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <xTaskIncrementTick+0x158>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <xTaskIncrementTick+0x158>)
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	f000 f999 	bl	8003c44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003912:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <xTaskIncrementTick+0x15c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d348      	bcc.n	80039ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391c:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <xTaskIncrementTick+0x150>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003926:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <xTaskIncrementTick+0x15c>)
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	601a      	str	r2, [r3, #0]
					break;
 800392e:	e03e      	b.n	80039ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003930:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <xTaskIncrementTick+0x150>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d203      	bcs.n	8003950 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003948:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <xTaskIncrementTick+0x15c>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800394e:	e02e      	b.n	80039ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3304      	adds	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fc99 	bl	800328c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3318      	adds	r3, #24
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fc90 	bl	800328c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <xTaskIncrementTick+0x160>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <xTaskIncrementTick+0x160>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <xTaskIncrementTick+0x164>)
 800398c:	441a      	add	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7ff fc1c 	bl	80031d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <xTaskIncrementTick+0x168>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3b9      	bcc.n	800391c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80039a8:	2301      	movs	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ac:	e7b6      	b.n	800391c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <xTaskIncrementTick+0x168>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4914      	ldr	r1, [pc, #80]	; (8003a08 <xTaskIncrementTick+0x164>)
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d907      	bls.n	80039d6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e004      	b.n	80039d6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <xTaskIncrementTick+0x16c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <xTaskIncrementTick+0x16c>)
 80039d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <xTaskIncrementTick+0x170>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000480 	.word	0x20000480
 80039f0:	2000045c 	.word	0x2000045c
 80039f4:	20000410 	.word	0x20000410
 80039f8:	20000414 	.word	0x20000414
 80039fc:	20000470 	.word	0x20000470
 8003a00:	20000478 	.word	0x20000478
 8003a04:	20000460 	.word	0x20000460
 8003a08:	2000035c 	.word	0x2000035c
 8003a0c:	20000358 	.word	0x20000358
 8003a10:	20000468 	.word	0x20000468
 8003a14:	2000046c 	.word	0x2000046c

08003a18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <vTaskSwitchContext+0xa8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <vTaskSwitchContext+0xac>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a2c:	e041      	b.n	8003ab2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <vTaskSwitchContext+0xac>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <vTaskSwitchContext+0xb0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a42:	7afb      	ldrb	r3, [r7, #11]
 8003a44:	f1c3 031f 	rsb	r3, r3, #31
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	4920      	ldr	r1, [pc, #128]	; (8003acc <vTaskSwitchContext+0xb4>)
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <vTaskSwitchContext+0x60>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	b672      	cpsid	i
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	b662      	cpsie	i
 8003a72:	607b      	str	r3, [r7, #4]
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <vTaskSwitchContext+0x5e>
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <vTaskSwitchContext+0xb4>)
 8003a84:	4413      	add	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d104      	bne.n	8003aa8 <vTaskSwitchContext+0x90>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <vTaskSwitchContext+0xb8>)
 8003ab0:	6013      	str	r3, [r2, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000480 	.word	0x20000480
 8003ac4:	2000046c 	.word	0x2000046c
 8003ac8:	20000460 	.word	0x20000460
 8003acc:	2000035c 	.word	0x2000035c
 8003ad0:	20000358 	.word	0x20000358

08003ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003adc:	f000 f852 	bl	8003b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <prvIdleTask+0x28>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d9f9      	bls.n	8003adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <prvIdleTask+0x2c>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003af8:	e7f0      	b.n	8003adc <prvIdleTask+0x8>
 8003afa:	bf00      	nop
 8003afc:	2000035c 	.word	0x2000035c
 8003b00:	e000ed04 	.word	0xe000ed04

08003b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	e00c      	b.n	8003b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <prvInitialiseTaskLists+0x60>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fb2a 	bl	8003178 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3301      	adds	r3, #1
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d9ef      	bls.n	8003b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b30:	480d      	ldr	r0, [pc, #52]	; (8003b68 <prvInitialiseTaskLists+0x64>)
 8003b32:	f7ff fb21 	bl	8003178 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b36:	480d      	ldr	r0, [pc, #52]	; (8003b6c <prvInitialiseTaskLists+0x68>)
 8003b38:	f7ff fb1e 	bl	8003178 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b3c:	480c      	ldr	r0, [pc, #48]	; (8003b70 <prvInitialiseTaskLists+0x6c>)
 8003b3e:	f7ff fb1b 	bl	8003178 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b42:	480c      	ldr	r0, [pc, #48]	; (8003b74 <prvInitialiseTaskLists+0x70>)
 8003b44:	f7ff fb18 	bl	8003178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <prvInitialiseTaskLists+0x74>)
 8003b4a:	f7ff fb15 	bl	8003178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <prvInitialiseTaskLists+0x78>)
 8003b50:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <prvInitialiseTaskLists+0x64>)
 8003b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <prvInitialiseTaskLists+0x7c>)
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <prvInitialiseTaskLists+0x68>)
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	2000035c 	.word	0x2000035c
 8003b68:	200003e8 	.word	0x200003e8
 8003b6c:	200003fc 	.word	0x200003fc
 8003b70:	20000418 	.word	0x20000418
 8003b74:	2000042c 	.word	0x2000042c
 8003b78:	20000444 	.word	0x20000444
 8003b7c:	20000410 	.word	0x20000410
 8003b80:	20000414 	.word	0x20000414

08003b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b8a:	e019      	b.n	8003bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b8c:	f000 f9ee 	bl	8003f6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <prvCheckTasksWaitingTermination+0x50>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fb75 	bl	800328c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <prvCheckTasksWaitingTermination+0x54>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <prvCheckTasksWaitingTermination+0x54>)
 8003baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <prvCheckTasksWaitingTermination+0x58>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <prvCheckTasksWaitingTermination+0x58>)
 8003bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bb6:	f000 fa0d 	bl	8003fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f810 	bl	8003be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <prvCheckTasksWaitingTermination+0x58>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e1      	bne.n	8003b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	2000042c 	.word	0x2000042c
 8003bd8:	20000458 	.word	0x20000458
 8003bdc:	20000440 	.word	0x20000440

08003be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fb6a 	bl	80042d0 <vPortFree>
				vPortFree( pxTCB );
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fb67 	bl	80042d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c02:	e01a      	b.n	8003c3a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d103      	bne.n	8003c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fb5e 	bl	80042d0 <vPortFree>
	}
 8003c14:	e011      	b.n	8003c3a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d00c      	beq.n	8003c3a <prvDeleteTCB+0x5a>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	b672      	cpsid	i
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	b662      	cpsie	i
 8003c34:	60fb      	str	r3, [r7, #12]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <prvDeleteTCB+0x58>
	}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <prvResetNextTaskUnblockTime+0x38>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <prvResetNextTaskUnblockTime+0x3c>)
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c5c:	e008      	b.n	8003c70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <prvResetNextTaskUnblockTime+0x38>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <prvResetNextTaskUnblockTime+0x3c>)
 8003c6e:	6013      	str	r3, [r2, #0]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	20000410 	.word	0x20000410
 8003c80:	20000478 	.word	0x20000478

08003c84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff faf6 	bl	800328c <uxListRemove>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10b      	bne.n	8003cbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	2201      	movs	r2, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d10a      	bne.n	8003cdc <prvAddCurrentTaskToDelayedList+0x58>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	481a      	ldr	r0, [pc, #104]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003cd6:	f7ff fa7c 	bl	80031d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cda:	e026      	b.n	8003d2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d209      	bcs.n	8003d08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f7ff fa8a 	bl	800321a <vListInsert>
}
 8003d06:	e010      	b.n	8003d2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7ff fa80 	bl	800321a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d202      	bcs.n	8003d2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d24:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6013      	str	r3, [r2, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	2000045c 	.word	0x2000045c
 8003d38:	20000358 	.word	0x20000358
 8003d3c:	20000460 	.word	0x20000460
 8003d40:	20000444 	.word	0x20000444
 8003d44:	20000414 	.word	0x20000414
 8003d48:	20000410 	.word	0x20000410
 8003d4c:	20000478 	.word	0x20000478

08003d50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b04      	subs	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f023 0201 	bic.w	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <pxPortInitialiseStack+0x64>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b14      	subs	r3, #20
 8003d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b04      	subs	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f06f 0202 	mvn.w	r2, #2
 8003d9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b20      	subs	r3, #32
 8003da4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003da6:	68fb      	ldr	r3, [r7, #12]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	08003db9 	.word	0x08003db9

08003db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <prvTaskExitError+0x5c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d00c      	beq.n	8003de6 <prvTaskExitError+0x2e>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	b672      	cpsid	i
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	b662      	cpsie	i
 8003de0:	60fb      	str	r3, [r7, #12]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <prvTaskExitError+0x2c>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	b672      	cpsid	i
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	b662      	cpsie	i
 8003dfa:	60bb      	str	r3, [r7, #8]
}
 8003dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dfe:	bf00      	nop
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0fc      	beq.n	8003e00 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	2000000c 	.word	0x2000000c
	...

08003e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <pxCurrentTCBConst2>)
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	6808      	ldr	r0, [r1, #0]
 8003e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2a:	f380 8809 	msr	PSP, r0
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8811 	msr	BASEPRI, r0
 8003e3a:	4770      	bx	lr
 8003e3c:	f3af 8000 	nop.w

08003e40 <pxCurrentTCBConst2>:
 8003e40:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop

08003e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e48:	4808      	ldr	r0, [pc, #32]	; (8003e6c <prvPortStartFirstTask+0x24>)
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	6800      	ldr	r0, [r0, #0]
 8003e4e:	f380 8808 	msr	MSP, r0
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f380 8814 	msr	CONTROL, r0
 8003e5a:	b662      	cpsie	i
 8003e5c:	b661      	cpsie	f
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	df00      	svc	0
 8003e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e6a:	bf00      	nop
 8003e6c:	e000ed08 	.word	0xe000ed08

08003e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e76:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <xPortStartScheduler+0xe4>)
 8003e78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <xPortStartScheduler+0xe8>)
 8003e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <xPortStartScheduler+0xec>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ea4:	e009      	b.n	8003eba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <xPortStartScheduler+0xec>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <xPortStartScheduler+0xec>)
 8003eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d0ef      	beq.n	8003ea6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <xPortStartScheduler+0xec>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d00c      	beq.n	8003eec <xPortStartScheduler+0x7c>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	b672      	cpsid	i
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	b662      	cpsie	i
 8003ee6:	60bb      	str	r3, [r7, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <xPortStartScheduler+0xec>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <xPortStartScheduler+0xec>)
 8003ef4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <xPortStartScheduler+0xec>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <xPortStartScheduler+0xec>)
 8003f00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <xPortStartScheduler+0xf0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <xPortStartScheduler+0xf0>)
 8003f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <xPortStartScheduler+0xf0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <xPortStartScheduler+0xf0>)
 8003f1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f22:	f000 f8dd 	bl	80040e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <xPortStartScheduler+0xf4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f2c:	f000 f8fc 	bl	8004128 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <xPortStartScheduler+0xf8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <xPortStartScheduler+0xf8>)
 8003f36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f3c:	f7ff ff84 	bl	8003e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f40:	f7ff fd6a 	bl	8003a18 <vTaskSwitchContext>
	prvTaskExitError();
 8003f44:	f7ff ff38 	bl	8003db8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000e400 	.word	0xe000e400
 8003f58:	20000484 	.word	0x20000484
 8003f5c:	20000488 	.word	0x20000488
 8003f60:	e000ed20 	.word	0xe000ed20
 8003f64:	2000000c 	.word	0x2000000c
 8003f68:	e000ef34 	.word	0xe000ef34

08003f6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	b672      	cpsid	i
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	b662      	cpsie	i
 8003f86:	607b      	str	r3, [r7, #4]
}
 8003f88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <vPortEnterCritical+0x60>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <vPortEnterCritical+0x60>)
 8003f92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f94:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <vPortEnterCritical+0x60>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d111      	bne.n	8003fc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <vPortEnterCritical+0x64>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <vPortEnterCritical+0x54>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	b672      	cpsid	i
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	b662      	cpsie	i
 8003fba:	603b      	str	r3, [r7, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <vPortEnterCritical+0x52>
	}
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <vPortExitCritical+0x54>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <vPortExitCritical+0x28>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	b672      	cpsid	i
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	b662      	cpsie	i
 8003ff6:	607b      	str	r3, [r7, #4]
}
 8003ff8:	bf00      	nop
 8003ffa:	e7fe      	b.n	8003ffa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <vPortExitCritical+0x54>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3b01      	subs	r3, #1
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <vPortExitCritical+0x54>)
 8004004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <vPortExitCritical+0x54>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <vPortExitCritical+0x46>
 800400e:	2300      	movs	r3, #0
 8004010:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004018:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c
 800402c:	00000000 	.word	0x00000000

08004030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004030:	f3ef 8009 	mrs	r0, PSP
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <pxCurrentTCBConst>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	f01e 0f10 	tst.w	lr, #16
 8004040:	bf08      	it	eq
 8004042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404a:	6010      	str	r0, [r2, #0]
 800404c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004054:	b672      	cpsid	i
 8004056:	f380 8811 	msr	BASEPRI, r0
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	b662      	cpsie	i
 8004064:	f7ff fcd8 	bl	8003a18 <vTaskSwitchContext>
 8004068:	f04f 0000 	mov.w	r0, #0
 800406c:	f380 8811 	msr	BASEPRI, r0
 8004070:	bc09      	pop	{r0, r3}
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407a:	f01e 0f10 	tst.w	lr, #16
 800407e:	bf08      	it	eq
 8004080:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004084:	f380 8809 	msr	PSP, r0
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <pxCurrentTCBConst>:
 8004090:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	b672      	cpsid	i
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	b662      	cpsie	i
 80040b2:	607b      	str	r3, [r7, #4]
}
 80040b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040b6:	f7ff fbf5 	bl	80038a4 <xTaskIncrementTick>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <SysTick_Handler+0x44>)
 80040c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	2300      	movs	r3, #0
 80040ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	f383 8811 	msr	BASEPRI, r3
}
 80040d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <vPortSetupTimerInterrupt+0x34>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <vPortSetupTimerInterrupt+0x38>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <vPortSetupTimerInterrupt+0x3c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <vPortSetupTimerInterrupt+0x40>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	4a09      	ldr	r2, [pc, #36]	; (8004124 <vPortSetupTimerInterrupt+0x44>)
 80040fe:	3b01      	subs	r3, #1
 8004100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <vPortSetupTimerInterrupt+0x34>)
 8004104:	2207      	movs	r2, #7
 8004106:	601a      	str	r2, [r3, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e010 	.word	0xe000e010
 8004118:	e000e018 	.word	0xe000e018
 800411c:	20000000 	.word	0x20000000
 8004120:	10624dd3 	.word	0x10624dd3
 8004124:	e000e014 	.word	0xe000e014

08004128 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004128:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004138 <vPortEnableVFP+0x10>
 800412c:	6801      	ldr	r1, [r0, #0]
 800412e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004132:	6001      	str	r1, [r0, #0]
 8004134:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004136:	bf00      	nop
 8004138:	e000ed88 	.word	0xe000ed88

0800413c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004148:	f7ff fb00 	bl	800374c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800414c:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <pvPortMalloc+0x180>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004154:	f000 f91a 	bl	800438c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004158:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <pvPortMalloc+0x184>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 8092 	bne.w	800428a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01f      	beq.n	80041ac <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800416c:	2208      	movs	r2, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	2b00      	cmp	r3, #0
 800417c:	d016      	beq.n	80041ac <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f023 0307 	bic.w	r3, r3, #7
 8004184:	3308      	adds	r3, #8
 8004186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00c      	beq.n	80041ac <pvPortMalloc+0x70>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	b672      	cpsid	i
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	b662      	cpsie	i
 80041a6:	617b      	str	r3, [r7, #20]
}
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d06b      	beq.n	800428a <pvPortMalloc+0x14e>
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <pvPortMalloc+0x188>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d866      	bhi.n	800428a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041bc:	4b42      	ldr	r3, [pc, #264]	; (80042c8 <pvPortMalloc+0x18c>)
 80041be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041c0:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <pvPortMalloc+0x18c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041c6:	e004      	b.n	80041d2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d903      	bls.n	80041e4 <pvPortMalloc+0xa8>
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f1      	bne.n	80041c8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041e4:	4b35      	ldr	r3, [pc, #212]	; (80042bc <pvPortMalloc+0x180>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d04d      	beq.n	800428a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2208      	movs	r2, #8
 80041f4:	4413      	add	r3, r2
 80041f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	2308      	movs	r3, #8
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	429a      	cmp	r2, r3
 800420e:	d921      	bls.n	8004254 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <pvPortMalloc+0x100>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	b672      	cpsid	i
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	b662      	cpsie	i
 8004236:	613b      	str	r3, [r7, #16]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800424e:	69b8      	ldr	r0, [r7, #24]
 8004250:	f000 f8fe 	bl	8004450 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <pvPortMalloc+0x188>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <pvPortMalloc+0x188>)
 8004260:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <pvPortMalloc+0x188>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b19      	ldr	r3, [pc, #100]	; (80042cc <pvPortMalloc+0x190>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d203      	bcs.n	8004276 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <pvPortMalloc+0x188>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a16      	ldr	r2, [pc, #88]	; (80042cc <pvPortMalloc+0x190>)
 8004274:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <pvPortMalloc+0x184>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	431a      	orrs	r2, r3
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800428a:	f7ff fa6d 	bl	8003768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <pvPortMalloc+0x176>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	b672      	cpsid	i
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	b662      	cpsie	i
 80042ac:	60fb      	str	r3, [r7, #12]
}
 80042ae:	bf00      	nop
 80042b0:	e7fe      	b.n	80042b0 <pvPortMalloc+0x174>
	return pvReturn;
 80042b2:	69fb      	ldr	r3, [r7, #28]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20004094 	.word	0x20004094
 80042c0:	200040a0 	.word	0x200040a0
 80042c4:	20004098 	.word	0x20004098
 80042c8:	2000408c 	.word	0x2000408c
 80042cc:	2000409c 	.word	0x2000409c

080042d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d04c      	beq.n	800437c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042e2:	2308      	movs	r3, #8
 80042e4:	425b      	negs	r3, r3
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4413      	add	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <vPortFree+0xb4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10c      	bne.n	8004318 <vPortFree+0x48>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	b672      	cpsid	i
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	b662      	cpsie	i
 8004312:	60fb      	str	r3, [r7, #12]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <vPortFree+0x6a>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	b672      	cpsid	i
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	b662      	cpsie	i
 8004334:	60bb      	str	r3, [r7, #8]
}
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <vPortFree+0xb4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d019      	beq.n	800437c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d115      	bne.n	800437c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <vPortFree+0xb4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004360:	f7ff f9f4 	bl	800374c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <vPortFree+0xb8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4413      	add	r3, r2
 800436e:	4a06      	ldr	r2, [pc, #24]	; (8004388 <vPortFree+0xb8>)
 8004370:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004372:	6938      	ldr	r0, [r7, #16]
 8004374:	f000 f86c 	bl	8004450 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004378:	f7ff f9f6 	bl	8003768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800437c:	bf00      	nop
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	200040a0 	.word	0x200040a0
 8004388:	20004098 	.word	0x20004098

0800438c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004392:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004396:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <prvHeapInit+0xac>)
 800439a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00c      	beq.n	80043c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3307      	adds	r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	4a1f      	ldr	r2, [pc, #124]	; (8004438 <prvHeapInit+0xac>)
 80043bc:	4413      	add	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043c4:	4a1d      	ldr	r2, [pc, #116]	; (800443c <prvHeapInit+0xb0>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <prvHeapInit+0xb0>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4413      	add	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043d8:	2208      	movs	r2, #8
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0307 	bic.w	r3, r3, #7
 80043e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a15      	ldr	r2, [pc, #84]	; (8004440 <prvHeapInit+0xb4>)
 80043ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <prvHeapInit+0xb4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <prvHeapInit+0xb4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	1ad2      	subs	r2, r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <prvHeapInit+0xb4>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <prvHeapInit+0xb8>)
 800441a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a09      	ldr	r2, [pc, #36]	; (8004448 <prvHeapInit+0xbc>)
 8004422:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <prvHeapInit+0xc0>)
 8004426:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800442a:	601a      	str	r2, [r3, #0]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	2000048c 	.word	0x2000048c
 800443c:	2000408c 	.word	0x2000408c
 8004440:	20004094 	.word	0x20004094
 8004444:	2000409c 	.word	0x2000409c
 8004448:	20004098 	.word	0x20004098
 800444c:	200040a0 	.word	0x200040a0

08004450 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <prvInsertBlockIntoFreeList+0xac>)
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e002      	b.n	8004464 <prvInsertBlockIntoFreeList+0x14>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d8f7      	bhi.n	800445e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	4413      	add	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d108      	bne.n	8004492 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	441a      	add	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	441a      	add	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d118      	bne.n	80044d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <prvInsertBlockIntoFreeList+0xb0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d00d      	beq.n	80044ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e008      	b.n	80044e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <prvInsertBlockIntoFreeList+0xb0>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e003      	b.n	80044e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d002      	beq.n	80044ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	2000408c 	.word	0x2000408c
 8004500:	20004094 	.word	0x20004094

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d0d      	ldr	r5, [pc, #52]	; (800453c <__libc_init_array+0x38>)
 8004508:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <__libc_init_array+0x3c>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	2600      	movs	r6, #0
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	4d0b      	ldr	r5, [pc, #44]	; (8004544 <__libc_init_array+0x40>)
 8004516:	4c0c      	ldr	r4, [pc, #48]	; (8004548 <__libc_init_array+0x44>)
 8004518:	f000 f820 	bl	800455c <_init>
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	2600      	movs	r6, #0
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	f855 3b04 	ldr.w	r3, [r5], #4
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	f855 3b04 	ldr.w	r3, [r5], #4
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	080045c4 	.word	0x080045c4
 8004540:	080045c4 	.word	0x080045c4
 8004544:	080045c4 	.word	0x080045c4
 8004548:	080045c8 	.word	0x080045c8

0800454c <memset>:
 800454c:	4402      	add	r2, r0
 800454e:	4603      	mov	r3, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <memset+0xa>
 8004554:	4770      	bx	lr
 8004556:	f803 1b01 	strb.w	r1, [r3], #1
 800455a:	e7f9      	b.n	8004550 <memset+0x4>

0800455c <_init>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr

08004568 <_fini>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr
